<java.lang.Object: java.lang.Object clone()>
<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>
<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>
<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>
<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>
<sun.net.TelnetInputStream: int read()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractorHolder: com.google.android.exoplayer2.extractor.Extractor selectExtractor(com.google.android.exoplayer2.extractor.ExtractorInput,android.net.Uri)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serialize(long[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void serializeContents(long[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
<com.google.protobuf.GeneratedMessage: boolean parseUnknownField(com.google.protobuf.CodedInputStream,com.google.protobuf.UnknownFieldSet$Builder,com.google.protobuf.ExtensionRegistryLite,int)>
<org.whispersystems.jobqueue.persistence.JavaJobSerializer: org.whispersystems.jobqueue.Job deserialize(org.whispersystems.jobqueue.EncryptionKeys,boolean,java.lang.String)>
<org.whispersystems.jobqueue.persistence.JavaJobSerializer: java.lang.String serialize(org.whispersystems.jobqueue.Job)>
<com.google.zxing.qrcode.QRCodeWriter: com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)>
<com.google.zxing.qrcode.QRCodeWriter: com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)>
<com.fasterxml.jackson.core.JsonParser: byte[] getBinaryValue()>
<sun.security.util.DerIndefLenConverter: byte[] convert(byte[])>
<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>
<com.google.android.mms.pdu_alt.PduHeaders: void setOctet(int,int)>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void viewClicked(boolean)>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer: java.lang.Object _deserializeFromNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer: java.lang.Object _deserializeNonVanilla(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer: java.lang.Object _deserializeUsingPropertyBased(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer: java.lang.Object _deserializeWithCreator(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer: java.lang.Object finishBuild(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.google.android.mms.pdu_alt.GenericPdu: void setMessageType(int)>
<com.google.android.mms.pdu_alt.GenericPdu: void setMmsVersion(int)>
<sun.misc.HexDumpEncoder: void encodeBufferPrefix(java.io.OutputStream)>
<sun.misc.HexDumpEncoder: void encodeLinePrefix(java.io.OutputStream,int)>
<sun.misc.HexDumpEncoder: void encodeAtom(java.io.OutputStream,byte[],int,int)>
<sun.misc.HexDumpEncoder: void encodeLineSuffix(java.io.OutputStream)>
<com.google.android.exoplayer2.trackselection.DefaultTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelection[] selectTracks(com.google.android.exoplayer2.RendererCapabilities[],com.google.android.exoplayer2.source.TrackGroupArray[],int[][][])>
<com.google.android.exoplayer2.trackselection.DefaultTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelection selectVideoTrack(com.google.android.exoplayer2.RendererCapabilities,com.google.android.exoplayer2.source.TrackGroupArray,int[][],int,int,int,boolean,boolean,int,int,boolean,com.google.android.exoplayer2.trackselection.TrackSelection$Factory,boolean,boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeArrayPrefix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeArraySuffix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeObjectPrefix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeObjectSuffix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeScalarPrefix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void _writeScalarSuffix(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.String)>
<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>
<android.media.MediaCodec: void queueSecureInputBuffer(int,int,android.media.MediaCodec$CryptoInfo,long,int)>
<java.net.Socket: void createImpl(boolean)>
<java.net.Socket: java.net.SocketImpl getImpl()>
<java.net.Socket: void connect(java.net.SocketAddress)>
<java.net.Socket: void connect(java.net.SocketAddress,int)>
<java.net.Socket: void bind(java.net.SocketAddress)>
<java.net.Socket: java.io.InputStream getInputStream()>
<java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.Socket: void setSoTimeout(int)>
<java.net.Socket: void close()>
<sun.security.util.DerInputBuffer: int peek()>
<sun.security.util.DerInputBuffer: void truncate(int)>
<sun.security.util.DerInputBuffer: java.math.BigInteger getBigInteger(int,boolean)>
<sun.security.util.DerInputBuffer: int getInteger(int)>
<sun.security.util.DerInputBuffer: byte[] getBitString(int)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>
<sun.security.util.DerInputBuffer: byte[] getBitString()>
<sun.security.util.DerInputBuffer: sun.security.util.BitArray getUnalignedBitString()>
<sun.security.util.DerInputBuffer: java.util.Date getUTCTime(int)>
<sun.security.util.DerInputBuffer: java.util.Date getGeneralizedTime(int)>
<android.support.v7.preference.PreferenceInflater: android.support.v7.preference.Preference onCreateItem(java.lang.String,android.util.AttributeSet)>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<java.io.DataOutputStream: void writeShort(int)>
<java.io.DataOutputStream: void writeChar(int)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeLong(long)>
<java.io.DataOutputStream: void writeFloat(float)>
<java.io.DataOutputStream: void writeDouble(double)>
<org.ccil.cowan.tagsoup.HTMLScanner: void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler)>
<sun.nio.ch.FileChannelImpl: void implCloseChannel()>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void _serializeNull(com.fasterxml.jackson.core.JsonGenerator)>
<sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<sun.nio.ch.FileChannelImpl: long position()>
<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel position(long)>
<android.widget.TextView: void setInputExtras(int)>
<sun.nio.ch.FileChannelImpl: long size()>
<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel truncate(long)>
<java.lang.ref.FinalizerReference$Sentinel: void awaitFinalization(long)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.databind.JsonSerializer serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<sun.nio.ch.FileChannelImpl: int read(java.nio.ByteBuffer,long)>
<sun.nio.ch.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddPrimarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddPrimarySerializer(java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSecondarySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSecondarySerializer(java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<sun.nio.ch.FileChannelImpl: java.nio.channels.FileLock lock(long,long,boolean)>
<com.davemorrissey.labs.subscaleview.decoder.CompatDecoderFactory: java.lang.Object make()>
<sun.nio.ch.FileChannelImpl: void release(sun.nio.ch.FileLockImpl)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void addBeanProps(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void addInjectables(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)>
<android.app.ActivityManagerProxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: void addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<android.app.ActivityManagerProxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<android.app.ActivityManagerProxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
<android.app.ActivityManagerProxy: void stopLocalVoiceInteraction(android.os.IBinder)>
<android.app.ActivityManagerProxy: boolean supportsLocalVoiceInteraction()>
<android.app.ActivityManagerProxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
<android.app.ActivityManagerProxy: boolean finishActivityAffinity(android.os.IBinder)>
<android.app.ActivityManagerProxy: boolean releaseActivityInstance(android.os.IBinder)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.deser.SettableAnyProperty constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.reflect.Type)>
<android.app.ActivityManagerProxy: void attachApplication(android.app.IApplicationThread)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<android.app.ActivityManagerProxy: java.lang.String getCallingPackage(android.os.IBinder)>
<android.app.ActivityManagerProxy: android.content.ComponentName getCallingActivity(android.os.IBinder)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,java.lang.Class)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: java.util.List filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,java.util.List,java.util.Set)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.JavaType materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)>
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)>
<android.app.ActivityManagerProxy: int getRequestedOrientation(android.os.IBinder)>
<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int,android.content.res.Resources$Theme)>
<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>
<android.content.res.Resources: android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int,android.content.res.Resources$Theme)>
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>
<android.app.ActivityManagerProxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$CrashInfo)>
<android.app.ActivityManagerProxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)>
<android.app.ActivityManagerProxy: void addPackageDependency(java.lang.String)>
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>
<android.app.ActivityManagerProxy: boolean convertFromTranslucent(android.os.IBinder)>
<android.app.ActivityManagerProxy: boolean convertToTranslucent(android.os.IBinder,android.app.ActivityOptions)>
<android.app.ActivityManagerProxy: android.app.ActivityOptions getActivityOptions(android.os.IBinder)>
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)>
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)>
<android.app.ActivityManagerProxy: boolean isTopOfTask(android.os.IBinder)>
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)>
<android.app.ActivityManagerProxy: boolean shouldUpRecreateTask(android.os.IBinder,java.lang.String)>
<android.app.ActivityManagerProxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
<com.google.protobuf.AbstractParser: com.google.protobuf.MessageLite parseFrom(byte[],int,int,com.google.protobuf.ExtensionRegistryLite)>
<android.app.ActivityManagerProxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: void seek(long)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: void readFully(byte[])>
<android.app.ActivityManagerProxy: void reportActivityFullyDrawn(android.os.IBinder)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: short readShort()>
<android.support.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: int readInt()>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: int readUnsignedShort()>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: long readUnsignedInt()>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: long readLong()>
<android.app.ActivityManagerProxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: float readFloat()>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: double readDouble()>
<android.app.ActivityManagerProxy: void startLockTaskMode(android.os.IBinder)>
<com.google.protobuf.AbstractParser: com.google.protobuf.MessageLite parsePartialFrom(byte[],int,int,com.google.protobuf.ExtensionRegistryLite)>
<android.app.ActivityManagerProxy: void stopLockTaskMode()>
<android.app.ActivityManagerProxy: void showLockTaskEscapeMessage(android.os.IBinder)>
<android.app.ActivityManagerProxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
<android.app.ActivityManagerProxy: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>
<android.app.ActivityManagerProxy: boolean requestVisibleBehind(android.os.IBinder,boolean)>
<android.app.ActivityManagerProxy: boolean isBackgroundVisibleBehind(android.os.IBinder)>
<sun.security.x509.X500Name: void encode(sun.security.util.DerOutputStream)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void getMapAsync(com.google.android.gms.maps.internal.zzt)>
<android.app.ActivityManagerProxy: boolean isRootVoiceInteraction(android.os.IBinder)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: com.google.android.gms.dynamic.zzd getView()>
<android.app.ActivityManagerProxy: void exitFreeformMode(android.os.IBinder)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onCreate(android.os.Bundle)>
<android.app.ActivityManagerProxy: int getActivityStackId(android.os.IBinder)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onDestroy()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onEnterAmbient(android.os.Bundle)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onExitAmbient()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onLowMemory()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onPause()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onResume()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onSaveInstanceState(android.os.Bundle)>
<android.app.ActivityManagerProxy: boolean isInMultiWindowMode(android.os.IBinder)>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onStart()>
<com.google.android.gms.maps.internal.IMapViewDelegate$zza$zza: void onStop()>
<android.app.ActivityManagerProxy: boolean isInPictureInPictureMode(android.os.IBinder)>
<android.app.ActivityManagerProxy: void enterPictureInPictureMode(android.os.IBinder)>
<com.google.android.exoplayer2.upstream.Loader$LoadTask: void maybeThrowError(int)>
<org.thoughtcrime.securesms.crypto.MasterCipher: java.lang.String decryptBody(java.lang.String)>
<org.thoughtcrime.securesms.crypto.MasterCipher: byte[] decryptBytes(byte[])>
<org.thoughtcrime.securesms.crypto.MasterCipher: org.whispersystems.libsignal.ecc.ECPrivateKey decryptKey(byte[])>
<com.fasterxml.jackson.databind.ser.std.BooleanSerializer: void serialize(java.lang.Boolean,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.ValueInstantiator: java.lang.Object _createFromStringFallbacks(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>
<org.ccil.cowan.tagsoup.Parser: void setProperty(java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator _createGenerator(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser _createParser(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)>
<org.ccil.cowan.tagsoup.Parser: void parse(org.xml.sax.InputSource)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser _createParser(char[],int,int,com.fasterxml.jackson.core.io.IOContext,boolean)>
<com.fasterxml.jackson.core.JsonFactory: java.io.Reader _decorate(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)>
<org.ccil.cowan.tagsoup.Parser: void adup(char[],int,int)>
<com.fasterxml.jackson.core.JsonFactory: java.io.Writer _decorate(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)>
<org.ccil.cowan.tagsoup.Parser: void aname(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void aval(char[],int,int)>
<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>
<org.ccil.cowan.tagsoup.Parser: void entity(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void eof(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void etag(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: boolean etag_cdata(char[],int,int)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: void serialize(byte[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.ccil.cowan.tagsoup.Parser: void etag_basic(char[],int,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: void serializeWithType(byte[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer: java.lang.Object _deserializeFromNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.io.Reader)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer: java.lang.Object _deserializeNonVanilla(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer: java.lang.Object _deserializeUsingPropertyBased(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<org.ccil.cowan.tagsoup.Parser: void decl(char[],int,int)>
<org.thoughtcrime.securesms.database.MessagingDatabase: void removeFromDocument(long,java.lang.String,java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer: java.lang.Object _deserializeWithCreator(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: boolean findDeserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<org.ccil.cowan.tagsoup.Parser: void gi(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void pcdata(char[],int,int)>
<org.thoughtcrime.securesms.crypto.storage.TextSecurePreKeyStore: org.whispersystems.libsignal.state.PreKeyRecord loadPreKey(int)>
<org.ccil.cowan.tagsoup.Parser: void pitarget(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void pi(char[],int,int)>
<org.thoughtcrime.securesms.crypto.storage.TextSecurePreKeyStore: org.whispersystems.libsignal.state.SignedPreKeyRecord loadSignedPreKey(int)>
<org.ccil.cowan.tagsoup.Parser: void stagc(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void stage(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void cmnt(char[],int,int)>
<com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter: java.lang.Object value(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: void wrapAndThrow(java.lang.Throwable,java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)>
<org.ccil.cowan.tagsoup.Parser: void comment(char[],int,int)>
<org.ccil.cowan.tagsoup.Parser: void endDTD()>
<org.ccil.cowan.tagsoup.Parser: void startDTD(java.lang.String,java.lang.String,java.lang.String)>
<android.support.v4.app.INotificationSideChannel$Stub$Proxy: void cancel(java.lang.String,int,java.lang.String)>
<android.support.v4.app.INotificationSideChannel$Stub$Proxy: void cancelAll(java.lang.String)>
<android.support.v4.app.INotificationSideChannel$Stub$Proxy: void notify(java.lang.String,int,java.lang.String,android.app.Notification)>
<javax.crypto.Mac: void init(java.security.Key)>
<javax.crypto.Mac: void update(byte)>
<javax.crypto.Mac: void update(byte[])>
<javax.crypto.Mac: void update(byte[],int,int)>
<libcore.io.ClassPathURLStreamHandler$ClassPathURLConnection: void connect()>
<javax.crypto.Mac: byte[] doFinal()>
<javax.crypto.Mac: byte[] doFinal(byte[])>
<libcore.io.ForwardingOs: java.net.InetAddress[] android_getaddrinfo(java.lang.String,android.system.StructAddrinfo,int)>
<libcore.io.ForwardingOs: java.io.FileDescriptor dup(java.io.FileDescriptor)>
<libcore.io.ForwardingOs: int fcntlInt(java.io.FileDescriptor,int,int)>
<libcore.io.ForwardingOs: java.lang.String getnameinfo(java.net.InetAddress,int)>
<libcore.io.ForwardingOs: android.system.StructPasswd getpwuid(int)>
<libcore.io.ForwardingOs: int getsockoptInt(java.io.FileDescriptor,int,int)>
<libcore.io.ForwardingOs: android.system.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)>
<sun.security.util.ObjectIdentifier: void encode(sun.security.util.DerOutputStream)>
<libcore.io.ForwardingOs: long mmap(long,long,int,int,java.io.FileDescriptor,long)>
<libcore.io.ForwardingOs: void munmap(long,long)>
<sun.security.x509.CertificateAlgorithmId: void encode(java.io.OutputStream)>
<libcore.io.ForwardingOs: java.io.FileDescriptor[] pipe2(int)>
<sun.security.x509.CertificateAlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: void readExternal(java.io.ObjectInput)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: void writeExternal(java.io.ObjectOutput)>
<java.util.zip.GZIPInputStream: void close()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: char _handleUnrecognizedCharacterEscape(char)>
<java.util.logging.LogManager: void readConfiguration()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>
<java.util.logging.LogManager: void reset()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String)>
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOFInValue()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportMissingRootWS(int)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportUnexpectedChar(int,java.lang.String)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _throwInvalidSpace(int)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _throwUnquotedSpace(int,java.lang.String)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _wrapError(java.lang.String,java.lang.Throwable)>
<com.google.protobuf.GeneratedMessage$ExtendableMessage$ExtensionWriter: void writeUntil(int,com.google.protobuf.CodedOutputStream)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getValueAsString(java.lang.String)>
<com.fasterxml.jackson.core.json.DupDetector: boolean isDup(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serialize(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: void serializeContents(java.util.EnumSet,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.Class findClass(java.lang.String)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.DeserializationContext: boolean handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.DeserializationContext: java.util.Date parseDate(java.lang.String)>
<com.fasterxml.jackson.databind.DeserializationContext: void reportUnknownProperty(java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer: void serializeWithType(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<libcore.reflect.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>
<com.android.internal.util.BitwiseInputStream: int read(int)>
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)>
<com.android.internal.util.BitwiseInputStream: void skip(int)>
<okio.Buffer: byte[] readByteArray(long)>
<okio.Buffer: void readFully(byte[])>
<com.google.android.exoplayer2.source.ExtractorMediaSource: void maybeThrowSourceInfoRefreshError()>
<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>
<java.util.concurrent.LinkedBlockingQueue: void put(java.lang.Object)>
<android.icu.impl.ICUResourceBundle: android.icu.impl.ICUResourceBundle getWithFallback(java.lang.String)>
<android.icu.impl.ICUResourceBundle: java.lang.String getStringWithFallback(java.lang.String)>
<android.icu.impl.ICUResourceBundle: void getAllItemsWithFallback(java.lang.String,android.icu.impl.UResource$Sink)>
<com.google.android.gms.gcm.GoogleCloudMessaging: java.lang.String register(java.lang.String[])>
<com.google.android.gms.gcm.GoogleCloudMessaging: void unregister()>
<com.google.android.gms.gcm.GoogleCloudMessaging: android.content.Intent zzai(android.os.Bundle)>
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>
<java.util.zip.ZipOutputStream: void closeEntry()>
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>
<java.util.zip.ZipOutputStream: void close()>
<com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>
<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>
<com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.CharSequence,com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.google.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.fasterxml.jackson.core.Base64Variant: byte[] decode(java.lang.String)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: void parse(java.lang.CharSequence,java.lang.String,com.google.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<sun.nio.ch.FileLockImpl: void release()>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: void serialize(java.util.Calendar,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object _deserializeOther(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonToken)>
<java.net.PlainSocketImpl: void socketSetOption(int,boolean,java.lang.Object)>
<java.net.PlainSocketImpl: void socketCreate(boolean)>
<java.net.PlainSocketImpl: void socketConnect(java.net.InetAddress,int,int)>
<java.net.PlainSocketImpl: void socketBind(java.net.InetAddress,int)>
<java.net.PlainSocketImpl: void socketListen(int)>
<java.net.PlainSocketImpl: void socketAccept(java.net.SocketImpl)>
<java.net.PlainSocketImpl: int socketAvailable()>
<java.net.PlainSocketImpl: void socketClose0(boolean)>
<java.net.PlainSocketImpl: void socketSetOption0(int,boolean,java.lang.Object)>
<java.net.PlainSocketImpl: int socketGetOption(int,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeUsingPropertyBasedWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeUsingPropertyBasedWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<android.icu.impl.PluralRulesLoader: android.icu.util.UResourceBundle getPluralBundle()>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BeanDeserializer: java.lang.Object deserializeWithView(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serialize(boolean[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void serializeContents(boolean[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.json.JSONStringer: org.json.JSONStringer array()>
<org.json.JSONStringer: org.json.JSONStringer endArray()>
<org.json.JSONStringer: org.json.JSONStringer object()>
<org.json.JSONStringer: org.json.JSONStringer endObject()>
<org.json.JSONStringer: org.json.JSONStringer open(org.json.JSONStringer$Scope,java.lang.String)>
<org.json.JSONStringer: org.json.JSONStringer close(org.json.JSONStringer$Scope,org.json.JSONStringer$Scope,java.lang.String)>
<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>
<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)>
<sun.misc.FDBigInteger: int quoRemIteration(sun.misc.FDBigInteger)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaMetadataRetriever: void setDataSource(android.media.MediaDataSource)>
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isEnabled()>
<org.thoughtcrime.securesms.attachments.AttachmentServer$StreamToMediaPlayerTask: void execute()>
<org.thoughtcrime.securesms.attachments.AttachmentServer$StreamToMediaPlayerTask: boolean processRequest()>
<com.google.android.exoplayer2.upstream.Loader: void maybeThrowError()>
<com.google.android.exoplayer2.upstream.Loader: void maybeThrowError(int)>
<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.SignerInfo,byte[])>
<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo[] verify(byte[])>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void getAndFilter(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter)>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.AnyGetterWriter: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>
<org.json.JSONArray: void writeTo(org.json.JSONStringer)>
<java.io.PushbackReader: int read()>
<java.io.PushbackReader: void unread(int)>
<sun.security.x509.CertificateExtensions: void encode(java.io.OutputStream)>
<sun.security.x509.CertificateExtensions: void encode(java.io.OutputStream,boolean)>
<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>
<com.google.android.exoplayer2.util.ConditionVariable: void block()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMember findAnyGetter()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMethod findAnySetter()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object _deserializeFromEmpty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Boolean _parseBoolean(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _parseBooleanFromNumber(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _parseBooleanPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Byte _parseByte(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Double _parseDouble(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.File: java.io.File getCanonicalFile()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: double _parseDoublePrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<java.util.zip.Inflater: int inflate(byte[],int,int)>
<java.io.File: boolean createNewFile()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Float _parseFloat(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: float _parseFloatPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: int _parseIntPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Integer _parseInteger(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Long _parseLong(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: long _parseLongPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Short _parseShort(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.core.util.TextBuffer: java.math.BigDecimal contentsAsDecimal()>
<com.fasterxml.jackson.core.util.TextBuffer: double contentsAsDouble()>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: short _parseShortPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.String _parseString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: com.fasterxml.jackson.databind.JsonDeserializer findConvertingContentDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: com.fasterxml.jackson.databind.JsonDeserializer findDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: void handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serialize(java.net.InetAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.InetAddressSerializer: void serializeWithType(java.net.InetAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: void checkUnresolvedObjectId()>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: com.fasterxml.jackson.databind.KeyDeserializer keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<libcore.util.ZoneInfoDB$TzData: libcore.util.ZoneInfo makeTimeZoneUncached(java.lang.String)>
<libcore.util.ZoneInfoDB$TzData: libcore.util.ZoneInfo makeTimeZone(java.lang.String)>
<java.lang.Class: java.lang.Object newInstance()>
<java.io.ObjectStreamClass: void initProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.io.ObjectStreamClass: void initNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.io.ObjectStreamClass: void readNonProxy(java.io.ObjectInputStream)>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
<java.io.ObjectStreamClass: void writeNonProxy(java.io.ObjectOutputStream)>
<java.io.ObjectStreamClass: void checkDeserialize()>
<java.io.ObjectStreamClass: void checkSerialize()>
<java.io.ObjectStreamClass: void checkDefaultSerialize()>
<java.io.ObjectStreamClass: java.lang.Object newInstance()>
<java.io.ObjectStreamClass: void invokeWriteObject(java.lang.Object,java.io.ObjectOutputStream)>
<java.io.ObjectStreamClass: void invokeReadObject(java.lang.Object,java.io.ObjectInputStream)>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serialize(java.util.TimeZone,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void serialize(java.lang.Number,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.io.ObjectStreamClass: void invokeReadObjectNoData(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer: void serializeWithType(java.util.TimeZone,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<java.io.ObjectStreamClass: java.lang.Object invokeWriteReplace(java.lang.Object)>
<java.io.ObjectStreamClass: java.lang.Object invokeReadResolve(java.lang.Object)>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>
<java.lang.String: byte[] getBytes(java.lang.String)>
<sun.security.x509.CertificateX509Key: void encode(java.io.OutputStream)>
<sun.security.x509.CertificateX509Key: java.security.PublicKey get(java.lang.String)>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.security.Provider$EngineDescription: java.lang.Class getConstructorParameterClass()>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: void writeAsField(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: boolean writeAsId(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<com.google.protobuf.UnknownFieldSet$Builder: boolean mergeFieldFrom(int,com.google.protobuf.CodedInputStream)>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeFrom(com.google.protobuf.CodedInputStream)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor()>
<org.greenrobot.eventbus.PendingPostQueue: org.greenrobot.eventbus.PendingPost poll(int)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildArraySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeContentsUsing(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: void serializeTypedContents(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildCollectionSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer: void play(double)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildMapSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription,boolean,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.util.Converter findConverter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: java.lang.Object findSuppressableContentValue(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean _handleSelfReference(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.Object get(java.lang.Object)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireInterruptibly(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireSharedInterruptibly(int)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsOmittedField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void serializeAsPlaceholder(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.spongycastle.util.encoders.HexEncoder: int encode(byte[],int,int,java.io.OutputStream)>
<com.google.android.mms.pdu_alt.PduPersister: com.google.android.mms.pdu_alt.GenericPdu load(android.net.Uri)>
<com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer: java.util.Map$Entry deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map$Entry)>
<com.google.android.mms.pdu_alt.PduPersister: android.net.Uri move(android.net.Uri,android.net.Uri)>
<com.google.android.mms.pdu_alt.PduPersister: android.net.Uri persist(com.google.android.mms.pdu_alt.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)>
<com.google.android.mms.pdu_alt.PduPersister: android.net.Uri persistPart(com.google.android.mms.pdu_alt.PduPart,long,java.util.HashMap)>
<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator: java.lang.Object build(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer)>
<sun.security.x509.KeyUsageExtension: java.lang.Boolean get(java.lang.String)>
<android.os.ParcelFileDescriptor: void close()>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isSmsSimPickActivityNeeded(int)>
<android.os.ParcelFileDescriptor: void checkError()>
<com.android.internal.telephony.ISms$Stub$Proxy: int getPreferredSmsSubscription()>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<com.fasterxml.jackson.databind.deser.AbstractDeserializer: java.lang.Object _deserializeFromObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<java.net.URL: java.io.InputStream openStream()>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serialize(char[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.AbstractDeserializer: java.lang.Object _deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void serializeWithType(char[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object _deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<sun.security.x509.SerialNumber: void encode(sun.security.util.DerOutputStream)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeUsingPropertyBasedWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeUsingPropertyBasedWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object deserializeWithView(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.Class)>
<com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer: java.lang.Object finishBuild(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: void handlePrepared()>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: boolean selectTracks()>
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$CalendarKeySerializer: void serialize(java.util.Calendar,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<com.fasterxml.jackson.databind.deser.impl.ValueInjector: void inject(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
<org.json.JSONObject: java.lang.String checkName(java.lang.String)>
<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>
<org.json.JSONObject: java.lang.Object get(java.lang.String)>
<org.json.JSONObject: java.lang.String getString(java.lang.String)>
<org.json.JSONObject: void writeTo(org.json.JSONStringer)>
<libcore.io.IoUtils$FileReader: libcore.io.IoUtils$FileReader readFully()>
<com.google.android.gms.location.places.ui.PlacePicker$IntentBuilder: android.content.Intent build(android.app.Activity)>
<sun.security.x509.X509Key: void encode(sun.security.util.DerOutputStream)>
<sun.security.x509.X509Key: byte[] getEncodedInternal()>
<sun.security.x509.X509Key: byte[] encode()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void createAccount(boolean)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: org.whispersystems.signalservice.api.push.ContactTokenDetails getContactTokenDetails(java.lang.String)>
<sun.security.util.BitArray: boolean get(int)>
<sun.security.util.BitArray: void set(int,boolean)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: java.lang.String getNewDeviceVerificationCode()>
<com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer: java.nio.ByteBuffer deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.nio.ByteBuffer)>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder addUnicodeLocaleAttribute(java.lang.String)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void registerGcmId(java.lang.String)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void registerPreKeys(org.whispersystems.libsignal.IdentityKey,org.whispersystems.libsignal.state.SignedPreKeyRecord,java.util.List)>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder setExtension(char,java.lang.String)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: java.util.List retrieveDirectory(java.util.Set)>
<com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase: void wrapAndThrow(java.lang.Throwable,java.lang.Object,java.lang.String)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void sendProvisioningMessage(java.lang.String,byte[])>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder setLocale(android.icu.impl.locale.BaseLocale,android.icu.impl.locale.LocaleExtensions)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void unregisterGcmId()>
<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>
<org.whispersystems.signalservice.internal.push.PushServiceSocket: void verifyAccountCode(java.lang.String,java.lang.String,int,boolean)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void flush()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void close()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void drain()>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBoolean(boolean)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShort(int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLong(long)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBytes(java.lang.String)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeUTF(java.lang.String)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBooleans(boolean[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeChars(char[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShorts(short[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInts(int[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeFloats(float[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLongs(long[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeDoubles(double[],int,int)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeUTF(java.lang.String,long)>
<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLongUTF(java.lang.String,long)>
<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: int read(byte[],int,int)>
<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: void serialize(java.lang.Double,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer: void serializeWithType(java.lang.Double,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>
<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructFromCanonical(java.lang.String)>
<org.whispersystems.signalservice.internal.util.Base64$OutputStream: void flushBase64()>
<com.fasterxml.jackson.core.base.ParserBase: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>
<com.fasterxml.jackson.core.base.ParserBase: int _eofAsNextChar()>
<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>
<com.fasterxml.jackson.core.base.ParserBase: void _reportMismatchedEndMarker(int,char)>
<com.fasterxml.jackson.core.base.ParserBase: void close()>
<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigDecimal()>
<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigInteger()>
<android.media.TtmlParser: void parse(java.lang.String,long)>
<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToDouble()>
<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToInt()>
<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToLong()>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serialize(com.fasterxml.jackson.databind.JsonSerializable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.SerializableSerializer: void serializeWithType(com.fasterxml.jackson.databind.JsonSerializable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.fasterxml.jackson.core.base.ParserBase: void loadMoreGuaranteed()>
<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)>
<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>
<com.google.protobuf.TextFormat$TextGenerator: void print(java.lang.CharSequence)>
<com.fasterxml.jackson.core.base.ParserBase: void reportInvalidNumber(java.lang.String)>
<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>
<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>
<com.fasterxml.jackson.core.base.ParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>
<android.support.v4.provider.SelfDestructiveThread: java.lang.Object postAndWait(java.util.concurrent.Callable,int)>
<com.android.mms.service_alt.DownloadRequest: byte[] doHttp(android.content.Context,com.android.mms.service_alt.MmsNetworkManager,com.android.mms.service_alt.ApnSettings)>
<sun.net.www.protocol.jar.JarFileFactory: java.net.URLConnection getConnection(java.util.jar.JarFile)>
<sun.net.www.protocol.jar.JarFileFactory: java.util.jar.JarFile get(java.net.URL,boolean)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneTypeForSlot(int)>
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>
<javax.crypto.Cipher$SpiAndProviderUpdater: javax.crypto.Cipher$CipherSpiAndProvider updateAndGetSpiAndProvider(javax.crypto.Cipher$InitParams,javax.crypto.CipherSpi,java.security.Provider)>
<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parse(java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>
<com.fasterxml.jackson.databind.type.TypeParser: java.util.List parseTypes(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
<libcore.io.MemoryMappedFile: void close()>
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.util.Date _parseDate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.google.android.gms.internal.zzsh: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<com.google.android.gms.internal.zzsh: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<com.google.android.gms.internal.zzsh: java.lang.CharSequence zzik(java.lang.String)>
<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>
<java.io.ObjectInputStream$BlockDataInputStream: void skipBlockData()>
<java.io.ObjectInputStream$BlockDataInputStream: int peek()>
<java.io.ObjectInputStream$BlockDataInputStream: byte peekByte()>
<java.io.ObjectInputStream$BlockDataInputStream: int read()>
<java.io.ObjectInputStream$BlockDataInputStream: void close()>
<java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int,boolean)>
<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>
<java.io.ObjectInputStream$BlockDataInputStream: boolean readBoolean()>
<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>
<java.io.ObjectInputStream$BlockDataInputStream: short readShort()>
<java.io.ObjectInputStream$BlockDataInputStream: int readUnsignedShort()>
<java.io.ObjectInputStream$BlockDataInputStream: int readInt()>
<java.io.ObjectInputStream$BlockDataInputStream: long readLong()>
<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readUTF()>
<java.io.ObjectInputStream$BlockDataInputStream: void readBooleans(boolean[],int,int)>
<java.io.ObjectInputStream$BlockDataInputStream: void readChars(char[],int,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void finishInput(com.android.internal.view.IInputMethodClient)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>
<java.io.ObjectInputStream$BlockDataInputStream: void readShorts(short[],int,int)>
<java.io.ObjectInputStream$BlockDataInputStream: void readInts(int[],int,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>
<java.io.ObjectInputStream$BlockDataInputStream: void readFloats(float[],int,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int)>
<java.io.ObjectInputStream$BlockDataInputStream: void readLongs(long[],int,int)>
<java.io.ObjectInputStream$BlockDataInputStream: void readDoubles(double[],int,int)>
<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readLongUTF()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: java.lang.Object _deserializeWithNativeTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _findDefaultImplDeserializer(com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _findDeserializer(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.JavaType)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void notifyUserAction(int)>
<com.google.protobuf.UnknownFieldSet: void writeAsMessageSetTo(com.google.protobuf.CodedOutputStream)>
<org.xml.sax.helpers.DefaultHandler: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer: java.lang.String _locateTypeId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<android.app.IUiModeManager$Stub$Proxy: int getCurrentModeType()>
<android.icu.text.StringPrep: java.lang.StringBuffer prepare(android.icu.text.UCharacterIterator,int)>
<java.security.KeyStore: void load(java.io.InputStream,char[])>
<android.icu.impl.ReplaceableUCharacterIterator: void setIndex(int)>
<sun.security.x509.Extension: void encode(sun.security.util.DerOutputStream)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _checkIsNumber()>
<java.security.Signature: void initVerify(java.security.PublicKey)>
<java.security.Signature: void initSign(java.security.PrivateKey)>
<java.security.Signature: byte[] sign()>
<java.security.Signature: boolean verify(byte[])>
<java.security.Signature: void update(byte[])>
<java.security.Signature: void update(byte[],int,int)>
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: org.webrtc.SessionDescription createAnswer(org.webrtc.MediaConstraints)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: org.webrtc.SessionDescription createOffer(org.webrtc.MediaConstraints)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: void setLocalDescription(org.webrtc.SessionDescription)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: void setRemoteDescription(org.webrtc.SessionDescription)>
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>
<org.thoughtcrime.securesms.database.XmlBackup: org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem getNext()>
<java.util.concurrent.FutureTask: java.lang.Object get()>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)>
<com.klinker.android.send_message.MmsReceivedService$CommonNotificationTask: byte[] sendPdu(byte[])>
<com.klinker.android.send_message.MmsReceivedService$CommonNotificationTask: byte[] sendPdu(byte[],java.lang.String)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _createAndCache2(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _createAndCacheValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: java.io.InputStream getAttachmentStream(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.AttachmentId)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _createDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: java.io.InputStream getThumbnailStream(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.AttachmentId)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _createDeserializer2(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: void insertAttachmentsForMessage(org.thoughtcrime.securesms.crypto.MasterSecretUnion,long,java.util.List)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.KeyDeserializer _handleUnknownKeyDeserializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _handleUnknownValueDeserializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.util.Converter findConverter(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer findConvertingDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer findValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.DeserializerFactory,com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: void updateAttachmentThumbnail(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.AttachmentId,java.io.InputStream,float)>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$ProjectionMappingCursor: int getColumnIndexOrThrow(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serialize(java.net.InetSocketAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer: void serializeWithType(java.net.InetSocketAddress,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.google.protobuf.CodedOutputStream: void writeBool(int,boolean)>
<com.google.protobuf.CodedOutputStream: void writeBoolNoTag(boolean)>
<com.google.protobuf.CodedOutputStream: void writeBytes(int,com.google.protobuf.ByteString)>
<com.google.protobuf.CodedOutputStream: void writeBytesNoTag(com.google.protobuf.ByteString)>
<com.google.protobuf.CodedOutputStream: void writeDouble(int,double)>
<com.google.protobuf.CodedOutputStream: void writeDoubleNoTag(double)>
<com.google.protobuf.CodedOutputStream: void writeEnum(int,int)>
<com.google.protobuf.CodedOutputStream: void writeEnumNoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeFixed32(int,int)>
<com.google.protobuf.CodedOutputStream: void writeFixed32NoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeFixed64(int,long)>
<com.google.protobuf.CodedOutputStream: void writeFixed64NoTag(long)>
<com.google.protobuf.CodedOutputStream: void writeFloatNoTag(float)>
<com.google.protobuf.CodedOutputStream: void writeGroup(int,com.google.protobuf.MessageLite)>
<com.google.protobuf.CodedOutputStream: void writeGroupNoTag(com.google.protobuf.MessageLite)>
<com.google.protobuf.CodedOutputStream: void writeInt32(int,int)>
<com.google.protobuf.CodedOutputStream: void writeInt32NoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeInt64(int,long)>
<com.google.protobuf.CodedOutputStream: void writeInt64NoTag(long)>
<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>
<com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)>
<com.google.protobuf.CodedOutputStream: void writeMessageSetExtension(int,com.google.protobuf.MessageLite)>
<com.google.protobuf.CodedOutputStream: void writeRawByte(byte)>
<com.google.protobuf.CodedOutputStream: void writeRawByte(int)>
<com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString)>
<com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)>
<com.google.protobuf.CodedOutputStream: void writeRawBytes(byte[])>
<com.google.protobuf.CodedOutputStream: void writeRawBytes(byte[],int,int)>
<com.google.protobuf.CodedOutputStream: void writeRawLittleEndian32(int)>
<com.google.protobuf.CodedOutputStream: void writeRawLittleEndian64(long)>
<com.google.protobuf.CodedOutputStream: void writeRawMessageSetExtension(int,com.google.protobuf.ByteString)>
<com.google.protobuf.CodedOutputStream: void writeRawVarint32(int)>
<com.google.protobuf.CodedOutputStream: void writeRawVarint64(long)>
<com.google.protobuf.CodedOutputStream: void writeSFixed32NoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeSFixed64NoTag(long)>
<com.google.protobuf.CodedOutputStream: void writeSInt32NoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeSInt64NoTag(long)>
<com.google.protobuf.CodedOutputStream: void writeStringNoTag(java.lang.String)>
<com.google.protobuf.CodedOutputStream: void writeTag(int,int)>
<com.google.protobuf.CodedOutputStream: void writeUInt32(int,int)>
<com.google.protobuf.CodedOutputStream: void writeUInt32NoTag(int)>
<com.google.protobuf.CodedOutputStream: void writeUInt64(int,long)>
<com.google.protobuf.CodedOutputStream: void writeUInt64NoTag(long)>
<com.fasterxml.jackson.core.util.DefaultIndenter: void writeIndentation(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeInput()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _decodeEscaped()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString2()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleApos()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _handleOddName(int)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseAposName()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNegNumber()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parsePosNumber(int)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _releaseBuffers()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipString()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char getNextChar(java.lang.String)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean loadMore()>
<sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>
<sun.security.util.DerValue: boolean getBoolean()>
<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>
<sun.misc.CharacterEncoder: void encodeBufferSuffix(java.io.OutputStream)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructWriter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.ser.PropertyBuilder,boolean,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<sun.misc.CharacterEncoder: int readFully(java.io.InputStream,byte[])>
<sun.security.util.DerValue: byte[] getOctetString()>
<sun.security.util.DerValue: int getInteger()>
<sun.security.util.DerValue: java.math.BigInteger getBigInteger()>
<sun.security.util.DerValue: byte[] getBitString()>
<sun.misc.CharacterEncoder: void encodeBuffer(java.io.InputStream,java.io.OutputStream)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer _createSerializer2(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<sun.security.util.DerValue: java.lang.String getAsString()>
<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString(boolean)>
<sun.security.util.DerValue: byte[] getDataBytes()>
<sun.security.util.DerValue: java.lang.String getPrintableString()>
<sun.security.util.DerValue: java.lang.String getT61String()>
<sun.security.util.DerValue: java.lang.String getIA5String()>
<sun.security.util.DerValue: java.lang.String getBMPString()>
<sun.security.util.DerValue: java.lang.String getUTF8String()>
<sun.security.util.DerValue: java.lang.String getGeneralString()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer constructBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription)>
<sun.security.util.DerValue: byte[] toByteArray()>
<sun.security.util.DerValue: sun.security.util.DerInputStream toDerInputStream()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter constructObjectIdHandler(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.util.List findBeanProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.deser.impl.NullProvider: java.lang.Object nullValue(com.fasterxml.jackson.databind.DeserializationContext)>
<java.util.zip.DeflaterOutputStream: void close()>
<java.util.zip.DeflaterOutputStream: void deflate()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object _convertObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer _findSubclassDeserializer(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object _handleTypedObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.Object)>
<com.google.protobuf.UnknownFieldSet$Field: void writeAsMessageSetExtensionTo(int,com.google.protobuf.CodedOutputStream)>
<com.google.protobuf.UnknownFieldSet$Field: void writeTo(int,com.google.protobuf.CodedOutputStream)>
<android.support.v4.app.FragmentActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.support.v4.app.FragmentActivity: void startIntentSenderFromFragment(android.support.v4.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromBoolean(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromDouble(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromEmbedded(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromNumber(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromObjectUsingNonDefault(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeFromString(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object deserializeWithObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.JsonDeserializer findConvertingDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void handleIgnoredProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object handlePolymorphic(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: java.lang.Object handleUnknownProperties(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void handleUnknownVanilla(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void injectValues(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void wrapAndThrow(java.lang.Throwable,java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: void wrapInstantiationProblem(java.lang.Throwable,com.fasterxml.jackson.databind.DeserializationContext)>
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.icu.impl.StringPrepDataReader: char[] read(int)>
<android.icu.impl.StringPrepDataReader: int[] readIndexes(int)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap: android.graphics.Bitmap lambda$get$0$EmojiPageBitmap()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer: void serialize(java.lang.Float,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: boolean parseUnknownField(com.google.protobuf.CodedInputStream,com.google.protobuf.UnknownFieldSet$Builder,com.google.protobuf.ExtensionRegistryLite,int)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$DateKeySerializer: void serialize(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<sun.security.x509.RDN: void encode(sun.security.util.DerOutputStream)>
<java.security.Signature$Delegate: void engineInitVerify(java.security.PublicKey)>
<java.security.Signature$Delegate: void engineInitSign(java.security.PrivateKey)>
<java.security.Signature$Delegate: void engineUpdate(byte[],int,int)>
<java.security.Signature$Delegate: byte[] engineSign()>
<java.lang.UNIXProcess: void initStreams(int[])>
<java.security.Signature$Delegate: boolean engineVerify(byte[])>
<com.google.android.gms.maps.internal.zzc$zza$zza: com.google.android.gms.maps.internal.IMapViewDelegate zza(com.google.android.gms.dynamic.zzd,com.google.android.gms.maps.GoogleMapOptions)>
<java.io.Reader: int read(java.nio.CharBuffer)>
<java.io.Reader: int read(char[])>
<com.google.android.gms.maps.internal.zzc$zza$zza: com.google.android.gms.maps.internal.ICameraUpdateFactoryDelegate zzbsc()>
<com.google.android.gms.maps.internal.zzc$zza$zza: com.google.android.gms.maps.model.internal.zza zzbsd()>
<com.google.android.gms.maps.internal.zzc$zza$zza: void zzh(com.google.android.gms.dynamic.zzd,int)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>
<org.whispersystems.jobqueue.persistence.PersistentStorage: void store(org.whispersystems.jobqueue.Job)>
<org.json.JSONTokener: java.lang.Object nextValue()>
<com.fasterxml.jackson.core.JsonGenerator: void _reportError(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: void _writeSimpleObject(java.lang.Object)>
<org.json.JSONTokener: java.lang.String nextString(char)>
<com.fasterxml.jackson.core.JsonGenerator: void writeArrayFieldStart(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(java.io.InputStream,int)>
<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>
<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[],int,int)>
<com.fasterxml.jackson.core.JsonGenerator: void writeObjectFieldStart(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: void writeObjectRef(java.lang.Object)>
<com.fasterxml.jackson.core.JsonGenerator: void writeOmittedField(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(int)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer: void serialize(java.lang.Short,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<sun.security.pkcs.PKCS9Attributes: void encode(byte,java.io.OutputStream)>
<sun.security.pkcs.PKCS9Attributes: byte[] getDerEncoding()>
<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>
<com.google.android.exoplayer2.BaseRenderer: void enable(com.google.android.exoplayer2.RendererConfiguration,com.google.android.exoplayer2.Format[],com.google.android.exoplayer2.source.SampleStream,long,boolean,long)>
<java.net.URI$Parser: void parse(boolean)>
<com.google.android.exoplayer2.BaseRenderer: void maybeThrowStreamError()>
<com.google.android.exoplayer2.BaseRenderer: void replaceStream(com.google.android.exoplayer2.Format[],com.google.android.exoplayer2.source.SampleStream,long)>
<com.google.android.exoplayer2.BaseRenderer: void resetPosition(long)>
<com.google.android.exoplayer2.BaseRenderer: void start()>
<com.google.android.exoplayer2.BaseRenderer: void stop()>
<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serialize(double[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void serializeContents(double[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<libcore.io.Posix: java.net.InetAddress[] android_getaddrinfo(java.lang.String,android.system.StructAddrinfo,int)>
<libcore.io.Posix: void close(java.io.FileDescriptor)>
<libcore.io.Posix: java.io.FileDescriptor dup(java.io.FileDescriptor)>
<com.google.protobuf.LiteralByteString: java.lang.String toString(java.lang.String)>
<libcore.io.Posix: int fcntlInt(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: android.system.StructStat fstat(java.io.FileDescriptor)>
<libcore.io.Posix: java.lang.String getnameinfo(java.net.InetAddress,int)>
<libcore.io.Posix: android.system.StructPasswd getpwuid(int)>
<libcore.io.Posix: int getsockoptInt(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: android.system.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)>
<libcore.io.Posix: long lseek(java.io.FileDescriptor,long,int)>
<libcore.io.Posix: long mmap(long,long,int,int,java.io.FileDescriptor,long)>
<libcore.io.Posix: void munmap(long,long)>
<libcore.io.Posix: java.io.FileDescriptor open(java.lang.String,int,int)>
<libcore.io.Posix: java.io.FileDescriptor[] pipe2(int)>
<libcore.io.Posix: int read(java.io.FileDescriptor,byte[],int,int)>
<libcore.io.Posix: java.lang.String readlink(java.lang.String)>
<libcore.io.Posix: android.system.StructStat stat(java.lang.String)>
<libcore.io.Posix: android.system.StructStatVfs statvfs(java.lang.String)>
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>
<java.util.jar.Manifest: void read(java.io.InputStream)>
<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: void serialize(java.lang.Enum,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.io.RandomAccessFile: int read()>
<java.io.RandomAccessFile: int read(byte[],int,int)>
<java.io.RandomAccessFile: int skipBytes(int)>
<java.io.RandomAccessFile: void write(byte[])>
<java.io.RandomAccessFile: long getFilePointer()>
<java.io.RandomAccessFile: void seek(long)>
<java.io.RandomAccessFile: long length()>
<java.io.RandomAccessFile: int readInt()>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void serialize(java.util.UUID,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer: double _parseDouble(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer: int _parseInt(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer: long _parseLong(java.lang.String)>
<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>
<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>
<android.content.res.ResourcesImpl: java.lang.String getResourcePackageName(int)>
<android.content.res.ResourcesImpl: java.lang.String getResourceTypeName(int)>
<android.content.res.ResourcesImpl: java.lang.String getResourceEntryName(int)>
<android.content.res.ResourcesImpl: java.lang.CharSequence getQuantityText(int,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)>
<android.content.res.ResourcesImpl: android.content.res.AssetFileDescriptor openRawResourceFd(int,android.util.TypedValue)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<android.content.res.ResourcesImpl: java.io.InputStream openRawResource(int,android.util.TypedValue)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void writeStartObject(com.fasterxml.jackson.core.JsonGenerator)>
<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadDrawable(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme,boolean)>
<java.net.AbstractPlainSocketImpl: void create(boolean)>
<java.net.AbstractPlainSocketImpl: void connect(java.lang.String,int)>
<java.net.AbstractPlainSocketImpl: void connect(java.net.InetAddress,int)>
<java.net.AbstractPlainSocketImpl: void setOption(int,java.lang.Object)>
<java.net.AbstractPlainSocketImpl: java.lang.Object getOption(int)>
<android.content.res.ResourcesImpl: android.content.res.ColorStateList loadColorStateList(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>
<org.thoughtcrime.securesms.video.exo.AttachmentDataSource: void close()>
<java.net.AbstractPlainSocketImpl: void doConnect(java.net.InetAddress,int,int)>
<org.thoughtcrime.securesms.video.exo.AttachmentDataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>
<java.net.AbstractPlainSocketImpl: void bind(java.net.InetAddress,int)>
<java.net.AbstractPlainSocketImpl: void listen(int)>
<java.net.AbstractPlainSocketImpl: void accept(java.net.SocketImpl)>
<java.net.AbstractPlainSocketImpl: java.io.InputStream getInputStream()>
<java.net.AbstractPlainSocketImpl: java.io.OutputStream getOutputStream()>
<android.content.res.ResourcesImpl: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>
<java.net.AbstractPlainSocketImpl: int available()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase: java.util.List setRegisteredUsers(android.accounts.Account,java.util.List,boolean)>
<java.net.AbstractPlainSocketImpl: void reset()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>
<java.net.AbstractPlainSocketImpl: void socketClose()>
<sun.security.x509.CertificateVersion: void encode(java.io.OutputStream)>
<sun.security.x509.CertificateVersion: java.lang.Integer get(java.lang.String)>
<sun.security.util.DerOutputStream: void write(byte,byte[])>
<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>
<sun.security.util.DerOutputStream: void putDerValue(sun.security.util.DerValue)>
<sun.security.util.DerOutputStream: void putBoolean(boolean)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: void _addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,java.util.Map)>
<sun.security.util.DerOutputStream: void putInteger(java.math.BigInteger)>
<sun.security.util.DerOutputStream: void putInteger(int)>
<sun.security.util.DerOutputStream: void putUnalignedBitString(sun.security.util.BitArray)>
<sun.security.util.DerOutputStream: void putTruncatedUnalignedBitString(sun.security.util.BitArray)>
<sun.security.util.DerOutputStream: void putOctetString(byte[])>
<sun.security.util.DerOutputStream: void putNull()>
<sun.security.util.DerOutputStream: void putOID(sun.security.util.ObjectIdentifier)>
<sun.security.util.DerOutputStream: void putOrderedSetOf(byte,sun.security.util.DerEncoder[])>
<sun.security.util.DerOutputStream: void putPrintableString(java.lang.String)>
<sun.security.util.DerOutputStream: void putIA5String(java.lang.String)>
<sun.security.util.DerOutputStream: void putUTCTime(java.util.Date)>
<sun.security.util.DerOutputStream: void putGeneralizedTime(java.util.Date)>
<sun.security.util.DerOutputStream: void putLength(int)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.deser.ValueInstantiator _constructDefaultValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: java.util.Map _findCreatorsFromProperties(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomArrayDeserializer(com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomBeanDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomCollectionDeserializer(com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomCollectionLikeDeserializer(com.fasterxml.jackson.databind.type.CollectionLikeType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomEnumDeserializer(java.lang.Class,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomMapDeserializer(com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomMapLikeDeserializer(com.fasterxml.jackson.databind.type.MapLikeType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer _findCustomTreeNodeDeserializer(java.lang.Class,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: boolean _handleSingleArgumentConstructor(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,boolean,boolean)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: boolean _handleSingleArgumentFactory(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.VisibilityChecker,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.deser.impl.CreatorCollector,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,boolean)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.deser.ValueInstantiator _valueInstantiatorInstance(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.deser.CreatorProperty constructCreatorProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.PropertyName,int,com.fasterxml.jackson.databind.introspect.AnnotatedParameter,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createArrayDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.type.ArrayType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createCollectionDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.type.CollectionType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createCollectionLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.type.CollectionLikeType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createEnumDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.KeyDeserializer createKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createMapDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.type.MapType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createMapLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.type.MapLikeType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer createTreeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer findDefaultDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<java.io.ObjectInputStream$ValidationList: void doCallbacks()>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JsonDeserializer findOptionalStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findPropertyContentTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findPropertyTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>
<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.deser.ValueInstantiator findValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JavaType mapAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JavaType modifyTypeByAnnotation(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<org.whispersystems.signalservice.internal.crypto.ProvisioningCipher: byte[] encrypt(org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.JavaType resolveType(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<java.lang.BootClassLoader: java.lang.Class findClass(java.lang.String)>
<java.lang.BootClassLoader: java.util.Enumeration findResources(java.lang.String)>
<org.thoughtcrime.securesms.util.Base64$OutputStream: void flushBase64()>
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<java.io.DataInputStream: int read(byte[],int,int)>
<java.io.DataInputStream: void readFully(byte[])>
<java.io.DataInputStream: void readFully(byte[],int,int)>
<java.io.DataInputStream: int skipBytes(int)>
<java.io.DataInputStream: boolean readBoolean()>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: int readUnsignedByte()>
<java.io.DataInputStream: short readShort()>
<java.io.DataInputStream: int readUnsignedShort()>
<java.io.DataInputStream: char readChar()>
<java.io.DataInputStream: int readInt()>
<java.io.DataInputStream: long readLong()>
<java.io.DataInputStream: float readFloat()>
<java.io.DataInputStream: double readDouble()>
<sun.net.www.protocol.ftp.FtpURLConnection: void connect()>
<java.net.SocketInputStream: int read(byte[],int,int,int)>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer: java.lang.Object _deserializeTypedForId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer: java.lang.Object _deserializeTypedUsingDefaultImpl(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createAndCacheUntypedSerializer(java.lang.Class)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer _handleResolvable(com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findPrimaryPropertySerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<com.google.android.exoplayer2.audio.AudioTrack: void configure(java.lang.String,int,int,int,int,int[])>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.google.android.exoplayer2.audio.AudioTrack: boolean handleBuffer(java.nio.ByteBuffer,long)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>
<com.google.android.exoplayer2.audio.AudioTrack: void playToEndOfStream()>
<com.fasterxml.jackson.databind.ser.impl.UnknownSerializer: void failForEmpty(java.lang.Object)>
<android.media.ExifInterface: void saveAttributes()>
<java.lang.ProcessBuilder: java.lang.Process start()>
<android.icu.text.PluralRules$RuleList: android.icu.text.PluralRules$RuleList finish()>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serialize(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<android.icu.impl.UCharacterNameReader: void read(android.icu.impl.UCharacterName)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: void serializeContents(java.util.Iterator,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<sun.security.x509.UniqueIdentity: void encode(sun.security.util.DerOutputStream,byte)>
<com.google.android.gms.iid.InstanceID: void deleteInstanceID()>
<com.google.android.gms.iid.InstanceID: java.lang.String getToken(java.lang.String,java.lang.String,android.os.Bundle)>
<com.google.android.gms.iid.InstanceID: void zzb(java.lang.String,java.lang.String,android.os.Bundle)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serialize(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: void serializeContents(java.lang.Iterable,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.google.android.gms.iid.InstanceID: java.lang.String zzc(java.lang.String,java.lang.String,android.os.Bundle)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer: void serialize(java.lang.Long,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.util.concurrent.CountDownLatch: void await()>
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>
<java.net.URI: java.net.URL toURL()>
<java.util.jar.Manifest$FastInputStream: int readLine(byte[],int,int)>
<java.util.jar.Manifest$FastInputStream: byte peek()>
<java.util.jar.Manifest$FastInputStream: int readLine(byte[])>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable: void load()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void resolveForwardReference(java.lang.Object,java.lang.Object)>
<com.google.android.exoplayer2.mediacodec.MediaCodecSelector$1: com.google.android.exoplayer2.mediacodec.MediaCodecInfo getDecoderInfo(java.lang.String,boolean)>
<com.google.android.exoplayer2.mediacodec.MediaCodecSelector$1: com.google.android.exoplayer2.mediacodec.MediaCodecInfo getPassthroughDecoderInfo()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void readExternal(java.io.ObjectInput)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder: java.io.File getFile(boolean)>
<java.security.Signature$CipherAdapter: void engineInitVerify(java.security.PublicKey)>
<java.security.Signature$CipherAdapter: void engineInitSign(java.security.PrivateKey)>
<java.security.Signature$CipherAdapter: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>
<java.security.Signature$CipherAdapter: void engineUpdate(byte[],int,int)>
<java.security.Signature$CipherAdapter: byte[] engineSign()>
<java.security.Signature$CipherAdapter: boolean engineVerify(byte[])>
<java.util.regex.Matcher: int start(int)>
<java.io.SequenceInputStream: void nextStream()>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSubId()>
<com.google.android.mms.pdu_alt.NotifyRespInd: void setStatus(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getPhoneId(int)>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSmsSubId()>
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)>
<android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: void readExternal(java.io.ObjectInput)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: void writeExternal(java.io.ObjectOutput)>
<android.media.IAudioService$Stub$Proxy: boolean isCameraSoundForced()>
<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader: java.lang.Object readObjectReference(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: java.util.Map _deserializeUsingCreator(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBind(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void _readAndBindStringMap(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: java.util.Map deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Map)>
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()>
<android.graphics.drawable.DrawableInflater: android.graphics.drawable.Drawable inflateFromXml(java.lang.String,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<com.google.android.gms.iid.zzc: android.content.Intent zza(android.os.Bundle,java.security.KeyPair)>
<com.google.android.gms.iid.zzc: void zza(android.os.Bundle,java.security.KeyPair,java.lang.String)>
<com.google.android.gms.iid.zzc: java.lang.String zzt(android.content.Intent)>
<java.net.Inet6AddressImpl: java.net.InetAddress[] lookupAllHostAddr(java.lang.String,int)>
<java.net.Inet6AddressImpl: java.lang.String getHostByAddr(byte[])>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: void _throwAsIOE(java.lang.Exception,java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: void deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: void set(java.lang.Object,java.lang.String,java.lang.Object)>
<java.io.OutputStreamWriter: void flushBuffer()>
<java.io.OutputStreamWriter: void write(char[],int,int)>
<java.io.OutputStreamWriter: void close()>
<java.lang.Object: void wait(long)>
<java.lang.Object: void wait(long,int)>
<java.lang.Object: void wait()>
<org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque: java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit)>
<org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque: java.lang.Object takeFirst()>
<android.media.MediaPlayer$TimeProvider: long getCurrentTimeUs(boolean,boolean)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<com.android.mms.service_alt.MmsNetworkManager: android.net.Network acquireNetwork()>
<sun.net.www.protocol.jar.JarURLConnection: void connect()>
<android.icu.util.UResourceBundleIterator: android.icu.util.UResourceBundle next()>
<android.icu.util.UResourceBundleIterator: java.lang.String nextString()>
<sun.net.www.protocol.file.FileURLConnection: void connect()>
<org.whispersystems.libsignal.fingerprint.ScannableFingerprint: boolean compareTo(byte[])>
<org.thoughtcrime.securesms.jobs.persistence.EncryptingJobSerializer: org.whispersystems.jobqueue.Job deserialize(org.whispersystems.jobqueue.EncryptionKeys,boolean,java.lang.String)>
<org.thoughtcrime.securesms.jobs.persistence.EncryptingJobSerializer: java.lang.String serialize(org.whispersystems.jobqueue.Job)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>
<org.thoughtcrime.securesms.providers.PersistentBlobProvider: android.net.Uri createForExternal(java.lang.String)>
<org.thoughtcrime.securesms.providers.PersistentBlobProvider: java.io.InputStream getStream(org.thoughtcrime.securesms.crypto.MasterSecret,long)>
<java.util.Properties$LineReader: int readLine()>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: com.fasterxml.jackson.databind.JsonDeserializer findDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.io.IOException _throwAsIOE(java.lang.Exception)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: void _throwAsIOE(java.lang.Exception,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _flushBuffer()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _verifyPrettyValueWrite(java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _verifyValueWrite(java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeFieldName(com.fasterxml.jackson.core.SerializableString,boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writeFieldName(java.lang.String,boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writePPFieldName(com.fasterxml.jackson.core.SerializableString,boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _writePPFieldName(java.lang.String,boolean)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void close()>
<sun.security.x509.AlgorithmId: void decodeParams()>
<sun.security.x509.AlgorithmId: void encode(sun.security.util.DerOutputStream)>
<sun.security.x509.AlgorithmId: void derEncode(java.io.OutputStream)>
<sun.security.x509.AlgorithmId: byte[] getEncodedParams()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(char)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(com.fasterxml.jackson.core.SerializableString)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeRaw(char[],int,int)>
<sun.net.ftp.FtpClient: sun.net.ftp.FtpClient setBinaryType()>
<sun.net.ftp.FtpClient: sun.net.ftp.FtpClient setAsciiType()>
<java.io.FileOutputStream: void write(byte[])>
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient connect(java.net.SocketAddress)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient connect(java.net.SocketAddress,int)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient login(java.lang.String,char[])>
<sun.net.ftp.impl.FtpClient: void close()>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient changeDirectory(java.lang.String)>
<sun.net.ftp.impl.FtpClient: java.io.InputStream getFileStream(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: java.lang.Object handleIdValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient completePending()>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient setType(sun.net.ftp.FtpClient$TransferType)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: boolean readIdProperty(java.lang.String)>
<sun.net.ftp.impl.FtpClient: java.io.InputStream list(java.lang.String)>
<sun.net.ftp.impl.FtpClient: java.io.InputStream nameList(java.lang.String)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderResponse waitForAndGetProvider()>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serialize(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: void serializeContents(java.lang.String[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer: void serializeAsArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>
<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaPlayer: void prepare()>
<android.media.MediaPlayer: void prepareAsync()>
<android.media.MediaPlayer: void start()>
<android.media.MediaPlayer: void stop()>
<android.media.MediaPlayer: void pause()>
<android.media.MediaPlayer: void seekTo(int)>
<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>
<android.media.MediaPlayer: void setAudioSessionId(int)>
<org.kxml2.io.KXmlParser: int next()>
<android.media.MediaPlayer: void addSubtitleSource(java.io.InputStream,android.media.MediaFormat)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addAndResolveNonTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.SerializerProvider)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$SampleStreamImpl: void maybeThrowError()>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer: void serialize(java.lang.Integer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer: void serializeWithType(java.lang.Integer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<sun.nio.cs.StreamEncoder: void flushBuffer()>
<sun.nio.cs.StreamEncoder: void write(char[],int,int)>
<sun.nio.cs.StreamEncoder: void close()>
<sun.nio.cs.StreamEncoder: void implWrite(char[],int,int)>
<sun.nio.cs.StreamEncoder: void implFlushBuffer()>
<sun.nio.cs.StreamEncoder: void implClose()>
<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)>
<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>
<org.kxml2.io.KXmlParser: int getEventType()>
<org.kxml2.io.KXmlParser: int nextTag()>
<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>
<org.kxml2.io.KXmlParser: void setFeature(java.lang.String,boolean)>
<libcore.io.BlockGuardOs: void close(java.io.FileDescriptor)>
<sun.security.x509.CertificateSerialNumber: void encode(java.io.OutputStream)>
<sun.security.x509.CertificateSerialNumber: sun.security.x509.SerialNumber get(java.lang.String)>
<libcore.io.BlockGuardOs: android.system.StructStat fstat(java.io.FileDescriptor)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.ser.impl.WritableObjectId)>
<libcore.io.BlockGuardOs: long lseek(java.io.FileDescriptor,long,int)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,boolean)>
<libcore.io.BlockGuardOs: int read(java.io.FileDescriptor,byte[],int,int)>
<libcore.io.BlockGuardOs: java.lang.String readlink(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object[] mapArrayToArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<libcore.io.BlockGuardOs: android.system.StructStat stat(java.lang.String)>
<libcore.io.BlockGuardOs: android.system.StructStatVfs statvfs(java.lang.String)>
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: com.fasterxml.jackson.databind.JsonSerializer findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void serializeFields(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: void serializeFieldsFiltered(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.io.FileInputStream: java.io.FileDescriptor getFD()>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: void serialize(java.lang.String,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.io.BufferedWriter: void flushBuffer()>
<java.io.BufferedWriter: void newLine()>
<java.io.BufferedWriter: void close()>
<org.whispersystems.signalservice.internal.util.concurrent.SettableFuture: java.lang.Object get()>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void write(byte[])>
<com.fasterxml.jackson.databind.util.TokenBuffer: void close()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void writeByte(int)>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void writeShort(short)>
<org.thoughtcrime.securesms.util.concurrent.SettableFuture: java.lang.Object get()>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void writeInt(int)>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void writeUnsignedShort(int)>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void writeUnsignedInt(long)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.databind.util.TokenBuffer deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<sun.security.pkcs.ContentInfo: byte[] getData()>
<sun.security.pkcs.ContentInfo: byte[] getContentBytes()>
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
<dalvik.system.SocketTagger$1: void untag(java.io.FileDescriptor)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>
<java.util.Locale: java.lang.String getISO3Language()>
<java.net.InetAddress$1: java.net.InetAddress[] lookupAllHostAddr(java.lang.String,int)>
<java.net.InetAddress$1: java.lang.String getHostByAddr(byte[])>
<sun.security.x509.RFC822Name: void parseName(java.lang.String)>
<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>
<com.android.net.IProxyService$Stub$Proxy: java.lang.String resolvePacFile(java.lang.String,java.lang.String)>
<com.android.internal.util.FastPrintWriter$DummyWriter: void close()>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode _fromEmbedded(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode _fromFloat(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode _fromInt(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: void _handleDuplicateField(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory,java.lang.String,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: void _handleDuplicateField(java.lang.String,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: void _reportProblem(com.fasterxml.jackson.core.JsonParser,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode deserializeAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ArrayNode deserializeArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serialize(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeContentsUsing(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: void serializeTypedContents(java.lang.Object[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serialize(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFieldsUsing(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeFilteredFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeOptionalFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeTypedFields(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)>
<sun.security.pkcs.SignerInfo: java.security.cert.X509Certificate getCertificate(sun.security.pkcs.PKCS7)>
<sun.security.pkcs.SignerInfo: java.util.ArrayList getCertificateChain(sun.security.pkcs.PKCS7)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void serializeWithType(java.util.Map,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>
<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,java.io.InputStream)>
<sun.security.pkcs.SignerInfo: java.security.Timestamp getTimestamp()>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguage(java.lang.String)>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setScript(java.lang.String)>
<org.thoughtcrime.securesms.providers.SingleUseBlobProvider: java.io.InputStream getStream(long)>
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>
<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>
<com.fasterxml.jackson.databind.ObjectMapper: void _configAndWriteValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.JsonDeserializer _findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.core.JsonToken _initForReading(com.fasterxml.jackson.core.JsonParser)>
<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object _readMapAndClose(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object _unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer)>
<android.icu.text.RuleBasedNumberFormat: android.icu.text.NFRuleSet findRuleSet(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer: void serialize(java.nio.ByteBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.Reader,java.lang.Class)>
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serialize(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serializeContents(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.android.mms.service_alt.MmsHttpClient: byte[] execute(java.lang.String,byte[],java.lang.String,boolean,java.lang.String,int,com.android.mms.service_alt.MmsConfig$Overridden)>
<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<sun.security.util.DerInputStream: sun.security.util.DerInputStream subStream(int,boolean)>
<sun.security.util.DerInputStream: int getInteger()>
<sun.security.util.DerInputStream: java.math.BigInteger getBigInteger()>
<sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>
<sun.security.util.DerInputStream: byte[] getOctetString()>
<sun.security.util.DerInputStream: void getBytes(byte[])>
<sun.security.util.DerInputStream: sun.security.util.ObjectIdentifier getOID()>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSet(int,boolean,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int)>
<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int,boolean)>
<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>
<sun.security.util.DerInputStream: java.util.Date getUTCTime()>
<sun.security.util.DerInputStream: java.util.Date getGeneralizedTime()>
<sun.security.util.DerInputStream: int getByte()>
<sun.security.util.DerInputStream: int peekByte()>
<sun.security.util.DerInputStream: int getLength()>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: com.fasterxml.jackson.databind.JsonDeserializer _findCustomDeser(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object[] mapArrayToArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer: java.lang.Object mapObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.ser.BeanPropertyWriter buildWriter(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.introspect.AnnotatedMember,boolean)>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void addDevice(java.lang.String,org.whispersystems.libsignal.ecc.ECPublicKey,org.whispersystems.libsignal.IdentityKeyPair,org.whispersystems.libsignal.util.guava.Optional,java.lang.String)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: org.whispersystems.libsignal.util.guava.Optional getContact(java.lang.String)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: java.util.List getContacts(java.util.Set)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: java.lang.String getNewDeviceVerificationCode()>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void requestSmsVerificationCode()>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void requestVoiceVerificationCode()>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void setGcmId(org.whispersystems.libsignal.util.guava.Optional)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void setPreKeys(org.whispersystems.libsignal.IdentityKey,org.whispersystems.libsignal.state.SignedPreKeyRecord,java.util.List)>
<org.whispersystems.signalservice.api.SignalServiceAccountManager: void verifyAccountWithCode(java.lang.String,java.lang.String,int,boolean)>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serialize(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: void serialize(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serialize(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeDynamic(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeUsing(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: void serializeWithType(java.util.Map$Entry,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<android.os.storage.IMountService$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
<com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer: void serialize(java.lang.Number,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>
<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>
<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>
<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeStreamHeader()>
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>
<java.io.ObjectOutputStream: void flush()>
<java.io.ObjectOutputStream: void close()>
<java.io.ObjectOutputStream: void writeBoolean(boolean)>
<java.io.ObjectOutputStream: void writeByte(int)>
<java.io.ObjectOutputStream: void writeShort(int)>
<java.io.ObjectOutputStream: void writeInt(int)>
<java.io.ObjectOutputStream: void writeLong(long)>
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>
<java.io.ObjectOutputStream: void writeTypeString(java.lang.String)>
<java.util.Properties: void load(java.io.Reader)>
<java.util.Properties: void load(java.io.InputStream)>
<java.security.AlgorithmParameters: void init(byte[])>
<java.security.AlgorithmParameters: byte[] getEncoded()>
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)>
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()>
<android.support.v7.widget.AppCompatTextHelper: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>
<android.support.v7.widget.AppCompatTextHelper: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
<android.hardware.input.IInputManager$Stub$Proxy: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer: void serialize(java.lang.String,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serialize(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer: void serializeWithType(java.util.List,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()>
<java.io.ObjectInputStream: java.lang.Object readObject()>
<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>
<com.android.mms.transaction.RetrieveTransaction: java.lang.String getContentLocation(android.content.Context,android.net.Uri)>
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>
<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>
<java.io.ObjectInputStream: void readStreamHeader()>
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>
<java.io.ObjectInputStream: void close()>
<java.io.ObjectInputStream: boolean readBoolean()>
<java.io.ObjectInputStream: byte readByte()>
<java.io.ObjectInputStream: short readShort()>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectInputStream: long readLong()>
<java.io.ObjectInputStream: java.lang.String readUTF()>
<com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers: com.fasterxml.jackson.databind.KeyDeserializer findKeyDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<java.io.ObjectInputStream: java.lang.String readTypeString()>
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>
<com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler: java.lang.Object processUnwrapped(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,com.fasterxml.jackson.databind.util.TokenBuffer)>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void flushCodec()>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void maybeInitCodec()>
<java.lang.Thread: void join(long)>
<java.lang.Thread: void join()>
<android.view.IWindowManager$Stub$Proxy: float getCurrentAnimatorScale()>
<android.view.IWindowManager$Stub$Proxy: void showStrictModeViolation(boolean)>
<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: boolean hasNavigationBar()>
<java.io.UnixFileSystem: boolean createFileExclusively(java.lang.String)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void maybeThrowError()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void maybeThrowPrepareError()>
<sun.security.x509.CertificateValidity: void encode(java.io.OutputStream)>
<sun.security.x509.CertificateValidity: java.util.Date get(java.lang.String)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.util.Converter converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.annotation.ObjectIdGenerator objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<com.google.android.gms.common.zzc: void zzbp(android.content.Context)>
<sun.nio.cs.StreamDecoder: int read()>
<sun.nio.cs.StreamDecoder: int read(char[],int,int)>
<sun.nio.cs.StreamDecoder: void close()>
<sun.nio.cs.StreamDecoder: int implRead(char[],int,int)>
<sun.nio.cs.StreamDecoder: void implClose()>
<com.google.protobuf.CodedInputStream: void checkLastTagWas(int)>
<com.google.protobuf.CodedInputStream: boolean isAtEnd()>
<com.google.protobuf.CodedInputStream: int pushLimit(int)>
<com.google.protobuf.CodedInputStream: boolean readBool()>
<com.google.protobuf.CodedInputStream: com.google.protobuf.ByteString readBytes()>
<com.google.protobuf.CodedInputStream: double readDouble()>
<com.google.protobuf.CodedInputStream: int readEnum()>
<com.google.protobuf.CodedInputStream: int readFixed32()>
<com.google.protobuf.CodedInputStream: long readFixed64()>
<com.google.protobuf.CodedInputStream: float readFloat()>
<com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)>
<com.google.protobuf.CodedInputStream: int readInt32()>
<com.google.protobuf.CodedInputStream: long readInt64()>
<com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)>
<com.google.protobuf.CodedInputStream: void readMessage(com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)>
<com.google.protobuf.CodedInputStream: byte readRawByte()>
<com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)>
<com.google.protobuf.CodedInputStream: int readRawLittleEndian32()>
<com.google.protobuf.CodedInputStream: long readRawLittleEndian64()>
<com.google.protobuf.CodedInputStream: int readRawVarint32()>
<com.google.protobuf.CodedInputStream: long readRawVarint64()>
<com.google.protobuf.CodedInputStream: int readSFixed32()>
<com.google.protobuf.CodedInputStream: long readSFixed64()>
<com.google.protobuf.CodedInputStream: int readSInt32()>
<com.google.protobuf.CodedInputStream: long readSInt64()>
<com.google.protobuf.CodedInputStream: java.lang.String readString()>
<com.google.protobuf.CodedInputStream: int readTag()>
<com.google.protobuf.CodedInputStream: int readUInt32()>
<com.google.protobuf.CodedInputStream: long readUInt64()>
<com.google.protobuf.CodedInputStream: boolean skipField(int)>
<com.google.protobuf.CodedInputStream: void skipMessage()>
<com.google.protobuf.CodedInputStream: void skipRawBytes(int)>
<com.google.protobuf.Descriptors$DescriptorPool: void addFieldByNumber(com.google.protobuf.Descriptors$FieldDescriptor)>
<com.google.protobuf.Descriptors$DescriptorPool: void addPackage(java.lang.String,com.google.protobuf.Descriptors$FileDescriptor)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void await()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: long awaitNanos(long)>
<com.google.protobuf.Descriptors$DescriptorPool: void addSymbol(com.google.protobuf.Descriptors$GenericDescriptor)>
<com.google.protobuf.Descriptors$DescriptorPool: com.google.protobuf.Descriptors$GenericDescriptor lookupSymbol(java.lang.String,com.google.protobuf.Descriptors$GenericDescriptor,com.google.protobuf.Descriptors$DescriptorPool$SearchFilter)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serialize(float[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serializeContents(float[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List)>
<android.content.res.XmlBlock$Parser: int getEventType()>
<android.content.res.XmlBlock$Parser: boolean isEmptyElementTag()>
<android.content.res.XmlBlock$Parser: int next()>
<android.content.res.XmlBlock$Parser: void require(int,java.lang.String,java.lang.String)>
<org.thoughtcrime.securesms.database.XmlBackup$Writer: void close()>
<org.thoughtcrime.securesms.database.XmlBackup$Writer: void writeItem(org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: void bindItem(java.lang.Object)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
<java.net.ServerSocket: java.net.SocketImpl getImpl()>
<java.net.ServerSocket: void createImpl()>
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>
<java.net.ServerSocket: java.net.Socket accept()>
<java.net.ServerSocket: void implAccept(java.net.Socket)>
<java.net.ServerSocket: void close()>
<java.net.ServerSocket: void setSoTimeout(int)>
<javax.crypto.Cipher: void init(int,java.security.Key)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<javax.crypto.Cipher: byte[] doFinal()>
<javax.crypto.Cipher: int doFinal(byte[],int)>
<javax.crypto.Cipher: byte[] doFinal(byte[])>
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serialize(int[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serializeContents(int[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>
<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>
<java.util.jar.JarVerifier: void update(int,sun.security.util.ManifestEntryVerifier)>
<java.util.jar.JarVerifier: void update(int,byte[],int,int,sun.security.util.ManifestEntryVerifier)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)>
<org.thoughtcrime.securesms.database.MmsDatabase: long copyMessageInbox(org.thoughtcrime.securesms.crypto.MasterSecret,long)>
<org.thoughtcrime.securesms.database.MmsDatabase: org.thoughtcrime.securesms.mms.OutgoingMediaMessage getOutgoingMessage(org.thoughtcrime.securesms.crypto.MasterSecret,long)>
<java.io.ObjectInputStream$PeekInputStream: int peek()>
<java.io.ObjectInputStream$PeekInputStream: int read()>
<java.io.ObjectInputStream$PeekInputStream: int read(byte[],int,int)>
<java.io.ObjectInputStream$PeekInputStream: void readFully(byte[],int,int)>
<java.io.ObjectInputStream$PeekInputStream: int available()>
<java.io.ObjectInputStream$PeekInputStream: void close()>
<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>
<com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer: java.lang.String[] _deserializeCustom(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<org.thoughtcrime.securesms.database.MmsDatabase: long insertMessageOutbox(org.thoughtcrime.securesms.crypto.MasterSecretUnion,org.thoughtcrime.securesms.mms.OutgoingMediaMessage,long,boolean,org.thoughtcrime.securesms.database.SmsDatabase$InsertListener)>
<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>
<sun.nio.ch.FileDispatcherImpl: int read(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int pread(java.io.FileDescriptor,long,int,long)>
<sun.nio.ch.FileDispatcherImpl: int write(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int pwrite(java.io.FileDescriptor,long,int,long)>
<sun.nio.ch.FileDispatcherImpl: int truncate(java.io.FileDescriptor,long)>
<sun.nio.ch.FileDispatcherImpl: long size(java.io.FileDescriptor)>
<sun.nio.ch.FileDispatcherImpl: int lock(java.io.FileDescriptor,boolean,long,long,boolean)>
<sun.nio.ch.FileDispatcherImpl: void release(java.io.FileDescriptor,long,long)>
<sun.nio.ch.FileDispatcherImpl: void close(java.io.FileDescriptor)>
<android.content.pm.IPackageManager$Stub$Proxy: void notifyPackageUse(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.List,java.lang.String)>
<com.google.android.exoplayer2.trackselection.MappingTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelectorResult selectTracks(com.google.android.exoplayer2.RendererCapabilities[],com.google.android.exoplayer2.source.TrackGroupArray)>
<com.klinker.android.send_message.MmsReceivedReceiver$CommonAsyncTask: byte[] sendPdu(byte[])>
<com.klinker.android.send_message.MmsReceivedReceiver$CommonAsyncTask: byte[] sendPdu(byte[],java.lang.String)>
<java.io.SerialCallbackContext: void check()>
<sun.security.pkcs.SigningCertificateInfo: void parse(byte[])>
<android.media.AudioTrack: void play()>
<android.media.AudioTrack: void stop()>
<android.media.AudioTrack: void pause()>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.jsontype.TypeDeserializer findTypeDeserializer(com.fasterxml.jackson.databind.JavaType)>
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>
<android.media.AudioRecord: void startRecording()>
<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void readExternal(java.io.ObjectInput)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void writeExternal(java.io.ObjectOutput)>
<android.content.res.AssetFileDescriptor: void close()>
<java.io.BufferedReader: java.lang.String readLine(boolean)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void close()>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer: java.util.Collection handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.util.Collection)>
<com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer: java.lang.Byte[] deserializeFromBase64(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: java.lang.Object _deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,int,java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: void _deserializeAndSet(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object,int,java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: java.lang.Object complete(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer,com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: java.lang.Object complete(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handlePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: boolean handleTypePropertyValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.String,java.lang.Object)>
<com.google.protobuf.FieldSet: void writeMessageSetTo(com.google.protobuf.CodedOutputStream)>
<com.google.protobuf.FieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>
<android.media.Cea708CCWidget$CCWindowLayout: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle)>
<android.media.Cea708CCWidget$CCWindowLayout: void setFontScale(float)>
<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>
<android.media.Cea708CCWidget$CCWindowLayout: void setCaptionWindowId(int)>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void startCommunication(boolean)>
<android.media.Cea708CCWidget$CCWindowLayout: void setPenAttr(android.media.Cea708CCParser$CaptionPenAttr)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>
<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void startOutgoingRinger(org.thoughtcrime.securesms.webrtc.audio.OutgoingRinger$Type)>
<org.thoughtcrime.securesms.database.EarlyReceiptCache: java.util.Map remove(long)>
<android.media.Cea708CCWidget$CCWindowLayout: void setPenColor(android.media.Cea708CCParser$CaptionPenColor)>
<android.media.Cea708CCWidget$CCWindowLayout: void setPenLocation(int,int)>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void stop(boolean)>
<android.media.Cea708CCWidget$CCWindowLayout: void setWindowAttr(android.media.Cea708CCParser$CaptionWindowAttr)>
<android.media.Cea708CCWidget$CCWindowLayout: void sendBuffer(java.lang.String)>
<android.media.Cea708CCWidget$CCWindowLayout: void sendControl(char)>
<android.media.Cea708CCWidget$CCWindowLayout: void initWindow(android.media.Cea708CCWidget$CCLayout,android.media.Cea708CCParser$CaptionWindow)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<android.icu.impl.ICUResourceBundle$1: android.icu.impl.ICUResourceBundle createInstance(java.lang.String,android.icu.impl.ICUResourceBundle$Loader)>
<android.icu.util.Currency$CurrencyNameResultHandler: boolean handlePrefixMatch(int,java.util.Iterator)>
<dalvik.system.profiler.HprofData: void setStartMillis(long)>
<dalvik.system.profiler.HprofData: void setFlags(int)>
<dalvik.system.profiler.HprofData: void setDepth(int)>
<android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>
<org.thoughtcrime.securesms.database.PushDatabase: long insert(org.whispersystems.signalservice.api.messages.SignalServiceEnvelope)>
<android.transition.TransitionInflater: android.transition.Transition inflateTransition(int)>
<android.media.Cea708CCWidget$CCWindowLayout: void appendText(java.lang.String)>
<android.transition.TransitionInflater: android.transition.TransitionManager inflateTransitionManager(int,android.view.ViewGroup)>
<android.media.Cea708CCWidget$CCWindowLayout: void setRowLimit(int)>
<java.io.ObjectStreamField: void setOffset(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup$OverflowPanelViewHelper: android.view.View getView(android.view.MenuItem,int,android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup$OverflowPanelViewHelper: int getItemViewType(android.view.MenuItem)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup$OverflowPanelViewHelper: int calculateWidth(android.view.MenuItem)>
<android.content.res.StringBlock: java.lang.CharSequence get(int)>
<java.io.ObjectStreamClass$3: int compare(java.io.ObjectStreamClass$MemberSignature,java.io.ObjectStreamClass$MemberSignature)>
<android.os.ConditionVariable: boolean block(long)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>
<dagger.internal.FailoverLoader: dagger.internal.Binding getAtInjectBinding(java.lang.String,java.lang.String,java.lang.ClassLoader,boolean)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,long[])>
<dagger.internal.FailoverLoader: dagger.internal.ModuleAdapter getModuleAdapter(java.lang.Class)>
<org.thoughtcrime.securesms.scribbles.StickerSelectFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.String[])>
<org.thoughtcrime.securesms.scribbles.StickerSelectFragment: void setListener(org.thoughtcrime.securesms.scribbles.StickerSelectFragment$StickerSelectionListener)>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: byte[] getBitmapAsByteArray(android.graphics.Bitmap$CompressFormat,int)>
<android.support.v7.widget.DropDownListView: void setListSelectionHidden(boolean)>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: void render(android.graphics.Canvas)>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: void setActive(boolean)>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: void setPaintFillColor(int)>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: void setPaintStrokeColor(int)>
<com.nineoldandroids.animation.ObjectAnimator: com.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.nineoldandroids.animation.ObjectAnimator: void setIntValues(int[])>
<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>
<com.nineoldandroids.animation.ObjectAnimator: void setProperty(com.nineoldandroids.util.Property)>
<com.nineoldandroids.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void insert(int,android.widget.RemoteViews,long,int[])>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViews getRemoteViewsAt(int)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void queueRequestedPositionToLoad(int)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: boolean queuePositionsToBePreloadedFromRequestedPosition(int)>
<pl.tajchert.sample.DotsTextView: void setDotsColor(int)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: boolean containsMetaDataAt(int)>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder setLocalFingerprint(org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint)>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder setRemoteFingerprint(org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint)>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder setVersion(int)>
<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>
<com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder bearing(float)>
<com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder target(com.google.android.gms.maps.model.LatLng)>
<com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder tilt(float)>
<com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder zoom(float)>
<com.fasterxml.jackson.core.JsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>
<org.ccil.cowan.tagsoup.ElementType: java.lang.String namespace(java.lang.String,boolean)>
<org.ccil.cowan.tagsoup.ElementType: java.lang.String localName(java.lang.String)>
<org.ccil.cowan.tagsoup.ElementType: boolean canContain(org.ccil.cowan.tagsoup.ElementType)>
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: void onRemoteViewsLoaded(android.widget.RemoteViews,android.widget.RemoteViews$OnClickHandler)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$1: com.takisoft.colorpicker.ColorPickerDialog$Params createFromParcel(android.os.Parcel)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$1: com.takisoft.colorpicker.ColorPickerDialog$Params[] newArray(int)>
<org.thoughtcrime.securesms.GroupCreateActivity$FillExistingGroupInfoAsyncTask: org.whispersystems.libsignal.util.guava.Optional doInBackground(java.lang.String[])>
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(java.lang.String,java.lang.String,java.lang.String)>
<org.ccil.cowan.tagsoup.ElementType: void setParent(org.ccil.cowan.tagsoup.ElementType)>
<org.thoughtcrime.securesms.GroupCreateActivity$FillExistingGroupInfoAsyncTask: void onPostExecute(org.whispersystems.libsignal.util.guava.Optional)>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.content.UriMatcher: int match(android.net.Uri)>
<org.thoughtcrime.securesms.MessageRecipientListItem$ResendAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto getValue(int)>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityEvent: void setAction(int)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback$2: void executeAction(java.lang.Long)>
<org.thoughtcrime.securesms.ConfirmIdentityDialog$AcceptListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback$2: void reverseAction(java.lang.Long)>
<sun.misc.LRUCache: java.lang.Object forName(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<com.google.android.mms.pdu_alt.PduHeaders: void appendEncodedStringValue(com.google.android.mms.pdu_alt.EncodedStringValue,int)>
<android.widget.CompoundButton: void setOnCheckedChangeWidgetListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<com.google.android.mms.pdu_alt.PduHeaders: com.google.android.mms.pdu_alt.EncodedStringValue getEncodedStringValue(int)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection)>
<com.google.android.mms.pdu_alt.PduHeaders: com.google.android.mms.pdu_alt.EncodedStringValue[] getEncodedStringValues(int)>
<com.google.android.mms.pdu_alt.PduHeaders: long getLongInteger(int)>
<com.google.android.mms.pdu_alt.PduHeaders: int getOctet(int)>
<android.widget.CompoundButton: void setButtonTintList(android.content.res.ColorStateList)>
<com.google.android.mms.pdu_alt.PduHeaders: byte[] getTextString(int)>
<android.widget.CompoundButton: void setButtonTintMode(android.graphics.PorterDuff$Mode)>
<com.google.android.mms.pdu_alt.PduHeaders: void setEncodedStringValue(com.google.android.mms.pdu_alt.EncodedStringValue,int)>
<com.google.android.mms.pdu_alt.PduHeaders: void setLongInteger(long,int)>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection,boolean,boolean)>
<com.doomonafireball.betterpickers.timepicker.TimerView: void setTheme(int)>
<dagger.internal.Keys$1: java.lang.Boolean create(java.lang.Class)>
<com.google.android.mms.pdu_alt.PduHeaders: void setTextString(byte[],int)>
<com.doomonafireball.betterpickers.timepicker.TimerView: void setTime(int,int,int,int)>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker$SavedState$1: com.doomonafireball.betterpickers.hmspicker.HmsPicker$SavedState createFromParcel(android.os.Parcel)>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker$SavedState$1: com.doomonafireball.betterpickers.hmspicker.HmsPicker$SavedState[] newArray(int)>
<android.widget.PopupWindow$PopupDecorView$2: void onTransitionEnd(android.transition.Transition)>
<android.support.v7.widget.RecyclerView$ItemAnimatorRestoreListener: void onAnimationFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<sun.util.calendar.BaseCalendar: int getYearLength(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: long getDayOfYear(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: long getDayOfYear(int,int,int)>
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>
<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>
<org.thoughtcrime.securesms.ConversationActivity$17: java.lang.Boolean doInBackground(java.lang.Void[])>
<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>
<org.thoughtcrime.securesms.ConversationActivity$17: void onPostExecute(java.lang.Boolean)>
<android.widget.RemoteViews$BitmapCache: void writeBitmapsToParcel(android.os.Parcel,int)>
<android.view.ContextThemeWrapper: void setTheme(int)>
<android.widget.RemoteViews$BitmapCache: void assimilate(android.widget.RemoteViews$BitmapCache)>
<android.widget.RemoteViews$BitmapCache: void addBitmapMemory(android.widget.RemoteViews$MemoryUsageCounter)>
<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>
<sun.util.calendar.BaseCalendar: int getGregorianYearFromFixedDate(long)>
<android.support.v7.widget.TooltipPopup: void show(android.view.View,int,int,boolean,java.lang.CharSequence)>
<sun.util.calendar.BaseCalendar: boolean isLeapYear(sun.util.calendar.CalendarDate)>
<com.google.android.exoplayer2.trackselection.TrackSelectionArray: com.google.android.exoplayer2.trackselection.TrackSelection get(int)>
<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<android.widget.RemoteViewsAdapter: void setVisibleRangeHint(int,int)>
<org.thoughtcrime.securesms.database.DraftDatabase$Drafts: java.lang.String getSnippet(android.content.Context)>
<org.thoughtcrime.securesms.database.DraftDatabase$Drafts: android.net.Uri getUriSnippet(android.content.Context)>
<android.support.v7.app.WindowDecorActionBar: void animateToMode(boolean)>
<android.support.v7.app.WindowDecorActionBar: void doHide(boolean)>
<android.support.v7.app.WindowDecorActionBar: void doShow(boolean)>
<android.support.v7.app.WindowDecorActionBar: void enableContentAnimations(boolean)>
<android.icu.text.PluralRules$FixedDecimal: double get(android.icu.text.PluralRules$Operand)>
<com.google.android.mms.pdu_alt.GenericPdu: void setFrom(com.google.android.mms.pdu_alt.EncodedStringValue)>
<android.support.v7.app.WindowDecorActionBar: void onWindowVisibilityChanged(int)>
<org.thoughtcrime.securesms.ConversationListFragment: void onItemClick(org.thoughtcrime.securesms.ConversationListItem)>
<org.thoughtcrime.securesms.ConversationListFragment: void onItemLongClick(org.thoughtcrime.securesms.ConversationListItem)>
<org.thoughtcrime.securesms.ConversationListFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<org.thoughtcrime.securesms.components.camera.CameraUtils$AreaComparator: int compare(android.hardware.Camera$Size,android.hardware.Camera$Size)>
<org.thoughtcrime.securesms.ConversationListFragment: void setQueryFilter(java.lang.String)>
<android.support.v7.app.WindowDecorActionBar: void setCustomView(android.view.View)>
<com.google.android.exoplayer2.trackselection.DefaultTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelection selectAudioTrack(com.google.android.exoplayer2.source.TrackGroupArray,int[][],java.lang.String,boolean)>
<android.support.v7.app.WindowDecorActionBar: void setDisplayOptions(int,int)>
<android.support.v7.app.WindowDecorActionBar: void setElevation(float)>
<android.support.v7.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>
<android.support.v7.app.WindowDecorActionBar: void setHomeButtonEnabled(boolean)>
<com.google.android.exoplayer2.trackselection.DefaultTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelection selectOtherTrack(int,com.google.android.exoplayer2.source.TrackGroupArray,int[][],boolean)>
<com.google.android.exoplayer2.trackselection.DefaultTrackSelector: com.google.android.exoplayer2.trackselection.TrackSelection selectTextTrack(com.google.android.exoplayer2.source.TrackGroupArray,int[][],java.lang.String,java.lang.String,boolean)>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionManagerCompat: org.whispersystems.libsignal.util.guava.Optional getActiveSubscriptionInfo(int)>
<java.lang.Enum$1: java.lang.Object[] create(java.lang.Class)>
<java.nio.channels.FileLock: boolean overlaps(long,long)>
<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>
<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>
<android.app.Fragment$1: android.view.View onFindViewById(int)>
<android.icu.text.Transliterator: int transliterate(android.icu.text.Replaceable,int,int)>
<android.icu.text.Transliterator: void transliterate(android.icu.text.Replaceable)>
<android.icu.text.Transliterator: java.lang.String transliterate(java.lang.String)>
<android.text.format.Time$TimeCalculator: long toMillis(boolean)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.widget.RelativeLayout: void setGravity(int)>
<android.text.format.Time$TimeCalculator: void setTimeInMillis(long)>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void onReportFullscreenMode(boolean,boolean)>
<com.bumptech.glide.load.engine.executor.GlideExecutor$1: boolean accept(java.io.File,java.lang.String)>
<android.view.InputEventConsistencyVerifier: void onGenericMotionEvent(android.view.MotionEvent,int)>
<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>
<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>
<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>
<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>
<java.util.concurrent.SynchronousQueue$TransferQueue: java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.lang.Object,boolean,long)>
<android.icu.text.Transliterator: void filteredTransliterate(android.icu.text.Replaceable,android.icu.text.Transliterator$Position,boolean)>
<android.text.format.Time$TimeCalculator: void copyFieldsToTime(android.text.format.Time)>
<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>
<android.icu.text.Transliterator: void setMaximumContextLength(int)>
<android.icu.text.Transliterator: void setID(java.lang.String)>
<android.text.format.Time$TimeCalculator: void copyFieldsFromTime(android.text.format.Time)>
<libcore.util.BasicLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.concurrent.SynchronousQueue$TransferQueue: void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>
<libcore.util.BasicLruCache: void entryEvicted(java.lang.Object,java.lang.Object)>
<android.icu.text.Transliterator: void setFilter(android.icu.text.UnicodeFilter)>
<android.text.method.BaseMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<com.nineoldandroids.animation.Animator: void addListener(com.nineoldandroids.animation.Animator$AnimatorListener)>
<android.text.method.BaseMovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<org.thoughtcrime.securesms.components.InputPanel$SlideToCancel: void display(float)>
<org.thoughtcrime.securesms.components.InputPanel$SlideToCancel: org.thoughtcrime.securesms.util.concurrent.ListenableFuture hide(float)>
<android.text.method.BaseMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<org.thoughtcrime.securesms.components.InputPanel$SlideToCancel: void moveTo(float)>
<android.text.method.BaseMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<com.nineoldandroids.animation.Animator: void removeListener(com.nineoldandroids.animation.Animator$AnimatorListener)>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<java.util.Collections$SetFromMap: boolean contains(java.lang.Object)>
<java.util.Collections$SetFromMap: boolean remove(java.lang.Object)>
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>
<android.media.MediaCodec: void setOutputSurface(android.view.Surface)>
<android.media.MediaCodec: int dequeueInputBuffer(long)>
<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>
<android.text.method.BaseMovementMethod: boolean scrollLeft(android.widget.TextView,android.text.Spannable,int)>
<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>
<android.text.method.BaseMovementMethod: boolean scrollRight(android.widget.TextView,android.text.Spannable,int)>
<android.media.MediaCodec: void releaseOutputBuffer(int,long)>
<android.text.method.BaseMovementMethod: boolean scrollUp(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.BaseMovementMethod: boolean scrollDown(android.widget.TextView,android.text.Spannable,int)>
<android.text.style.SuggestionRangeSpan: void setBackgroundColor(int)>
<android.text.method.BaseMovementMethod: boolean scrollPageUp(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean scrollPageDown(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean scrollTop(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean scrollBottom(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean scrollLineStart(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean scrollLineEnd(android.widget.TextView,android.text.Spannable)>
<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>
<java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
<android.media.MediaCodec: void setVideoScalingMode(int)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>
<android.media.MediaCodec: void setOnFrameRenderedListener(android.media.MediaCodec$OnFrameRenderedListener,android.os.Handler)>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<android.widget.EdgeEffect: void setSize(int,int)>
<org.whispersystems.libsignal.util.ByteArrayComparator: int compare(byte[],byte[])>
<android.widget.EdgeEffect: void onPull(float)>
<android.widget.EdgeEffect: void onPull(float,float)>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.widget.EdgeEffect: void onAbsorb(int)>
<android.icu.impl.Trie: int getRawOffset(int,char)>
<android.icu.impl.Trie: int getBMPOffset(char)>
<android.icu.impl.Trie: int getLeadOffset(char)>
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)>
<android.icu.impl.Trie: int getCodePointOffset(int)>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
<com.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)>
<org.thoughtcrime.securesms.preferences.widgets.ColorPickerPreferenceDialogFragmentCompat: void onColorSelected(int)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: void offset(float,float)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: boolean contains(float,float)>
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<sun.security.util.DerInputBuffer: byte[] getSlice(int,int)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<sun.security.util.DerInputBuffer: boolean equals(sun.security.util.DerInputBuffer)>
<android.support.v7.widget.RecyclerView$Adapter: void bindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<android.support.v7.preference.PreferenceInflater: android.support.v7.preference.Preference inflate(int,android.support.v7.preference.PreferenceGroup)>
<android.support.v7.widget.RecyclerView$Adapter: android.support.v7.widget.RecyclerView$ViewHolder createViewHolder(android.view.ViewGroup,int)>
<android.graphics.RectF: void union(float,float,float,float)>
<android.support.v7.preference.PreferenceInflater: android.support.v7.preference.Preference inflate(org.xmlpull.v1.XmlPullParser,android.support.v7.preference.PreferenceGroup)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemChanged(int,java.lang.Object)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemInserted(int)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemMoved(int,int)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemRangeChanged(int,int,java.lang.Object)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemRangeInserted(int,int)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemRangeRemoved(int,int)>
<android.support.v7.widget.RecyclerView$Adapter: void notifyItemRemoved(int)>
<android.support.v7.widget.RecyclerView$Adapter: void onAttachedToRecyclerView(android.support.v7.widget.RecyclerView)>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.support.v7.widget.RecyclerView$Adapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int,java.util.List)>
<android.support.v7.widget.RecyclerView$Adapter: void onDetachedFromRecyclerView(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.RecyclerView$Adapter: boolean onFailedToRecycleView(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView$Adapter: void onViewAttachedToWindow(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView$Adapter: void onViewDetachedFromWindow(android.support.v7.widget.RecyclerView$ViewHolder)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder: com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder withDuration(long)>
<android.support.v7.widget.RecyclerView$Adapter: void registerAdapterDataObserver(android.support.v7.widget.RecyclerView$AdapterDataObserver)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder: com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder withEasing(int)>
<android.support.v7.widget.RecyclerView$Adapter: void setHasStableIds(boolean)>
<android.support.v7.widget.RecyclerView$Adapter: void unregisterAdapterDataObserver(android.support.v7.widget.RecyclerView$AdapterDataObserver)>
<com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer: com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer withResolved(com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder: com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder withInterruptible(boolean)>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<android.support.v7.preference.PreferenceInflater: void setDefaultPackages(java.lang.String[])>
<android.widget.TextView: void setTextAppearance(int)>
<android.widget.TextView: void setTextSize(float)>
<android.widget.TextView: void setTextScaleX(float)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface)>
<android.widget.TextView: void setElegantTextHeight(boolean)>
<com.doomonafireball.betterpickers.calendardatepicker.MonthAdapter$CalendarDay: void setDay(int,int,int)>
<android.widget.TextView: void setLetterSpacing(float)>
<android.widget.AbsListView: boolean isItemChecked(int)>
<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>
<android.widget.TextView: void setTextColor(int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.AbsListView: void setItemChecked(int,boolean)>
<android.widget.TextView: void setHighlightColor(int)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry append(java.lang.Class,com.bumptech.glide.load.Encoder)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry append(java.lang.Class,com.bumptech.glide.load.ResourceEncoder)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry append(java.lang.Class,java.lang.Class,com.bumptech.glide.load.ResourceDecoder)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry append(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>
<android.widget.TextView: void setAutoLinkMask(int)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry append(java.lang.String,java.lang.Class,java.lang.Class,com.bumptech.glide.load.ResourceDecoder)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setGravity(int)>
<dagger.internal.LazyBinding: void injectMembers(dagger.Lazy)>
<android.graphics.Point: void set(int,int)>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)>
<android.widget.TextView: void setHorizontallyScrolling(boolean)>
<com.fasterxml.jackson.core.json.JsonGeneratorImpl: com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)>
<android.widget.TextView: void setMinLines(int)>
<android.widget.TextView: void setMinHeight(int)>
<android.widget.TextView: void setMaxLines(int)>
<com.nineoldandroids.animation.PreHoneycombCompat$1: java.lang.Float get(android.view.View)>
<android.widget.TextView: void setMaxHeight(int)>
<com.nineoldandroids.animation.PreHoneycombCompat$1: void setValue(android.view.View,float)>
<android.widget.TextView: void setLines(int)>
<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)>
<android.widget.TextView: void setHeight(int)>
<android.widget.AbsListView: void setChoiceMode(int)>
<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>
<android.widget.TextView: void setMinEms(int)>
<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<android.widget.TextView: void setMinWidth(int)>
<android.widget.TextView: void setMaxEms(int)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry register(com.bumptech.glide.load.ImageHeaderParser)>
<android.widget.TextView: void setMaxWidth(int)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry register(com.bumptech.glide.load.data.DataRewinder$Factory)>
<android.widget.AbsListView: void setFastScrollEnabled(boolean)>
<android.widget.TextView: void setEms(int)>
<android.widget.TextView: void setWidth(int)>
<org.thoughtcrime.securesms.components.identity.UnverifiedSendDialog$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>
<android.widget.AbsListView: void setFastScrollStyle(int)>
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>
<com.bumptech.glide.Registry: com.bumptech.glide.Registry setResourceDecoderBucketPriorityList(java.util.List)>
<org.thoughtcrime.securesms.components.identity.UnverifiedSendDialog$1: void onPostExecute(java.lang.Void)>
<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<org.thoughtcrime.securesms.ImportExportFragment$ImportPlaintextBackupTask: java.lang.Integer doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.ImportExportFragment$ImportPlaintextBackupTask: void onPostExecute(java.lang.Integer)>
<android.widget.TextView: void removeMisspelledSpans(android.text.Spannable)>
<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>
<android.widget.AbsListView: void setTextFilterEnabled(boolean)>
<android.support.v7.preference.PreferenceFragmentCompat$DividerDecoration: void setAllowDividerAfterLastItem(boolean)>
<android.widget.AbsListView: void setStackFromBottom(boolean)>
<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>
<android.support.v7.preference.PreferenceFragmentCompat$DividerDecoration: void setDivider(android.graphics.drawable.Drawable)>
<android.support.v7.preference.PreferenceFragmentCompat$DividerDecoration: void setDividerHeight(int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<org.ccil.cowan.tagsoup.HTMLScanner: void resetDocumentLocator(java.lang.String,java.lang.String)>
<android.widget.AbsListView: void setFilterText(java.lang.String)>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: com.fasterxml.jackson.databind.ser.impl.WritableObjectId findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator)>
<com.google.protobuf.DescriptorProtos$MethodOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setText(int)>
<android.widget.TextView: void setHint(java.lang.CharSequence)>
<android.widget.TextView: java.lang.CharSequence removeSuggestionSpans(java.lang.CharSequence)>
<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.widget.TextView: void setInputType(int)>
<org.thoughtcrime.securesms.ConversationActivity$AttachmentTypeListener: void onClick(int)>
<android.widget.TextView: void setRawInputType(int)>
<org.greenrobot.eventbus.AsyncPoster: void enqueue(org.greenrobot.eventbus.Subscription,java.lang.Object)>
<android.widget.AbsListView: android.view.View getAccessibilityFocusedChild(android.view.View)>
<com.android.internal.widget.FloatingToolbar: com.android.internal.widget.FloatingToolbar setMenu(android.view.Menu)>
<com.android.internal.widget.FloatingToolbar: com.android.internal.widget.FloatingToolbar setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>
<com.android.internal.widget.FloatingToolbar: com.android.internal.widget.FloatingToolbar setContentRect(android.graphics.Rect)>
<android.widget.TextView: void setImeOptions(int)>
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<android.widget.TextView: void onEditorAction(int)>
<org.thoughtcrime.securesms.notifications.AbstractNotificationBuilder: java.lang.CharSequence getStyledMessage(org.thoughtcrime.securesms.recipients.Recipient,java.lang.CharSequence)>
<android.support.v7.app.AlertController$AlertParams: void apply(android.support.v7.app.AlertController)>
<org.thoughtcrime.securesms.notifications.AbstractNotificationBuilder: void setAlarms(android.net.Uri,org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState)>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<org.thoughtcrime.securesms.notifications.AbstractNotificationBuilder: void setTicker(org.thoughtcrime.securesms.recipients.Recipient,java.lang.CharSequence)>
<android.widget.AbsListView: void positionSelectorLikeTouch(int,android.view.View,float,float)>
<android.widget.AbsListView: void positionSelectorLikeFocus(int,android.view.View)>
<android.widget.AbsListView: void positionSelector(int,android.view.View)>
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<org.thoughtcrime.securesms.preferences.BlockedContactListItem: void lambda$onModified$0$BlockedContactListItem(org.thoughtcrime.securesms.components.AvatarImageView,org.thoughtcrime.securesms.recipients.Recipient,android.widget.TextView)>
<android.widget.TextView: int getVerticalOffset(boolean)>
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection$DecreasingBandwidthComparator: int compare(com.google.android.exoplayer2.Format,com.google.android.exoplayer2.Format)>
<com.google.android.mms.pdu_alt.NotificationInd: void setContentLocation(byte[])>
<android.graphics.drawable.VectorDrawable$VGroup$3: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.widget.TextView: void invalidateRegion(int,int,boolean)>
<android.graphics.drawable.VectorDrawable$VGroup$3: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)>
<android.widget.AbsListView: boolean performLongPress(android.view.View,int,long)>
<android.widget.AbsListView: boolean performLongPress(android.view.View,int,long,float,float)>
<libcore.internal.StringPool: java.lang.String get(char[],int,int)>
<android.widget.TextView: void setTextIsSelectable(boolean)>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.support.v7.widget.helper.ItemTouchHelper$SimpleCallback: int getDragDirs(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$SimpleCallback: int getMovementFlags(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.widget.Editor: void restoreInstanceState(android.os.ParcelableParcel)>
<android.support.v7.widget.RecyclerView$6: void dispatchUpdate(android.support.v7.widget.AdapterHelper$UpdateOp)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
<android.widget.Editor: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.support.v7.widget.RecyclerView$6: android.support.v7.widget.RecyclerView$ViewHolder findViewHolder(int)>
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<android.support.v7.widget.RecyclerView$6: void markViewHoldersUpdated(int,int,java.lang.Object)>
<android.support.v7.widget.RecyclerView$6: void offsetPositionsForAdd(int,int)>
<android.support.v7.widget.RecyclerView$6: void offsetPositionsForMove(int,int)>
<android.support.v7.widget.RecyclerView$6: void offsetPositionsForRemovingInvisible(int,int)>
<android.support.v7.widget.RecyclerView$6: void offsetPositionsForRemovingLaidOutOrNewView(int,int)>
<java.text.DateFormatSymbols: int getZoneIndex(java.lang.String)>
<android.support.v7.widget.RecyclerView$6: void onDispatchFirstPass(android.support.v7.widget.AdapterHelper$UpdateOp)>
<android.support.v7.widget.RecyclerView$6: void onDispatchSecondPass(android.support.v7.widget.AdapterHelper$UpdateOp)>
<android.widget.Editor: void onScreenStateChanged(int)>
<android.widget.Editor: void adjustInputType(boolean,boolean,boolean,boolean)>
<android.graphics.drawable.LayerDrawable$LayerState: void setDensity(int)>
<android.widget.TextView: boolean handleBackInTextActionModeIfNeeded(android.view.KeyEvent)>
<android.support.design.widget.StateListAnimator: void addState(int[],android.animation.ValueAnimator)>
<android.support.design.widget.StateListAnimator: void setState(int[])>
<android.support.v4.widget.ListViewAutoScrollHelper: boolean canTargetScrollHorizontally(int)>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void setRampDownDuration(int)>
<android.support.v4.widget.ListViewAutoScrollHelper: boolean canTargetScrollVertically(int)>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void setRampUpDuration(int)>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void setTargetVelocity(float,float)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getMonths(int,int)>
<android.support.v4.widget.ListViewAutoScrollHelper: void scrollTargetBy(int,int)>
<android.icu.text.DateFormatSymbols: java.lang.String[] getWeekdays(int,int)>
<com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil: void handleEndOfStream(long)>
<android.widget.Editor: void onFocusChanged(boolean,int)>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder: com.google.protobuf.DescriptorProtos$SourceCodeInfo$Builder mergeFrom(com.google.protobuf.DescriptorProtos$SourceCodeInfo)>
<android.widget.Editor: void sendOnTextChanged(int,int)>
<android.widget.Editor: void onWindowFocusChanged(boolean)>
<android.icu.text.DateFormatSymbols: void setTimeSeparatorString(java.lang.String)>
<android.widget.Editor: void onTouchEvent(android.view.MotionEvent)>
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.widget.Editor: void finishBatchEdit(android.widget.Editor$InputMethodState)>
<android.widget.Editor: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.icu.impl.UCharacterName: java.lang.String getName(int,int)>
<android.icu.text.DateFormatSymbols: void initializeData(android.icu.util.ULocale,java.lang.String)>
<android.widget.TextView: void setExtracting(android.view.inputmethod.ExtractedTextRequest)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey)>
<android.icu.impl.UCharacterName: int getCharFromName(int,java.lang.String)>
<android.icu.text.DateFormatSymbols: void initializeData(android.icu.text.DateFormatSymbols)>
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder setBaseKey(com.google.protobuf.ByteString)>
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>
<android.icu.impl.UCharacterName: int getGroupLengths(int,char[],char[])>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder setPreKeyId(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey$Builder setSignedPreKeyId(int)>
<android.icu.impl.UCharacterName: java.lang.String getGroupName(int,int,int)>
<android.icu.text.DateFormatSymbols: void initializeData(android.icu.util.ULocale,android.icu.impl.ICUResourceBundle,java.lang.String)>
<android.widget.TextView: void makeNewLayout(int,int,android.text.BoringLayout$Metrics,android.text.BoringLayout$Metrics,int,boolean)>
<android.widget.AbsListView: void reportScrollStateChange(int)>
<android.widget.Editor: void onDraw(android.graphics.Canvas,android.text.Layout,android.graphics.Path,android.graphics.Paint,int)>
<android.icu.impl.UCharacterName: java.lang.String getExtendedName(int)>
<android.icu.impl.UCharacterName: int getGroup(int)>
<android.icu.impl.UCharacterName: java.lang.String getExtendedOr10Name(int)>
<android.widget.AbsListView: void scrollListBy(int)>
<android.widget.AbsListView: boolean canScrollList(int)>
<android.icu.impl.UCharacterName: int getGroupMSB(int)>
<android.icu.impl.UCharacterName: java.lang.String getGroupName(int,int)>
<android.widget.FastScroller$6: void setValue(android.view.View,int)>
<android.widget.FastScroller$6: java.lang.Integer get(android.view.View)>
<android.icu.impl.UCharacterName: void getCharNameCharacters(android.icu.text.UnicodeSet)>
<android.icu.impl.UCharacterName: boolean setToken(char[],byte[])>
<android.icu.impl.UCharacterName: boolean setAlgorithm(android.icu.impl.UCharacterName$AlgorithmName[])>
<android.icu.impl.UCharacterName: boolean setGroupCountSize(int,int)>
<android.widget.TextView: android.text.Layout makeSingleLayout(int,android.text.BoringLayout$Metrics,int,android.text.Layout$Alignment,boolean,android.text.TextUtils$TruncateAt,boolean)>
<android.icu.impl.UCharacterName: boolean setGroup(char[],byte[])>
<android.widget.AbsListView: int findClosestMotionRow(int)>
<com.android.internal.util.NotificationColorUtil: boolean isGrayscaleIcon(android.graphics.Bitmap)>
<com.android.internal.util.NotificationColorUtil: boolean isGrayscaleIcon(android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.components.ComposeText$CommitContentListener: boolean onCommitContent(android.support.v13.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle)>
<com.android.internal.util.NotificationColorUtil: boolean isGrayscaleIcon(android.content.Context,android.graphics.drawable.Icon)>
<android.widget.TextView: void setIncludeFontPadding(boolean)>
<com.android.internal.util.NotificationColorUtil: boolean isGrayscaleIcon(android.content.Context,int)>
<org.thoughtcrime.securesms.ConversationFragment$3: java.lang.Void doInBackground(org.thoughtcrime.securesms.database.model.MessageRecord[])>
<com.android.internal.util.NotificationColorUtil: java.lang.CharSequence invertCharSequenceColors(java.lang.CharSequence)>
<android.app.ActivityManager$TaskDescription: void copyFrom(android.app.ActivityManager$TaskDescription)>
<android.app.ActivityManager$TaskDescription: void setPrimaryColor(int)>
<android.app.ActivityManager$TaskDescription: void setBackgroundColor(int)>
<android.app.ActivityManager$TaskDescription: void setIcon(android.graphics.Bitmap)>
<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>
<android.widget.Editor: void onTouchUpEvent(android.view.MotionEvent)>
<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>
<android.widget.AbsListView: boolean sendToTextFilter(int,int,android.view.KeyEvent)>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getHttpParamMacro(android.content.Context,java.lang.String)>
<android.icu.text.DateFormatSymbols: void setLocale(android.icu.util.ULocale,android.icu.util.ULocale)>
<android.widget.Editor: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanDescription)>
<org.greenrobot.eventbus.HandlerPoster: void enqueue(org.greenrobot.eventbus.Subscription,java.lang.Object)>
<android.support.v7.widget.ActionMenuPresenter: void bindItemView(android.support.v7.view.menu.MenuItemImpl,android.support.v7.view.menu.MenuView$ItemView)>
<android.support.v7.widget.ActionMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
<android.widget.Editor: void onDrop(android.view.DragEvent)>
<android.widget.AbsListView: void setTranscriptMode(int)>
<android.graphics.FontFamily: boolean addFont(java.lang.String,int)>
<android.widget.TextView: boolean bringPointIntoView(int)>
<android.graphics.FontFamily: boolean addFontWeightStyle(java.nio.ByteBuffer,int,java.util.List,int,boolean)>
<android.graphics.FontFamily: boolean addFontFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.widget.Editor: void addSpanWatchers(android.text.Spannable)>
<android.widget.AbsListView: void setVisibleRangeHint(int,int)>
<android.widget.Editor: void setContextMenuAnchor(float,float)>
<android.widget.Editor: void onCreateContextMenu(android.view.ContextMenu)>
<android.widget.AbsListView: void setSelectionFromTop(int,int)>
<org.thoughtcrime.securesms.CountrySelectionActivity: void countrySelected(java.lang.String,int)>
<android.icu.util.BytesTrie: android.icu.util.BytesTrie$Result next(int)>
<android.support.v7.widget.ActionMenuPresenter: android.view.View getItemView(android.support.v7.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<android.support.v7.widget.ActionMenuPresenter: android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: boolean isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.lang.Class,java.util.Map)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerFactory: boolean isPotentialBeanType(java.lang.Class)>
<android.support.v7.widget.ActionMenuPresenter: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.DragAndDropPermissions: boolean take(android.os.IBinder)>
<android.widget.TextView: void setAllCaps(boolean)>
<android.widget.TextView: void setSingleLine(boolean)>
<android.support.v7.widget.ActionMenuPresenter: void setExpandedActionViewsExclusive(boolean)>
<android.widget.TextView: void setMarqueeRepeatLimit(int)>
<android.support.v7.widget.ActionMenuPresenter: void setMenuView(android.support.v7.widget.ActionMenuView)>
<android.support.v7.widget.ActionMenuPresenter: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.support.v7.widget.ActionMenuPresenter: void setReserveOverflow(boolean)>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.support.v7.widget.ActionMenuPresenter: boolean shouldIncludeItem(int,android.support.v7.view.menu.MenuItemImpl)>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.view.View$2: void setValue(android.view.View,float)>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.view.View$2: java.lang.Float get(android.view.View)>
<android.animation.AnimationHandler$MyFrameCallbackProvider: void postFrameCallback(android.view.Choreographer$FrameCallback)>
<android.animation.AnimationHandler$MyFrameCallbackProvider: void postCommitCallback(java.lang.Runnable)>
<android.widget.TextView: void removeAdjacentSuggestionSpans(int)>
<android.widget.TextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)>
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>
<android.widget.TextView: void sendAfterTextChanged(android.text.Editable)>
<android.view.WindowManager$LayoutParams: void setSurfaceInsets(android.view.View,boolean,boolean)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>
<java.nio.ByteBufferAsFloatBuffer: int ix(int)>
<java.nio.ByteBufferAsFloatBuffer: java.nio.FloatBuffer put(float[],int,int)>
<android.support.v7.widget.StaggeredGridLayoutManager$Span: void onOffset(int)>
<android.support.v7.util.BatchingListUpdateCallback: void onChanged(int,int,java.lang.Object)>
<android.support.v7.util.BatchingListUpdateCallback: void onInserted(int,int)>
<android.support.v7.util.BatchingListUpdateCallback: void onMoved(int,int)>
<android.support.v7.util.BatchingListUpdateCallback: void onRemoved(int,int)>
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>
<android.content.res.Resources: void setImpl(android.content.res.ResourcesImpl)>
<android.icu.impl.TimeZoneGenericNames: java.lang.String getDisplayName(android.icu.util.TimeZone,android.icu.impl.TimeZoneGenericNames$GenericNameType,long)>
<android.icu.impl.TimeZoneGenericNames: java.lang.String getGenericLocationName(java.lang.String)>
<android.content.res.Resources: android.content.res.ComplexColor loadComplexColor(android.util.TypedValue,int,android.content.res.Resources$Theme)>
<java.nio.ByteBufferAsCharBuffer: int ix(int)>
<com.fasterxml.jackson.databind.util.EnumValues: com.fasterxml.jackson.core.SerializableString serializedValueFor(java.lang.Enum)>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>
<android.graphics.drawable.AnimatedVectorDrawable$AnimatedVectorDrawableState$PendingAnimator: android.animation.Animator newInstance(android.content.res.Resources,android.content.res.Resources$Theme)>
<android.support.v7.widget.AppCompatPopupWindow: void setSupportOverlapAnchor(boolean)>
<android.support.v7.widget.AppCompatPopupWindow: void showAsDropDown(android.view.View,int,int)>
<android.support.v7.widget.AppCompatPopupWindow: void update(android.view.View,int,int,int,int)>
<android.util.PrintWriterPrinter: void println(java.lang.String)>
<android.widget.TextView: boolean onTextContextMenuItem(int)>
<android.widget.TextView: java.lang.CharSequence getTransformedText(int,int)>
<android.icu.text.DateTimePatternGenerator$FormatParser: android.icu.text.DateTimePatternGenerator$FormatParser set(java.lang.String)>
<android.icu.text.DateTimePatternGenerator$FormatParser: android.icu.text.DateTimePatternGenerator$FormatParser set(java.lang.String,boolean)>
<android.widget.TextView: void replaceSelectionWithText(java.lang.CharSequence)>
<android.widget.TextView: int getOffsetForPosition(float,float)>
<android.widget.TextView: float convertToLocalHorizontalCoordinate(float)>
<android.widget.TextView: int getLineAtCoordinate(float)>
<android.icu.text.DateTimePatternGenerator$FormatParser: java.lang.Object quoteLiteral(java.lang.String)>
<android.widget.TextView: int getLineAtCoordinateUnclamped(float)>
<android.widget.TextView: int getOffsetAtCoordinate(int,float)>
<android.widget.TextView: void viewClicked(android.view.inputmethod.InputMethodManager)>
<android.widget.TextView: void deleteText_internal(int,int)>
<android.widget.TextView: void replaceText_internal(int,int,java.lang.CharSequence)>
<android.widget.TextView: void setSpan_internal(java.lang.Object,int,int,int)>
<android.widget.TextView: void setCursorPosition_internal(int,int)>
<android.icu.text.TransliterationRuleSet: void addRule(android.icu.text.TransliterationRule)>
<android.widget.Editor$ProcessTextIntentActionsHandler: void onInitializeMenu(android.view.Menu)>
<android.widget.Editor$ProcessTextIntentActionsHandler: boolean performMenuItemAction(android.view.MenuItem)>
<android.widget.Editor$ProcessTextIntentActionsHandler: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.icu.text.TransliterationRuleSet: boolean transliterate(android.icu.text.Replaceable,android.icu.text.Transliterator$Position,boolean)>
<android.support.v4.graphics.drawable.DrawableWrapperApi14: android.graphics.drawable.Drawable newDrawableFromState(android.graphics.drawable.Drawable$ConstantState,android.content.res.Resources)>
<java.util.RegularEnumSet: boolean add(java.lang.Enum)>
<com.makeramen.roundedimageview.RoundedImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.makeramen.roundedimageview.RoundedImageView: void setBorderColor(android.content.res.ColorStateList)>
<android.support.v4.graphics.drawable.DrawableWrapperApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)>
<com.makeramen.roundedimageview.RoundedImageView: void setBorderWidth(float)>
<com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl: java.lang.Object getAttribute(java.lang.Object)>
<com.makeramen.roundedimageview.RoundedImageView: void setCornerRadius(float,float,float,float)>
<com.makeramen.roundedimageview.RoundedImageView: void setCornerRadius(int,float)>
<org.ccil.cowan.tagsoup.Element: void setNext(org.ccil.cowan.tagsoup.Element)>
<android.content.ComponentName: int compareTo(android.content.ComponentName)>
<org.ccil.cowan.tagsoup.Element: boolean canContain(org.ccil.cowan.tagsoup.Element)>
<org.ccil.cowan.tagsoup.Element: void setAttribute(java.lang.String,java.lang.String,java.lang.String)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: void setByteOrder(java.nio.ByteOrder)>
<android.support.graphics.drawable.VectorDrawableCompat: java.lang.Object getTargetByName(java.lang.String)>
<android.graphics.drawable.VectorDrawable$VGroup$5: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.graphics.drawable.VectorDrawable$VGroup$5: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: long skip(long)>
<android.widget.SpellChecker$SpellParser: void parse(int,int)>
<sun.security.x509.X500Name: boolean equals(java.lang.Object)>
<android.support.graphics.drawable.VectorDrawableCompat: void setAllowCaching(boolean)>
<org.ccil.cowan.tagsoup.Parser$1: java.io.Reader autoDetectingReader(java.io.InputStream)>
<android.support.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>
<org.thoughtcrime.securesms.CreateProfileActivity$5: void onSuccess(byte[])>
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)>
<android.support.v7.widget.ViewBoundsCheck$BoundFlags: void addFlags(int)>
<android.support.v7.widget.ViewBoundsCheck$BoundFlags: int compare(int,int)>
<android.support.v7.widget.ViewBoundsCheck$BoundFlags: void setBounds(int,int,int,int)>
<android.icu.impl.CalendarCache: long get(long)>
<android.icu.impl.CalendarCache: void put(long,long)>
<org.thoughtcrime.securesms.scribbles.widget.ScribbleView$1: android.graphics.Bitmap doInBackground(java.lang.Void[])>
<android.support.v7.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.scribbles.widget.ScribbleView$1: void onPostExecute(android.graphics.Bitmap)>
<org.thoughtcrime.securesms.components.FromTextView: void setText(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.components.FromTextView: void setText(org.thoughtcrime.securesms.recipients.Recipient,boolean)>
<android.support.v7.widget.ActionBarContainer: void setTabContainer(android.support.v7.widget.ScrollingTabContainerView)>
<android.support.v7.widget.ActionBarContainer: void setTransitioning(boolean)>
<com.google.android.exoplayer2.upstream.Loader$LoadTask: void cancel(boolean)>
<org.webrtc.SurfaceTextureHelper: org.webrtc.VideoFrame$TextureBuffer createTextureBuffer(int,int,android.graphics.Matrix)>
<org.webrtc.SurfaceTextureHelper: void lambda$new$0$SurfaceTextureHelper(android.graphics.SurfaceTexture)>
<org.webrtc.SurfaceTextureHelper: void startListening(org.webrtc.SurfaceTextureHelper$OnTextureFrameAvailableListener)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity$1: android.graphics.Bitmap doInBackground(java.lang.Void[])>
<com.google.android.exoplayer2.upstream.Loader$LoadTask: void start(long)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity$1: void onPostExecute(android.graphics.Bitmap)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setBorderColor(android.content.res.ColorStateList)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setBorderWidth(float)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setCornerRadius(float,float,float,float)>
<com.bumptech.glide.load.engine.Engine: void onResourceRemoved(com.bumptech.glide.load.engine.Resource)>
<org.thoughtcrime.securesms.crypto.MasterCipher: java.lang.String encryptBody(java.lang.String)>
<org.thoughtcrime.securesms.crypto.MasterCipher: byte[] encryptBytes(byte[])>
<org.thoughtcrime.securesms.crypto.MasterCipher: byte[] encryptKey(org.whispersystems.libsignal.ecc.ECPrivateKey)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setOval(boolean)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setScaleType(android.widget.ImageView$ScaleType)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setTileModeX(android.graphics.Shader$TileMode)>
<android.support.v7.view.menu.MenuPopupHelper: void setAnchorView(android.view.View)>
<com.makeramen.roundedimageview.RoundedDrawable: com.makeramen.roundedimageview.RoundedDrawable setTileModeY(android.graphics.Shader$TileMode)>
<android.support.v7.view.menu.MenuPopupHelper: void setForceShowIcon(boolean)>
<android.support.v7.view.menu.MenuPopupHelper: void setGravity(int)>
<android.support.v7.view.menu.MenuPopupHelper: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.support.v7.view.menu.MenuPopupHelper: void setPresenterCallback(android.support.v7.view.menu.MenuPresenter$Callback)>
<android.support.v7.widget.LinearLayoutManager$SavedState$1: android.support.v7.widget.LinearLayoutManager$SavedState createFromParcel(android.os.Parcel)>
<android.support.v7.widget.LinearLayoutManager$SavedState$1: android.support.v7.widget.LinearLayoutManager$SavedState[] newArray(int)>
<android.support.v7.view.menu.MenuPopupHelper: boolean tryShow(int,int)>
<com.fasterxml.jackson.databind.ser.std.MapProperty: void reset(java.lang.Object,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<android.support.v4.util.LruCache: java.lang.Object create(java.lang.Object)>
<android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
<android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)>
<android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.support.v4.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder mergeFrom(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder setId(long)>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<android.support.v4.util.LruCache: void trimToSize(int)>
<android.view.SurfaceView$4: void addCallback(android.view.SurfaceHolder$Callback)>
<android.view.SurfaceView$4: void removeCallback(android.view.SurfaceHolder$Callback)>
<android.view.SurfaceView$4: void setFixedSize(int,int)>
<java.util.EnumSet: void typeCheck(java.lang.Enum)>
<android.view.SurfaceView$4: void setType(int)>
<android.view.SurfaceView$4: void setKeepScreenOn(boolean)>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void setRampUpDuration(int)>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void setRampDownDuration(int)>
<android.content.UndoManager: android.content.UndoOwner getOwner(java.lang.String,java.lang.Object)>
<android.content.UndoManager: void removeOwner(android.content.UndoOwner)>
<android.content.UndoManager: void saveInstanceState(android.os.Parcel)>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void setTargetVelocity(float,float)>
<android.content.UndoManager: void saveOwner(android.content.UndoOwner,android.os.Parcel)>
<android.content.UndoManager: void restoreInstanceState(android.os.Parcel,java.lang.ClassLoader)>
<android.content.UndoManager: android.content.UndoOwner restoreOwner(android.os.Parcel)>
<com.google.android.mms.util_alt.AbstractCache: java.lang.Object get(java.lang.Object)>
<android.content.UndoManager: int undo(android.content.UndoOwner[],int)>
<android.view.KeyboardShortcutGroup: void addItem(android.view.KeyboardShortcutInfo)>
<android.content.UndoManager: int redo(android.content.UndoOwner[],int)>
<android.content.UndoManager: int forgetUndos(android.content.UndoOwner[],int)>
<android.content.UndoManager: int forgetRedos(android.content.UndoOwner[],int)>
<android.content.UndoManager: int countUndos(android.content.UndoOwner[])>
<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>
<android.content.UndoManager: int countRedos(android.content.UndoOwner[])>
<com.android.mms.service_alt.MmsRequest: void execute(android.content.Context,com.android.mms.service_alt.MmsNetworkManager)>
<org.thoughtcrime.securesms.TransportOptionsAdapter: void setEnabledTransports(java.util.List)>
<android.content.UndoManager: void beginUpdate(java.lang.CharSequence)>
<android.content.UndoManager: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner,int)>
<android.content.UndoManager: void addOperation(android.content.UndoOperation,int)>
<android.content.UndoManager: int commitState(android.content.UndoOwner)>
<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>
<android.support.v4.widget.ViewDragHelper: void captureChildView(android.view.View,int)>
<android.content.UndoManager: boolean matchOwners(android.content.UndoManager$UndoState,android.content.UndoOwner[])>
<com.android.mms.service_alt.MmsRequest: void processResult(android.content.Context,int,byte[],int)>
<android.content.UndoManager: int findPrevState(java.util.ArrayList,android.content.UndoOwner[],int)>
<android.content.UndoManager: int findNextState(java.util.ArrayList,android.content.UndoOwner[],int)>
<android.support.v4.widget.ViewDragHelper: boolean continueSettling(boolean)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.support.v4.widget.ViewDragHelper: android.view.View findTopChildUnder(int,int)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
<android.support.v4.widget.ViewDragHelper: boolean isCapturedViewUnder(int,int)>
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.support.v4.widget.ViewDragHelper: boolean isPointerDown(int)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>
<android.support.v4.widget.ViewDragHelper: boolean isViewUnder(android.view.View,int,int)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>
<android.support.v4.widget.ViewDragHelper: void processTouchEvent(android.view.MotionEvent)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<org.thoughtcrime.securesms.giph.net.GiphyProxySelector$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.io.IOContext _createContext(java.lang.Object,boolean)>
<org.thoughtcrime.securesms.ExpirationDialog$2: void onValueChange(cn.carbswang.android.numberpickerview.library.NumberPickerView,int,int)>
<org.ccil.cowan.tagsoup.Parser: void setContentHandler(org.xml.sax.ContentHandler)>
<android.support.v4.widget.ViewDragHelper: void setDragState(int)>
<android.support.v4.widget.ViewDragHelper: boolean settleCapturedViewAt(int,int)>
<android.support.v4.widget.ViewDragHelper: boolean shouldInterceptTouchEvent(android.view.MotionEvent)>
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext reset(int)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)>
<com.fasterxml.jackson.core.json.JsonWriteContext: void setCurrentValue(java.lang.Object)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext withDupDetector(com.fasterxml.jackson.core.json.DupDetector)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList,float,float)>
<android.graphics.drawable.GradientDrawable: void setShape(int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,byte[])>
<android.view.View$MatchLabelForPredicate: boolean test(android.view.View)>
<android.support.v4.widget.ViewDragHelper: boolean tryCaptureViewForDrag(android.view.View,int)>
<com.bumptech.glide.RequestManager$RequestManagerConnectivityListener: void onConnectivityChanged(boolean)>
<android.graphics.drawable.GradientDrawable: void setColor(int)>
<android.graphics.drawable.GradientDrawable: void setColor(android.content.res.ColorStateList)>
<org.thoughtcrime.securesms.BlockedContactsActivity$BlockedContactsFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: com.fasterxml.jackson.databind.deser.SettableBeanProperty find(java.lang.String)>
<org.thoughtcrime.securesms.database.MessagingDatabase: void removeMismatchedIdentity(long,org.thoughtcrime.securesms.database.Address,org.whispersystems.libsignal.IdentityKey)>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonFactory setCodec(com.fasterxml.jackson.core.ObjectCodec)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: void remove(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap renameAll(com.fasterxml.jackson.databind.util.NameTransformer)>
<android.util.LruCache: void resize(int)>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: void replace(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.util.LruCache: void trimToSize(int)>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap withProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.util.LruCache: java.lang.Object remove(java.lang.Object)>
<android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
<android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>
<android.util.LruCache: java.lang.Object create(java.lang.Object)>
<android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)>
<android.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer$AudioTrackListener: void onAudioSessionId(int)>
<org.thoughtcrime.securesms.crypto.storage.TextSecurePreKeyStore: void storePreKey(int,org.whispersystems.libsignal.state.PreKeyRecord)>
<org.thoughtcrime.securesms.database.model.MessageRecord: android.text.SpannableString emphasisAdded(java.lang.String)>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer$AudioTrackListener: void onUnderrun(int,long,long)>
<org.thoughtcrime.securesms.InviteActivity$SendSmsInvitesAsyncTask$1: void onSuccess(java.lang.Boolean)>
<org.thoughtcrime.securesms.crypto.storage.TextSecurePreKeyStore: void storeSignedPreKey(int,org.whispersystems.libsignal.state.SignedPreKeyRecord)>
<android.support.v7.widget.AppCompatDrawableManager: void onConfigurationChanged(android.content.Context)>
<android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,android.support.v7.widget.VectorEnabledTintResources,int)>
<android.support.v7.view.WindowCallbackWrapper: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.support.v7.view.WindowCallbackWrapper: boolean onMenuOpened(int,android.view.Menu)>
<android.support.v7.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>
<org.thoughtcrime.securesms.components.RecyclerViewFastScroller: void setRecyclerView(android.support.v7.widget.RecyclerView)>
<com.google.android.exoplayer2.text.SubtitleDecoderFactory$1: com.google.android.exoplayer2.text.SubtitleDecoder createDecoder(com.google.android.exoplayer2.Format)>
<android.database.CursorWindow: void setStartPosition(int)>
<android.database.CursorWindow: int getType(int,int)>
<android.database.CursorWindow: byte[] getBlob(int,int)>
<com.google.android.exoplayer2.text.SubtitleDecoderFactory$1: boolean supportsFormat(com.google.android.exoplayer2.Format)>
<org.thoughtcrime.securesms.ConversationActivity$18: android.util.Pair doInBackground(org.thoughtcrime.securesms.recipients.Recipient[])>
<android.database.CursorWindow: java.lang.String getString(int,int)>
<libcore.util.ZoneInfo$WallTime: void localtime(int,libcore.util.ZoneInfo)>
<android.database.CursorWindow: long getLong(int,int)>
<libcore.util.ZoneInfo$WallTime: int mktime(libcore.util.ZoneInfo)>
<android.database.CursorWindow: int getInt(int,int)>
<org.thoughtcrime.securesms.ConversationActivity$18: void onPostExecute(android.util.Pair)>
<android.animation.PropertyValuesHolder$1: java.lang.Object getValueAtFraction(float)>
<java.util.Scanner$1: java.util.regex.Pattern create(java.lang.String)>
<java.util.Scanner$1: boolean hasName(java.util.regex.Pattern,java.lang.String)>
<java.util.Scanner$1: boolean hasName(java.lang.Object,java.lang.Object)>
<java.util.Scanner$1: java.lang.Object create(java.lang.Object)>
<android.icu.text.NumberingSystem$2: android.icu.text.NumberingSystem createInstance(java.lang.String,java.lang.Void)>
<sun.net.DefaultProgressMeteringPolicy: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.Bitmap)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>
<libcore.util.ZoneInfo$WallTime: void setYear(int)>
<libcore.util.ZoneInfo$WallTime: void setMonth(int)>
<libcore.util.ZoneInfo$WallTime: void setMonthDay(int)>
<libcore.util.ZoneInfo$WallTime: void setHour(int)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)>
<java.util.zip.Deflater: void setInput(byte[],int,int)>
<libcore.util.ZoneInfo$WallTime: void setMinute(int)>
<libcore.util.ZoneInfo$WallTime: void setSecond(int)>
<libcore.util.ZoneInfo$WallTime: void setWeekDay(int)>
<libcore.util.ZoneInfo$WallTime: void setYearDay(int)>
<libcore.util.ZoneInfo$WallTime: void setIsDst(int)>
<libcore.util.ZoneInfo$WallTime: void setGmtOffset(int)>
<java.util.zip.Deflater: int deflate(byte[],int,int)>
<java.util.zip.Deflater: int deflate(byte[],int,int,int)>
<android.text.util.Linkify$1: boolean acceptMatch(java.lang.CharSequence,int,int)>
<android.support.v4.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>
<android.support.v7.widget.helper.ItemTouchUIUtilImpl$BaseImpl: void onDrawOver(android.graphics.Canvas,android.support.v7.widget.RecyclerView,android.view.View,float,float,int,boolean)>
<android.icu.text.SimpleDateFormat: java.lang.StringBuffer format(android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)>
<android.support.v7.widget.helper.ItemTouchUIUtilImpl$BaseImpl: void onSelected(android.view.View)>
<android.support.v4.graphics.TypefaceCompatBaseImpl: android.support.v4.provider.FontsContractCompat$FontInfo findBestInfo(android.support.v4.provider.FontsContractCompat$FontInfo[],int)>
<libcore.icu.TimeZoneNames$ZoneStringsCache: java.lang.String[][] create(java.util.Locale)>
<android.icu.text.SimpleDateFormat: android.icu.text.DateFormat$Field patternCharToDateFormatField(char)>
<android.icu.text.SimpleDateFormat: java.lang.String subFormat(char,int,int,int,android.icu.text.DisplayContext,java.text.FieldPosition,android.icu.util.Calendar)>
<android.icu.text.SimpleDateFormat: void subFormat(java.lang.StringBuffer,char,int,int,int,android.icu.text.DisplayContext,java.text.FieldPosition,android.icu.util.Calendar)>
<android.util.IntArray: void add(int)>
<android.util.IntArray: void add(int,int)>
<android.util.IntArray: int get(int)>
<android.text.PackedIntVector: int getValue(int,int)>
<com.google.protobuf.DescriptorProtos$MessageOptions$Builder: com.google.protobuf.DescriptorProtos$MessageOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$MessageOptions)>
<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>
<android.text.PackedIntVector: void insertAt(int,int[])>
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>
<android.text.PackedIntVector: void deleteAt(int,int)>
<libcore.io.ForwardingOs: java.lang.String gai_strerror(int)>
<libcore.io.ForwardingOs: java.lang.String getenv(java.lang.String)>
<com.google.protobuf.DescriptorProtos$MessageOptions$Builder: com.google.protobuf.DescriptorProtos$MessageOptions$Builder setMessageSetWireFormat(boolean)>
<com.google.protobuf.DescriptorProtos$MessageOptions$Builder: com.google.protobuf.DescriptorProtos$MessageOptions$Builder setNoStandardDescriptorAccessor(boolean)>
<android.animation.AnimatorSet$Node: void addChild(android.animation.AnimatorSet$Node)>
<com.google.android.exoplayer2.audio.ChannelMappingAudioProcessor: void setChannelMap(int[])>
<android.animation.AnimatorSet$Node: void addSibling(android.animation.AnimatorSet$Node)>
<android.animation.AnimatorSet$Node: void addParent(android.animation.AnimatorSet$Node)>
<libcore.io.ForwardingOs: java.net.InetAddress inet_pton(int,java.lang.String)>
<android.animation.AnimatorSet$Node: void addParents(java.util.ArrayList)>
<android.support.v7.widget.ActionBarOverlayLayout: void onWindowSystemUiVisibilityChanged(int)>
<android.support.v7.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)>
<android.support.v7.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)>
<android.support.v7.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)>
<android.support.v7.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)>
<android.support.v7.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)>
<android.app.Notification: void setSmallIcon(android.graphics.drawable.Icon)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: int getPossibleLength(int)>
<org.thoughtcrime.securesms.util.GroupUtil$GroupDescription: void addListener(org.thoughtcrime.securesms.recipients.RecipientModifiedListener)>
<org.thoughtcrime.securesms.util.GroupUtil$GroupDescription: java.lang.String toString(org.thoughtcrime.securesms.recipients.Recipient)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setExampleNumber(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setNationalNumberPattern(java.lang.String)>
<org.thoughtcrime.securesms.webrtc.audio.BluetoothStateManager$BluetoothScoReceiver: void onReceive(android.content.Context,android.content.Intent)>
<org.whispersystems.libsignal.util.IdentityKeyComparator: int compare(org.whispersystems.libsignal.IdentityKey,org.whispersystems.libsignal.IdentityKey)>
<libcore.io.ForwardingOs: java.lang.String strerror(int)>
<libcore.io.ForwardingOs: long sysconf(int)>
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
<org.thoughtcrime.securesms.util.StickyHeaderDecoration: int getHeaderHeightForLayout(android.view.View)>
<android.support.v7.app.AppCompatDelegateImplV9: android.view.View callActivityOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.support.v7.app.AppCompatDelegateImplV9: void callOnPanelClosed(int,android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState,android.view.Menu)>
<android.support.v7.app.AppCompatDelegateImplV9: void checkCloseActionMenu(android.support.v7.view.menu.MenuBuilder)>
<com.nineoldandroids.animation.ValueAnimator: void addUpdateListener(com.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener)>
<android.support.v7.app.AppCompatDelegateImplV9: void closePanel(int)>
<android.support.v7.app.AppCompatDelegateImplV9: void closePanel(android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState,boolean)>
<com.nineoldandroids.animation.ValueAnimator: boolean animationFrame(long)>
<android.support.v7.app.AppCompatDelegateImplV9: android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: void addOrOverrideParam(int,java.lang.annotation.Annotation)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getParameter(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotationMap getParameterAnnotations(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.JavaType getType(com.fasterxml.jackson.databind.type.TypeBindings,java.lang.reflect.TypeVariable[])>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<android.support.v7.app.AppCompatDelegateImplV9: void doInvalidatePanelMenu(int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedWithParams: com.fasterxml.jackson.databind.introspect.AnnotatedParameter replaceParameterAnnotations(int,com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<android.support.v7.app.AppCompatDelegateImplV9: android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState findMenuPanel(android.view.Menu)>
<android.util.LongSparseLongArray: long get(long,long)>
<android.support.v7.app.AppCompatDelegateImplV9: android.view.View findViewById(int)>
<android.support.v7.app.AppCompatDelegateImplV9: android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState getPanelState(int,boolean)>
<android.util.LongSparseLongArray: void put(long,long)>
<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>
<android.util.LongSparseLongArray: long valueAt(int)>
<android.util.LongSparseLongArray: int indexOfKey(long)>
<android.util.LongSparseLongArray: void append(long,long)>
<android.icu.impl.locale.BaseLocale$Cache: android.icu.impl.locale.BaseLocale$Key normalizeKey(android.icu.impl.locale.BaseLocale$Key)>
<android.icu.impl.locale.BaseLocale$Cache: android.icu.impl.locale.BaseLocale createObject(android.icu.impl.locale.BaseLocale$Key)>
<com.nineoldandroids.animation.ValueAnimator: void setCurrentPlayTime(long)>
<android.icu.impl.locale.BaseLocale$Cache: java.lang.Object normalizeKey(java.lang.Object)>
<com.nineoldandroids.animation.ValueAnimator: com.nineoldandroids.animation.ValueAnimator setDuration(long)>
<android.icu.impl.locale.BaseLocale$Cache: java.lang.Object createObject(java.lang.Object)>
<com.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])>
<android.support.v7.app.AppCompatDelegateImplV9: void onConfigurationChanged(android.content.res.Configuration)>
<com.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])>
<android.icu.text.SimpleDateFormat: void zeroPaddingNumber(android.icu.text.NumberFormat,java.lang.StringBuffer,int,int,int)>
<android.icu.text.DateIntervalInfo$DateIntervalSink: void processSkeletonTable(android.icu.impl.UResource$Key,android.icu.impl.UResource$Value)>
<com.nineoldandroids.animation.ValueAnimator: void setInterpolator(android.view.animation.Interpolator)>
<org.thoughtcrime.securesms.CreateProfileActivity$1: byte[] doInBackground(java.lang.Void[])>
<android.icu.text.SimpleDateFormat: void setNumberFormat(android.icu.text.NumberFormat)>
<android.support.v7.app.AppCompatDelegateImplV9: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<org.thoughtcrime.securesms.CreateProfileActivity$1: void onPostExecute(byte[])>
<com.nineoldandroids.animation.ValueAnimator: void setValues(com.nineoldandroids.animation.PropertyValuesHolder[])>
<android.support.v7.app.AppCompatDelegateImplV9: boolean onMenuOpened(int,android.view.Menu)>
<android.support.v7.app.AppCompatDelegateImplV9: void onPanelClosed(int,android.view.Menu)>
<android.support.v7.app.AppCompatDelegateImplV9: void onSubDecorInstalled(android.view.ViewGroup)>
<android.support.v7.app.AppCompatDelegateImplV9: void onTitleChanged(java.lang.CharSequence)>
<android.support.v7.app.AppCompatDelegateImplV9: boolean requestWindowFeature(int)>
<android.support.v7.app.AppCompatDelegateImplV9: void setContentView(int)>
<android.support.v7.app.AppCompatDelegateImplV9: void setContentView(android.view.View)>
<android.support.v7.app.AppCompatDelegateImplV9: void setSupportActionBar(android.support.v7.widget.Toolbar)>
<android.support.v7.app.AppCompatDelegateImplV9: android.support.v7.view.ActionMode startSupportActionMode(android.support.v7.view.ActionMode$Callback)>
<org.thoughtcrime.securesms.mms.AttachmentManager$MediaType: org.thoughtcrime.securesms.mms.Slide createSlide(android.content.Context,android.net.Uri,java.lang.String,java.lang.String,long)>
<org.whispersystems.jobqueue.dependencies.AggregateDependencyInjector: void injectDependencies(android.content.Context,org.whispersystems.jobqueue.Job)>
<android.support.v7.app.AppCompatDelegateImplV9: android.support.v7.view.ActionMode startSupportActionModeFromWindow(android.support.v7.view.ActionMode$Callback)>
<com.google.android.gms.maps.model.zza: com.google.android.gms.maps.model.CameraPosition zzon(android.os.Parcel)>
<android.graphics.drawable.VectorDrawable$VGroup$7: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<com.google.android.gms.maps.model.zza: com.google.android.gms.maps.model.CameraPosition[] zzvs(int)>
<android.graphics.drawable.VectorDrawable$VGroup$7: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<com.nineoldandroids.animation.AnimatorSet$Builder: com.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.nineoldandroids.animation.Animator)>
<android.support.v7.app.AppCompatDelegateImplV9: int updateStatusGuard(int)>
<java.io.CharArrayWriter: void write(int)>
<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>
<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)>
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>
<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>
<android.util.LongSparseArray: java.lang.Object get(long)>
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<android.util.LongSparseArray: void delete(long)>
<android.util.LongSparseArray: void remove(long)>
<android.util.LongSparseArray: void removeAt(int)>
<android.util.LongSparseArray: void put(long,java.lang.Object)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$ColorChangeListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.util.LongSparseArray: long keyAt(int)>
<android.util.LongSparseArray: java.lang.Object valueAt(int)>
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>
<android.util.LongSparseArray: int indexOfKey(long)>
<java.util.logging.LogManager: boolean getBooleanProperty(java.lang.String,boolean)>
<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>
<android.media.Cea708CCWidget$CCView: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle)>
<org.thoughtcrime.securesms.GroupCreateActivity$UpdateSignalGroupTask: org.whispersystems.libsignal.util.guava.Optional doInBackground(java.lang.Void[])>
<android.support.v7.widget.AdapterHelper: int applyPendingUpdatesToPosition(int)>
<org.thoughtcrime.securesms.GroupCreateActivity$UpdateSignalGroupTask: void onPostExecute(org.whispersystems.libsignal.util.guava.Optional)>
<android.support.v7.widget.AdapterHelper: void dispatchFirstPassAndUpdateViewHolders(android.support.v7.widget.AdapterHelper$UpdateOp,int)>
<android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
<android.support.v7.widget.AdapterHelper: int findPositionOffset(int)>
<android.support.v7.widget.AdapterHelper: int findPositionOffset(int,int)>
<java.text.FieldPosition: void setBeginIndex(int)>
<org.greenrobot.eventbus.SubscriberMethodFinder$FindState: boolean checkAdd(java.lang.reflect.Method,java.lang.Class)>
<java.text.FieldPosition: void setEndIndex(int)>
<org.greenrobot.eventbus.SubscriberMethodFinder$FindState: void initForSubscriber(java.lang.Class)>
<android.support.v7.widget.AdapterHelper: boolean hasAnyUpdateTypes(int)>
<android.support.v7.widget.AdapterHelper: android.support.v7.widget.AdapterHelper$UpdateOp obtainUpdateOp(int,int,int,java.lang.Object)>
<android.support.v7.widget.AdapterHelper: boolean onItemRangeChanged(int,int,java.lang.Object)>
<com.google.android.gms.location.places.internal.zzl: java.lang.Object createFromParcel(android.os.Parcel)>
<android.support.v7.widget.AdapterHelper: boolean onItemRangeInserted(int,int)>
<com.google.android.gms.location.places.internal.zzl: com.google.android.gms.location.places.internal.PlaceEntity zzoc(android.os.Parcel)>
<android.support.v7.widget.AdapterHelper: boolean onItemRangeMoved(int,int,int)>
<android.support.v7.widget.AdapterHelper: boolean onItemRangeRemoved(int,int)>
<android.support.v7.widget.AdapterHelper: void recycleUpdateOp(android.support.v7.widget.AdapterHelper$UpdateOp)>
<android.support.v7.widget.AdapterHelper: void recycleUpdateOpsAndClearList(java.util.List)>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void add(int,android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout)>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void notifyOnRemoteViewsLoaded(int,android.widget.RemoteViews)>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void removeView(android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout)>
<android.support.v7.widget.Toolbar$LayoutParams: void copyMarginsFromCompat(android.view.ViewGroup$MarginLayoutParams)>
<android.os.MessageQueue: boolean enqueueMessage(android.os.Message,long)>
<com.google.android.gms.location.places.internal.zzl: com.google.android.gms.location.places.internal.PlaceEntity[] zzvg(int)>
<android.os.MessageQueue: boolean hasMessages(android.os.Handler,int,java.lang.Object)>
<android.os.MessageQueue: void removeMessages(android.os.Handler,int,java.lang.Object)>
<android.os.MessageQueue: void removeMessages(android.os.Handler,java.lang.Runnable,java.lang.Object)>
<android.os.MessageQueue: void removeCallbacksAndMessages(android.os.Handler,java.lang.Object)>
<android.os.MessageQueue: void dump(android.util.Printer,java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.EnumSetSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.EnumSet)>
<android.icu.text.SimpleDateFormat: void applyPattern(java.lang.String)>
<com.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>
<android.support.v7.view.menu.ListMenuPresenter: android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<android.support.v7.widget.MenuPopupWindow: void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem)>
<android.support.v7.widget.MenuPopupWindow: void onItemHoverExit(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem)>
<android.support.v7.widget.MenuPopupWindow: void setEnterTransition(java.lang.Object)>
<android.support.v7.widget.MenuPopupWindow: void setExitTransition(java.lang.Object)>
<android.support.v7.widget.MenuPopupWindow: void setHoverListener(android.support.v7.widget.MenuItemHoverListener)>
<android.support.v7.widget.MenuPopupWindow: void setTouchModal(boolean)>
<android.icu.text.SimpleDateFormat: boolean isFieldUnitIgnored(int)>
<android.support.v7.view.menu.ListMenuPresenter: void restoreHierarchyState(android.os.Bundle)>
<android.support.v7.view.menu.ListMenuPresenter: void saveHierarchyState(android.os.Bundle)>
<android.support.v7.view.menu.ListMenuPresenter: void setCallback(android.support.v7.view.menu.MenuPresenter$Callback)>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.String _calcName(java.lang.Class)>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.String _desc(java.lang.String)>
<com.google.protobuf.SmallSortedMap: java.util.Map$Entry getArrayEntryAt(int)>
<android.support.v7.widget.ActionMenuPresenter$SavedState$1: android.support.v7.widget.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel)>
<com.fasterxml.jackson.databind.DeserializationContext: java.util.Calendar constructCalendar(java.util.Date)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>
<android.support.v7.widget.ActionMenuPresenter$SavedState$1: android.support.v7.widget.ActionMenuPresenter$SavedState[] newArray(int)>
<com.google.protobuf.SmallSortedMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object findInjectableValue(java.lang.Object,com.fasterxml.jackson.databind.BeanProperty,java.lang.Object)>
<org.thoughtcrime.securesms.GroupCreateActivity$AddMembersTask: java.util.List doInBackground(org.thoughtcrime.securesms.recipients.Recipient[])>
<sun.util.locale.LocaleObjectCache: java.lang.Object get(java.lang.Object)>
<org.thoughtcrime.securesms.GroupCreateActivity$AddMembersTask: void onPostExecute(java.util.List)>
<libcore.util.ZoneInfo$OffsetInterval: boolean containsWallTime(long)>
<sun.util.locale.LocaleObjectCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.media.Metadata: boolean parse(android.os.Parcel)>
<android.media.Metadata: boolean has(int)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException instantiationException(java.lang.Class,java.lang.String)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException instantiationException(java.lang.Class,java.lang.Throwable)>
<android.media.Metadata: boolean getBoolean(int)>
<com.fasterxml.jackson.databind.DeserializationContext: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.String)>
<libcore.util.ZoneInfoDB$TzData$1: libcore.util.ZoneInfo create(java.lang.String)>
<android.icu.text.SimpleDateFormat: android.icu.text.NumberFormat getNumberFormat(char)>
<android.widget.Editor$TextActionModeCallback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<com.fasterxml.jackson.databind.DeserializationContext: void returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException unknownTypeException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>
<android.icu.impl.TimeZoneGenericNames$Cache: android.icu.impl.TimeZoneGenericNames createInstance(java.lang.String,android.icu.util.ULocale)>
<android.widget.Editor$TextActionModeCallback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdKeyException(java.lang.Class,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdNumberException(java.lang.Number,java.lang.Class,java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: boolean canUseFor(com.fasterxml.jackson.annotation.ObjectIdGenerator)>
<android.widget.Editor$TextActionModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<org.thoughtcrime.securesms.CreateProfileActivity$7: java.lang.Boolean doInBackground(java.lang.Void[])>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.String,java.lang.Class,java.lang.String)>
<android.widget.Editor$TextActionModeCallback: void onDestroyActionMode(android.view.ActionMode)>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException wrongTokenException(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: java.lang.Object generateId(java.lang.Object)>
<android.widget.Editor$TextActionModeCallback: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>
<org.thoughtcrime.securesms.CreateProfileActivity$7: void onPostExecute(java.lang.Boolean)>
<org.thoughtcrime.securesms.ConversationListAdapter: void initializeBatchMode(boolean)>
<org.thoughtcrime.securesms.ConversationListAdapter: void lambda$onCreateItemViewHolder$0$ConversationListAdapter(android.view.View)>
<org.thoughtcrime.securesms.ConversationListAdapter: void lambda$onCreateItemViewHolder$1$ConversationListAdapter(org.thoughtcrime.securesms.ConversationListItem,android.view.View)>
<com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator: com.fasterxml.jackson.annotation.ObjectIdGenerator newForSerialization(java.lang.Object)>
<org.thoughtcrime.securesms.ConversationListAdapter: boolean lambda$onCreateItemViewHolder$2$ConversationListAdapter(org.thoughtcrime.securesms.ConversationListItem,android.view.View)>
<org.thoughtcrime.securesms.ConversationListAdapter: void onBindItemViewHolder(org.thoughtcrime.securesms.ConversationListAdapter$ViewHolder,android.database.Cursor)>
<android.support.design.widget.FloatingActionButton: boolean getContentRect(android.graphics.Rect)>
<org.thoughtcrime.securesms.ConversationListAdapter: void onItemViewRecycled(org.thoughtcrime.securesms.ConversationListAdapter$ViewHolder)>
<org.thoughtcrime.securesms.ConversationListAdapter: void toggleThreadInBatchSet(long)>
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: int getSize(com.bumptech.glide.load.engine.Resource)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: int getSize(java.lang.Object)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: void onItemEvicted(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: void onItemEvicted(java.lang.Object,java.lang.Object)>
<com.davemorrissey.labs.subscaleview.ImageSource: com.davemorrissey.labs.subscaleview.ImageSource tiling(boolean)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: void setResourceRemovedListener(com.bumptech.glide.load.engine.cache.MemoryCache$ResourceRemovedListener)>
<com.bumptech.glide.load.engine.cache.LruResourceCache: void trimMemory(int)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback$2: float getInterpolation(float)>
<android.text.DynamicLayout: void updateBlocks(int,int,int)>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: void setDisplayedValuesAndPickedIndex(java.lang.String[],int,boolean)>
<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
<com.google.protobuf.GeneratedMessage$ExtendableBuilder: void mergeExtensionFields(com.google.protobuf.GeneratedMessage$ExtendableMessage)>
<android.support.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: void setMinAndMaxShowIndex(int,int)>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: void setMinAndMaxShowIndex(int,int,boolean)>
<org.thoughtcrime.securesms.database.loaders.DeviceListLoader$DeviceInfoComparator: int compare(org.whispersystems.signalservice.api.messages.multidevice.DeviceInfo,org.whispersystems.signalservice.api.messages.multidevice.DeviceInfo)>
<android.support.v7.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<android.text.DynamicLayout: void setIndexFirstChangedBlock(int)>
<android.support.v7.widget.ListPopupWindow: void setAnchorView(android.view.View)>
<android.support.v7.widget.ListPopupWindow: void setAnimationStyle(int)>
<android.support.v7.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.support.v7.widget.ListPopupWindow: void setContentWidth(int)>
<android.support.v7.widget.ListPopupWindow: void setDropDownGravity(int)>
<android.support.v7.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.support.v7.widget.ListPopupWindow: void setHorizontalOffset(int)>
<android.support.v7.widget.ListPopupWindow: void setInputMethodMode(int)>
<android.support.v7.widget.ListPopupWindow: void setModal(boolean)>
<android.support.v7.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.support.v7.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.support.v7.widget.ListPopupWindow: void setOverlapAnchor(boolean)>
<okio.Buffer: int read(byte[],int,int)>
<android.support.v7.widget.ListPopupWindow: void setPromptPosition(int)>
<android.support.v7.widget.ListPopupWindow: void setSelection(int)>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: void setPickedIndexRelativeToRaw(int)>
<android.support.v7.widget.ListPopupWindow: void setVerticalOffset(int)>
<android.support.v7.widget.ListPopupWindow: void setWidth(int)>
<android.view.DisplayInfo: void readFromParcel(android.os.Parcel)>
<com.fasterxml.jackson.databind.PropertyMetadata: com.fasterxml.jackson.databind.PropertyMetadata withDescription(java.lang.String)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder 'with'(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(android.animation.Animator)>
<com.google.android.exoplayer2.trackselection.TrackSelector: void init(com.google.android.exoplayer2.trackselection.TrackSelector$InvalidationListener)>
<java.util.Collections$EmptySet: boolean contains(java.lang.Object)>
<com.google.android.exoplayer2.source.ExtractorMediaSource: com.google.android.exoplayer2.source.MediaPeriod createPeriod(int,com.google.android.exoplayer2.upstream.Allocator,long)>
<com.google.android.exoplayer2.source.ExtractorMediaSource: void onSourceInfoRefreshed(com.google.android.exoplayer2.Timeline,java.lang.Object)>
<sun.util.calendar.Era: long getSince(java.util.TimeZone)>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$MethodDescriptorProto)>
<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>
<com.google.android.exoplayer2.source.ExtractorMediaSource: void prepareSource(com.google.android.exoplayer2.ExoPlayer,boolean,com.google.android.exoplayer2.source.MediaSource$Listener)>
<com.google.android.exoplayer2.source.ExtractorMediaSource: void releasePeriod(com.google.android.exoplayer2.source.MediaPeriod)>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$MethodDescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$MethodOptions)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay$2: void onGrabbed(android.view.View,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay$2: void onGrabbedStateChange(android.view.View,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay$2: void onTrigger(android.view.View,int)>
<okio.Buffer: okio.Segment writableSegment(int)>
<okio.Buffer: okio.Buffer write(byte[])>
<okio.Buffer: okio.Buffer write(byte[],int,int)>
<okio.Buffer: okio.Buffer writeByte(int)>
<android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl: boolean isRtl(java.lang.CharSequence,int,int)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>
<android.app.ApplicationErrorReport$CrashInfo: void writeToParcel(android.os.Parcel,int)>
<java.util.concurrent.LinkedBlockingQueue: void unlink(java.util.concurrent.LinkedBlockingQueue$Node,java.util.concurrent.LinkedBlockingQueue$Node)>
<okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: int extractCountryCode(java.lang.StringBuilder,java.lang.StringBuilder)>
<android.icu.impl.ICUResourceBundle: android.icu.impl.ICUResourceBundle findWithFallback(java.lang.String)>
<android.icu.impl.ICUResourceBundle: java.lang.String findStringWithFallback(java.lang.String)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber,com.google.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>
<com.google.android.gms.gcm.GoogleCloudMessaging: java.lang.String getMessageType(android.content.Intent)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: void format(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber,com.google.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>
<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>
<com.google.android.gms.gcm.GoogleCloudMessaging: java.lang.String zzf(java.lang.String[])>
<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
<com.google.android.gms.gcm.GoogleCloudMessaging: void zzr(android.content.Intent)>
<org.thoughtcrime.securesms.profiles.SystemProfileUtil$2: java.lang.String doInBackground(java.lang.Void[])>
<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>
<org.thoughtcrime.securesms.profiles.SystemProfileUtil$2: void onPostExecute(java.lang.String)>
<org.thoughtcrime.securesms.service.KeyCachingService$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.graphics.drawable.VectorDrawable$VGroup$2: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.graphics.drawable.VectorDrawable$VGroup$2: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void fling(int,int)>
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)>
<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.color.MaterialColors$MaterialColorList: int[] asConversationColorArray(android.content.Context)>
<org.thoughtcrime.securesms.color.MaterialColors$MaterialColorList: org.thoughtcrime.securesms.color.MaterialColor get(int)>
<org.thoughtcrime.securesms.color.MaterialColors$MaterialColorList: org.thoughtcrime.securesms.color.MaterialColor getByColor(android.content.Context,int)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForRegion(java.lang.String)>
<android.support.v7.widget.SwitchCompat: void setSwitchTextAppearance(android.content.Context,int)>
<android.support.v7.widget.SwitchCompat: void setSwitchTypeface(android.graphics.Typeface)>
<android.support.v7.widget.SwitchCompat: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.support.v7.widget.SwitchCompat: void setThumbDrawable(android.graphics.drawable.Drawable)>
<android.support.v7.widget.SwitchCompat: void setThumbPosition(float)>
<android.support.v7.widget.SwitchCompat: void setTrackDrawable(android.graphics.drawable.Drawable)>
<sun.nio.ch.NativeThreadSet: void remove(int)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void smoothScrollBy(int,int)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void smoothScrollBy(int,int,int)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void smoothScrollBy(int,int,int,int)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void smoothScrollBy(int,int,int,android.view.animation.Interpolator)>
<android.icu.impl.ICUResourceBundle: android.icu.impl.ICUResourceBundle get(java.lang.String,java.util.HashMap,android.icu.util.UResourceBundle)>
<android.support.v7.widget.RecyclerView$ViewFlinger: void smoothScrollBy(int,int,android.view.animation.Interpolator)>
<android.icu.impl.ICUResourceBundle: void setParent(java.util.ResourceBundle)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.google.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<org.whispersystems.libpastelog.SubmitLogFragment$SubmitToPastebinAsyncTask: java.lang.String doInBackground(java.lang.Void[])>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.support.v7.widget.Toolbar$1: boolean onMenuItemClick(android.view.MenuItem)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node: int copyData(java.lang.Object,int)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node: void linkNext(com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<org.thoughtcrime.securesms.qr.ScanningThread: void setCharacterSet(java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<org.thoughtcrime.securesms.qr.ScanningThread: void setScanListener(org.thoughtcrime.securesms.qr.ScanListener)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: void putNull(java.lang.String)>
<java.util.TaskQueue: void add(java.util.TimerTask)>
<org.whispersystems.libpastelog.SubmitLogFragment$SubmitToPastebinAsyncTask: void onPostExecute(java.lang.String)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.media.SubtitleTrack: void onData(android.media.SubtitleData)>
<android.media.SubtitleTrack: void updateActiveCues(boolean,long)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<android.media.SubtitleTrack: void onTimedEvent(long)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<org.thoughtcrime.securesms.ConversationFragment$1: int compare(org.thoughtcrime.securesms.database.model.MessageRecord,org.thoughtcrime.securesms.database.model.MessageRecord)>
<android.icu.text.PluralFormat: void applyPattern(java.lang.String)>
<android.media.SubtitleTrack: void onSeek(long)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder addAllMembers(java.lang.Iterable)>
<android.media.SubtitleTrack: boolean addCue(android.media.SubtitleTrack$Cue)>
<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>
<android.media.SubtitleTrack: void setTimeProvider(android.media.MediaTimeProvider)>
<android.media.SubtitleTrack: void finishedRun(long)>
<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>
<android.media.SubtitleTrack: void setRunDiscardTimeMs(long,long)>
<java.security.MessageDigest: void update(byte)>
<java.security.MessageDigest: void update(byte[],int,int)>
<java.security.MessageDigest: void update(byte[])>
<android.icu.text.PluralFormat: java.lang.String format(double)>
<org.thoughtcrime.securesms.recipients.Recipient$1: void onSuccess(org.thoughtcrime.securesms.recipients.RecipientProvider$RecipientDetails)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.lang.String maybeStripExtension(java.lang.StringBuilder)>
<java.security.MessageDigest: byte[] digest(byte[])>
<com.google.i18n.phonenumbers.PhoneNumberUtil: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource maybeStripInternationalPrefixAndNormalize(java.lang.StringBuilder,java.lang.String)>
<android.support.v4.app.NotificationManagerCompat$SideChannelManager: void queueTask(android.support.v4.app.NotificationManagerCompat$Task)>
<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Chunk(int,char[],int)>
<com.google.i18n.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>
<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>
<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Partial(int,int,char[],int)>
<org.thoughtcrime.securesms.DeviceListFragment: void onLoadFinished(android.support.v4.content.Loader,java.util.List)>
<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>
<org.thoughtcrime.securesms.DeviceListFragment: void setAddDeviceButtonListener(android.view.View$OnClickListener)>
<android.view.InputEvent: boolean isFromSource(int)>
<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>
<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder setId(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder setName(java.lang.String)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder setType(org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Type)>
<android.util.ArrayMap$1: java.lang.Object colGetEntry(int,int)>
<android.util.ArrayMap$1: int colIndexOfValue(java.lang.Object)>
<android.util.ArrayMap$1: java.lang.Object colSetValue(int,java.lang.Object)>
<android.util.ArrayMap$1: void colRemoveAt(int)>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer$MediaPlayerWrapper: void setAudioStreamType(int)>
<sun.util.calendar.LocalGregorianCalendar: void normalizeYear(sun.util.calendar.CalendarDate)>
<android.util.ArrayMap: int indexOf(java.lang.Object,int)>
<android.text.method.MetaKeyKeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.icu.text.DecimalFormatSymbols$1: android.icu.text.DecimalFormatSymbols$CacheData createInstance(android.icu.util.ULocale,java.lang.Void)>
<android.util.ArrayMap: void ensureCapacity(int)>
<android.util.ArrayMap: int indexOfKey(java.lang.Object)>
<android.util.ArrayMap: int indexOfValue(java.lang.Object)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)>
<android.util.ArrayMap: boolean containsValue(java.lang.Object)>
<android.util.ArrayMap: java.lang.Object keyAt(int)>
<android.util.ArrayMap: java.lang.Object valueAt(int)>
<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>
<com.nineoldandroids.animation.PreHoneycombCompat$10: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$10: void setValue(android.view.View,float)>
<android.util.ArrayMap: void append(java.lang.Object,java.lang.Object)>
<android.support.v7.widget.FastScroller: void attachToRecyclerView(android.support.v7.widget.RecyclerView)>
<android.view.FocusFinder: android.view.View findNextFocusInAbsoluteDirection(java.util.ArrayList,android.view.ViewGroup,android.view.View,android.graphics.Rect,int)>
<android.support.v7.widget.FastScroller: void hide(int)>
<org.thoughtcrime.securesms.notifications.MultipleRecipientNotificationBuilder: void addActions(android.app.PendingIntent)>
<android.util.ArrayMap: void putAll(android.util.ArrayMap)>
<android.support.v7.widget.FastScroller: boolean isPointInsideHorizontalThumb(float,float)>
<org.thoughtcrime.securesms.notifications.MultipleRecipientNotificationBuilder: void addMessageBody(org.thoughtcrime.securesms.recipients.Recipient,java.lang.CharSequence)>
<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>
<android.util.ArrayMap: java.lang.Object removeAt(int)>
<android.support.v7.widget.FastScroller: boolean isPointInsideVerticalThumb(float,float)>
<android.view.FocusFinder: boolean isBetterCandidate(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<org.thoughtcrime.securesms.notifications.MultipleRecipientNotificationBuilder: void setMessageCount(int,int)>
<org.thoughtcrime.securesms.notifications.MultipleRecipientNotificationBuilder: void setMostRecentSender(org.thoughtcrime.securesms.recipients.Recipient)>
<android.view.FocusFinder: boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<android.view.FocusFinder: int getWeightedDistanceFor(int,int)>
<android.view.FocusFinder: boolean isCandidate(android.graphics.Rect,android.graphics.Rect,int)>
<android.util.ArrayMap: void putAll(java.util.Map)>
<android.view.FocusFinder: boolean beamsOverlap(int,android.graphics.Rect,android.graphics.Rect)>
<android.util.ArrayMap: boolean retainAll(java.util.Collection)>
<android.view.FocusFinder: boolean isToDirectionOf(int,android.graphics.Rect,android.graphics.Rect)>
<java.nio.channels.spi.AbstractInterruptibleChannel$1: void interrupt(java.lang.Thread)>
<android.support.v7.widget.FastScroller: void updateScrollPosition(int,int)>
<org.webrtc.CameraCapturer$4: void onCameraError(java.lang.String)>
<org.webrtc.CameraCapturer$4: void onCameraFreezed(java.lang.String)>
<org.webrtc.CameraCapturer$4: void onCameraOpening(java.lang.String)>
<java.text.ChoiceFormat: void applyPattern(java.lang.String)>
<android.support.v7.widget.RecyclerView$ItemDecoration: void getItemOffsets(android.graphics.Rect,int,android.support.v7.widget.RecyclerView)>
<java.util.concurrent.TimeUnit$4: long toMinutes(long)>
<java.util.concurrent.TimeUnit$4: long convert(long,java.util.concurrent.TimeUnit)>
<android.support.v7.widget.RecyclerView$ItemDecoration: void onDraw(android.graphics.Canvas,android.support.v7.widget.RecyclerView)>
<org.thoughtcrime.securesms.notifications.NotificationState: void addNotification(org.thoughtcrime.securesms.notifications.NotificationItem)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getAndroidAutoHeardIntent(android.content.Context,int)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getAndroidAutoReplyIntent(android.content.Context,org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.service.ApplicationMigrationService: void progressUpdate(org.thoughtcrime.securesms.database.SmsMigrator$ProgressDescription)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getDeleteIntent(android.content.Context)>
<org.thoughtcrime.securesms.service.ApplicationMigrationService: void setImportStateHandler(android.os.Handler)>
<java.text.ChoiceFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: boolean containsSession(org.whispersystems.libsignal.SignalProtocolAddress)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getMarkAsReadIntent(android.content.Context,int)>
<org.thoughtcrime.securesms.notifications.NotificationState: java.util.List getNotificationsForThread(long)>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: java.util.List getSubDeviceSessions(java.lang.String)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getQuickReplyIntent(android.content.Context,org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: org.whispersystems.libsignal.state.SessionRecord loadSession(org.whispersystems.libsignal.SignalProtocolAddress)>
<org.thoughtcrime.securesms.notifications.NotificationState: android.app.PendingIntent getRemoteReplyIntent(android.content.Context,org.thoughtcrime.securesms.recipients.Recipient)>
<dalvik.system.CloseGuard$DefaultTracker: void open(java.lang.Throwable)>
<dalvik.system.CloseGuard$DefaultTracker: void close(java.lang.Throwable)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState$1: void setValue(android.graphics.drawable.VectorDrawable$VectorDrawableState,float)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState$1: java.lang.Float get(android.graphics.drawable.VectorDrawable$VectorDrawableState)>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: void storeSession(org.whispersystems.libsignal.SignalProtocolAddress,org.whispersystems.libsignal.state.SessionRecord)>
<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer get(int)>
<sun.nio.ch.Util$BufferCache: boolean offerFirst(java.nio.ByteBuffer)>
<android.support.v7.widget.LinearLayoutManager$AnchorInfo: void assignFromView(android.view.View)>
<java.util.TreeMap$AscendingSubMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>
<android.support.v7.widget.LinearLayoutManager$AnchorInfo: void assignFromViewAndKeepVisibleRect(android.view.View)>
<android.icu.impl.UCaseProps: void addPropertyStarts(android.icu.text.UnicodeSet)>
<android.support.v7.widget.LinearLayoutManager$AnchorInfo: boolean isViewValidAsAnchor(android.view.View,android.support.v7.widget.RecyclerView$State)>
<org.thoughtcrime.securesms.components.ExpirationTimerView: void setExpirationTime(long,long)>
<android.graphics.drawable.LayerDrawable: int addLayer(android.graphics.drawable.LayerDrawable$ChildDrawable)>
<com.fasterxml.jackson.databind.ser.std.CalendarSerializer: long _timestamp(java.util.Calendar)>
<android.graphics.drawable.VectorDrawable$VGroup$6: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.LayerDrawable$ChildDrawable addLayer(android.graphics.drawable.Drawable,int[],int,int,int,int,int)>
<android.graphics.drawable.VectorDrawable$VGroup$6: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.icu.impl.UCaseProps: int tolower(int)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>
<android.graphics.drawable.LayerDrawable: void setId(int,int)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>
<android.graphics.drawable.LayerDrawable: int findIndexByLayerId(int)>
<android.icu.impl.UCaseProps: void addCaseClosure(int,android.icu.text.UnicodeSet)>
<android.graphics.drawable.LayerDrawable: void setDrawable(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.graphics.drawable.LayerDrawable: void setLayerWidth(int,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void displayVideoTooltip(android.view.ViewGroup)>
<android.graphics.drawable.LayerDrawable: int getLayerWidth(int)>
<android.graphics.drawable.LayerDrawable: void setLayerHeight(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerHeight(int)>
<android.graphics.drawable.LayerDrawable: void setLayerGravity(int,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setAudioMuteButtonListener(org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls$MuteButtonListener)>
<android.graphics.drawable.LayerDrawable: int getLayerGravity(int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setBluetoothButtonListener(org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls$BluetoothButtonListener)>
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setControlsEnabled(boolean)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetLeft(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetLeft(int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetRight(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetRight(int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetTop(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetTop(int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetBottom(int,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setSpeakerButtonListener(org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls$SpeakerButtonListener)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetBottom(int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setVideoEnabled(boolean)>
<android.icu.impl.UCaseProps: boolean addStringCaseClosure(java.lang.String,android.icu.text.UnicodeSet)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetStart(int,int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void setVideoMuteButtonListener(org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls$MuteButtonListener)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetStart(int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallControls: void updateAudioState(boolean)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetEnd(int,int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetEnd(int)>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder: com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location$Builder mergeFrom(com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location)>
<android.icu.impl.UCaseProps: int getType(int)>
<android.icu.impl.UCaseProps: int getTypeOrIgnorable(int)>
<android.icu.impl.UCaseProps: int getDotType(int)>
<android.icu.impl.UCaseProps: boolean isSoftDotted(int)>
<android.icu.impl.UCaseProps: boolean isCaseSensitive(int)>
<android.icu.impl.UCaseProps: int toFullLower(int,android.icu.impl.UCaseProps$ContextIterator,java.lang.StringBuilder,android.icu.util.ULocale,int[])>
<com.klinker.android.send_message.MmsReceivedReceiver$AcknowledgeIndTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.google.protobuf.DescriptorProtos$ServiceOptions$Builder: com.google.protobuf.DescriptorProtos$ServiceOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$ServiceOptions)>
<java.security.SecureRandom: void nextBytes(byte[])>
<java.security.SecureRandom: byte[] generateSeed(int)>
<org.thoughtcrime.securesms.notifications.MarkReadReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.app.ActivityTransitionCoordinator: void viewsReady(android.util.ArrayMap)>
<android.icu.impl.UCaseProps: int toFullUpper(int,android.icu.impl.UCaseProps$ContextIterator,java.lang.StringBuilder,android.icu.util.ULocale,int[])>
<android.icu.impl.UCaseProps: int toFullTitle(int,android.icu.impl.UCaseProps$ContextIterator,java.lang.StringBuilder,android.icu.util.ULocale,int[])>
<com.astuetz.PagerSlidingTabStrip$PagerAdapterObserver: void setAttached(boolean)>
<android.icu.impl.UCaseProps: int fold(int,int)>
<android.app.ActivityTransitionCoordinator: android.transition.Transition setTargets(android.transition.Transition,boolean)>
<android.icu.impl.UCaseProps: int toFullFolding(int,java.lang.StringBuilder,int)>
<android.app.ActivityTransitionCoordinator: android.transition.Transition configureTransition(android.transition.Transition,boolean)>
<android.widget.RemoteViews$AsyncApplyTask: android.widget.RemoteViews$ViewTree doInBackground(java.lang.Void[])>
<android.app.ActivityTransitionCoordinator: android.util.ArrayMap mapSharedElements(java.util.ArrayList,java.util.ArrayList)>
<org.thoughtcrime.securesms.DatabaseUpgradeActivity$2: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.impl.UCaseProps: boolean hasBinaryProperty(int,int)>
<android.app.ActivityTransitionCoordinator: java.util.ArrayList createSnapshots(android.os.Bundle,java.util.Collection)>
<android.view.animation.Animation: void setListenerHandler(android.os.Handler)>
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>
<org.thoughtcrime.securesms.DeviceLinkFragment: void setLinkClickedListener(android.net.Uri,org.thoughtcrime.securesms.DeviceLinkFragment$LinkClickedListener)>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.app.ActivityTransitionCoordinator: void hideViews(java.util.ArrayList)>
<android.app.ActivityTransitionCoordinator: void captureSharedElementState(android.view.View,java.lang.String,android.os.Bundle,android.graphics.Matrix,android.graphics.RectF)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setContent(com.google.protobuf.ByteString)>
<org.thoughtcrime.securesms.PassphraseCreateActivity$SecretGenerator: java.lang.Void doInBackground(java.lang.String[])>
<android.view.animation.Animation: void setRepeatCount(int)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setLegacyMessage(com.google.protobuf.ByteString)>
<android.view.animation.Animation: void setFillEnabled(boolean)>
<android.view.animation.Animation: void setZAdjustment(int)>
<org.thoughtcrime.securesms.PassphraseCreateActivity$SecretGenerator: void onPostExecute(java.lang.Void)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setRelay(java.lang.String)>
<android.view.animation.Animation: void setBackgroundColor(int)>
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setSource(java.lang.String)>
<android.app.ActivityTransitionCoordinator: void startTransition(java.lang.Runnable)>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setSourceDevice(int)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setTimestamp(long)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder setType(org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Type)>
<android.app.ActivityTransitionCoordinator: void setGhostVisibility(int)>
<android.app.ActivityTransitionCoordinator: void scheduleGhostVisibilityChange(int)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.app.ActivityTransitionCoordinator: void setTransitioningViewsVisiblity(int,boolean)>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>
<com.android.internal.view.menu.ListMenuPresenter: void setCallback(com.android.internal.view.menu.MenuPresenter$Callback)>
<android.icu.impl.PluralRulesLoader: java.lang.String getRulesIdForLocale(android.icu.util.ULocale,android.icu.text.PluralRules$PluralType)>
<com.android.internal.view.menu.ListMenuPresenter: void saveHierarchyState(android.os.Bundle)>
<android.icu.impl.PluralRulesLoader: android.icu.text.PluralRules getRulesForRulesId(java.lang.String)>
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>
<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
<android.icu.impl.PluralRulesLoader: android.icu.text.PluralRules forLocale(android.icu.util.ULocale,android.icu.text.PluralRules$PluralType)>
<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
<android.widget.AbsSeekBar: void setThumbOffset(int)>
<android.widget.AbsSeekBar: void setTickMark(android.graphics.drawable.Drawable)>
<com.google.zxing.common.reedsolomon.GenericGFPoly: com.google.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(com.google.zxing.common.reedsolomon.GenericGFPoly)>
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>
<android.animation.ValueAnimator: void setIntValues(int[])>
<com.google.zxing.common.reedsolomon.GenericGFPoly: com.google.zxing.common.reedsolomon.GenericGFPoly[] divide(com.google.zxing.common.reedsolomon.GenericGFPoly)>
<android.animation.ValueAnimator: void setFloatValues(float[])>
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>
<com.google.zxing.common.reedsolomon.GenericGFPoly: int getCoefficient(int)>
<android.animation.ValueAnimator: void setCurrentPlayTime(long)>
<android.animation.ValueAnimator: void setCurrentFraction(float)>
<android.widget.AbsSeekBar: void drawTickMarks(android.graphics.Canvas)>
<com.google.zxing.common.reedsolomon.GenericGFPoly: com.google.zxing.common.reedsolomon.GenericGFPoly multiply(com.google.zxing.common.reedsolomon.GenericGFPoly)>
<android.widget.AbsSeekBar: void drawThumb(android.graphics.Canvas)>
<android.animation.ValueAnimator: void setStartDelay(long)>
<com.google.zxing.common.reedsolomon.GenericGFPoly: com.google.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int)>
<android.animation.ValueAnimator: void setRepeatCount(int)>
<android.animation.ValueAnimator: void setRepeatMode(int)>
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,boolean[])>
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>
<android.database.CursorWrapper: long getLong(int)>
<android.animation.ValueAnimator: void commitAnimationFrame(long)>
<android.animation.ValueAnimator: boolean animateBasedOnTime(long)>
<android.animation.ValueAnimator: void doAnimationFrame(long)>
<android.widget.ActivityChooserModel$PersistHistoryAsyncTask: java.lang.Void doInBackground(java.lang.Object[])>
<android.icu.impl.ICUResourceBundleImpl$ResourceTable: java.lang.String findString(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter withAlwaysAsId(boolean)>
<com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter withSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<sun.misc.FDBigInteger: sun.misc.FDBigInteger leftShift(int)>
<android.icu.text.TransliteratorRegistry: android.icu.text.Transliterator get(java.lang.String,java.lang.StringBuffer)>
<android.icu.text.TransliteratorRegistry: void put(java.lang.String,java.lang.Class,boolean)>
<android.icu.text.TransliteratorRegistry: void put(java.lang.String,android.icu.text.Transliterator$Factory,boolean)>
<android.icu.text.TransliteratorRegistry: void put(java.lang.String,java.lang.String,int,boolean)>
<android.icu.text.TransliteratorRegistry: void put(java.lang.String,java.lang.String,boolean)>
<android.icu.text.TransliteratorRegistry: void put(java.lang.String,android.icu.text.Transliterator,boolean)>
<android.icu.text.TransliteratorRegistry: java.util.Enumeration getAvailableTargets(java.lang.String)>
<java.math.BigInt: void putCopy(java.math.BigInt)>
<android.icu.text.TransliteratorRegistry: java.util.Enumeration getAvailableVariants(java.lang.String,java.lang.String)>
<java.math.BigInt: void putLongInt(long)>
<java.math.BigInt: void putULongInt(long,boolean)>
<java.math.BigInt: void putDecString(java.lang.String)>
<sun.misc.FDBigInteger: sun.misc.FDBigInteger multByPow52(int,int)>
<java.math.BigInt: void putHexString(java.lang.String)>
<java.math.BigInt: java.lang.String checkString(java.lang.String,int)>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<sun.misc.FDBigInteger: sun.misc.FDBigInteger leftInplaceSub(sun.misc.FDBigInteger)>
<java.math.BigInt: void putBigEndian(byte[],boolean)>
<java.math.BigInt: void putLittleEndianInts(int[],boolean)>
<java.math.BigInt: void putBigEndianTwosComplement(byte[])>
<java.math.BigInt: void setSign(int)>
<java.math.BigInt: boolean twosCompFitsIntoBytes(int)>
<java.math.BigInt: boolean isBitSet(int)>
<com.android.internal.util.ImageUtils: boolean isGrayscale(android.graphics.Bitmap)>
<java.math.BigInt: void multiplyByPositiveInt(int)>
<sun.misc.FDBigInteger: sun.misc.FDBigInteger rightInplaceSub(sun.misc.FDBigInteger)>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<sun.misc.FDBigInteger: int 'cmp'(sun.misc.FDBigInteger)>
<sun.misc.FDBigInteger: int cmpPow52(int,int)>
<sun.misc.FDBigInteger: int addAndCmp(sun.misc.FDBigInteger,sun.misc.FDBigInteger)>
<com.fasterxml.jackson.core.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>
<android.icu.impl.locale.StringTokenIterator: android.icu.impl.locale.StringTokenIterator setStart(int)>
<android.support.v4.content.SharedPreferencesCompat$EditorCompat: void apply(android.content.SharedPreferences$Editor)>
<java.util.Collections$SynchronizedCollection: boolean contains(java.lang.Object)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
<android.support.v7.preference.MultiSelectListPreferenceDialogFragmentCompat$1: void onClick(android.content.DialogInterface,int,boolean)>
<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
<java.util.Collections$SynchronizedCollection: boolean remove(java.lang.Object)>
<android.support.v7.widget.RtlSpacingHelper: void setAbsolute(int,int)>
<android.support.v7.widget.RtlSpacingHelper: void setDirection(boolean)>
<android.support.v7.widget.RtlSpacingHelper: void setRelative(int,int)>
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.doomonafireball.betterpickers.radialtimepicker.AmPmCirclesView: int getIsTouchingAmOrPm(float,float)>
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<com.doomonafireball.betterpickers.radialtimepicker.AmPmCirclesView: void setAmOrPm(int)>
<com.doomonafireball.betterpickers.radialtimepicker.AmPmCirclesView: void setAmOrPmPressed(int)>
<com.doomonafireball.betterpickers.radialtimepicker.AmPmCirclesView: void setTheme(android.content.Context,boolean)>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>
<java.text.NumberFormat: java.lang.String format(double)>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.view.MenuInflater$MenuState: void readGroup(android.util.AttributeSet)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>
<android.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)>
<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.graphics.Path: void addArc(float,float,float,float,float,float)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.drawable.VectorDrawable$VPath$1: void set(android.graphics.drawable.VectorDrawable$VPath,android.util.PathParser$PathData)>
<android.graphics.drawable.VectorDrawable$VPath$1: android.util.PathParser$PathData get(android.graphics.drawable.VectorDrawable$VPath)>
<android.graphics.Path: float[] approximate(float)>
<android.widget.Editor$SuggestionHelper$SuggestionSpanComparator: int compare(android.text.style.SuggestionSpan,android.text.style.SuggestionSpan)>
<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>
<com.google.android.flexbox.FlexboxHelper: void calculateFlexLines(com.google.android.flexbox.FlexboxHelper$FlexLinesResult,int,int,int,int,int,java.util.List)>
<java.net.AddressCache: java.lang.Object get(java.lang.String,int)>
<java.net.AddressCache: void put(java.lang.String,int,java.net.InetAddress[])>
<java.net.AddressCache: void putUnknownHost(java.lang.String,int,java.lang.String)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment: void lambda$onModified$0$RecipientPreferenceActivity$RecipientPreferenceFragment(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment: void onModified(org.thoughtcrime.securesms.recipients.Recipient)>
<com.google.android.flexbox.FlexboxHelper: void calculateHorizontalFlexLines(com.google.android.flexbox.FlexboxHelper$FlexLinesResult,int,int,int,int,java.util.List)>
<com.google.android.exoplayer2.upstream.Loader: void release(java.lang.Runnable)>
<com.google.android.flexbox.FlexboxHelper: void calculateHorizontalFlexLinesToIndex(com.google.android.flexbox.FlexboxHelper$FlexLinesResult,int,int,int,int,java.util.List)>
<com.google.android.exoplayer2.upstream.Loader: long startLoading(com.google.android.exoplayer2.upstream.Loader$Loadable,com.google.android.exoplayer2.upstream.Loader$Callback,int)>
<com.google.android.flexbox.FlexboxHelper: void calculateVerticalFlexLines(com.google.android.flexbox.FlexboxHelper$FlexLinesResult,int,int,int,int,java.util.List)>
<com.google.android.flexbox.FlexboxHelper: void calculateVerticalFlexLinesToIndex(com.google.android.flexbox.FlexboxHelper$FlexLinesResult,int,int,int,int,java.util.List)>
<com.google.android.gms.internal.zzsi: com.google.android.gms.internal.zzsh zzcq(android.content.Context)>
<com.google.android.flexbox.FlexboxHelper: void clearFlexLines(java.util.List,int)>
<org.thoughtcrime.securesms.components.camera.CameraView$CaptureTask: byte[] doInBackground(byte[][])>
<org.thoughtcrime.securesms.components.camera.CameraView$CaptureTask: void onPostExecute(byte[])>
<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)>
<java.util.JumboEnumSet: boolean add(java.lang.Enum)>
<com.google.android.flexbox.FlexboxHelper: void determineMainSize(int,int)>
<com.google.android.flexbox.FlexboxHelper: void determineMainSize(int,int,int)>
<com.google.android.flexbox.FlexboxHelper: void ensureIndexToFlexLine(int)>
<com.google.android.flexbox.FlexboxHelper: void ensureMeasureSpecCache(int)>
<com.google.android.flexbox.FlexboxHelper: void ensureMeasuredSizeCache(int)>
<com.google.android.flexbox.FlexboxHelper: int extractHigherInt(long)>
<com.google.android.flexbox.FlexboxHelper: int extractLowerInt(long)>
<com.google.android.flexbox.FlexboxHelper: void layoutSingleChildHorizontal(android.view.View,com.google.android.flexbox.FlexLine,int,int,int,int)>
<android.support.design.widget.BaseTransientBottomBar$4: void onDismiss(android.view.View)>
<android.support.design.widget.BaseTransientBottomBar$4: void onDragStateChanged(int)>
<org.thoughtcrime.securesms.scribbles.viewmodel.Font: void setColor(int)>
<org.thoughtcrime.securesms.scribbles.viewmodel.Font: void setSize(float)>
<com.google.android.flexbox.FlexboxHelper: void layoutSingleChildVertical(android.view.View,com.google.android.flexbox.FlexLine,boolean,int,int,int,int)>
<com.dd.CircularProgressButton: int getColor(int)>
<com.google.android.flexbox.FlexboxHelper: long makeCombinedLong(int,int)>
<com.google.android.flexbox.FlexboxHelper: void stretchViews(int)>
<com.dd.CircularProgressButton: void setBackgroundCompat(android.graphics.drawable.Drawable)>
<com.dd.CircularProgressButton: void setProgress(int)>
<com.annimon.stream.Collectors$35: java.util.Map apply(java.util.Map)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder addAction(android.support.v4.app.NotificationCompat$Action)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder addPerson(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder extend(android.support.v4.app.NotificationCompat$Extender)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setCategory(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setColor(int)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContent(android.widget.RemoteViews)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentInfo(java.lang.CharSequence)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence)>
<org.thoughtcrime.securesms.profiles.ProfileMediaConstraints: int getImageMaxSize(android.content.Context)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setDefaults(int)>
<org.thoughtcrime.securesms.profiles.ProfileMediaConstraints: int getImageMaxWidth(android.content.Context)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setGroup(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setGroupSummary(boolean)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setLights(int,int,int)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setNumber(int)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setOngoing(boolean)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setPriority(int)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setProgress(int,int,boolean)>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>
<java.util.Locale$Builder: java.util.Locale$Builder setLanguage(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setSmallIcon(int)>
<java.util.Locale$Builder: java.util.Locale$Builder setScript(java.lang.String)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri)>
<org.thoughtcrime.securesms.ConversationTitleView$$Lambda$0: boolean test(java.lang.Object)>
<android.text.format.Time: long normalize(boolean)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setSubText(java.lang.CharSequence)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence)>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setWhen(long)>
<android.media.Cea708CCParser: void parse(byte[])>
<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)>
<android.text.TextLine: void draw(android.graphics.Canvas,float,int,int,int)>
<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>
<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>
<android.text.format.Time: long toMillis(boolean)>
<android.text.format.Time: void set(long)>
<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>
<android.support.v7.widget.Toolbar: void setCollapsible(boolean)>
<android.support.v7.widget.Toolbar: void setContentInsetStartWithNavigation(int)>
<android.support.v7.widget.Toolbar: void setContentInsetsRelative(int,int)>
<android.support.v7.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>
<android.support.v7.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>
<android.support.v7.widget.Toolbar: void setMenu(android.support.v7.view.menu.MenuBuilder,android.support.v7.widget.ActionMenuPresenter)>
<android.support.v7.widget.Toolbar: void setNavigationContentDescription(int)>
<android.support.v7.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>
<android.support.v7.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>
<android.content.res.ThemedResourceCache: void put(long,android.content.res.Resources$Theme,java.lang.Object)>
<android.content.res.ThemedResourceCache: void put(long,android.content.res.Resources$Theme,java.lang.Object,boolean)>
<android.support.v7.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>
<android.content.res.ThemedResourceCache: java.lang.Object get(long,android.content.res.Resources$Theme)>
<android.support.v7.widget.Toolbar: void setPopupTheme(int)>
<android.support.v7.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>
<android.content.res.ThemedResourceCache: void onConfigurationChange(int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>
<android.support.v7.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>
<android.support.v7.widget.Toolbar: void setSubtitleTextColor(int)>
<android.support.v7.widget.Toolbar: void setTitle(java.lang.CharSequence)>
<com.nineoldandroids.util.FloatProperty: void set(java.lang.Object,java.lang.Float)>
<android.support.v7.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>
<android.text.style.SpellCheckSpan: void setSpellCheckInProgress(boolean)>
<android.support.v7.widget.Toolbar: void setTitleTextColor(int)>
<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate getCertificate(java.math.BigInteger,sun.security.x509.X500Name)>
<org.webrtc.NativeLibrary$DefaultLoader: boolean load(java.lang.String)>
<android.content.res.TypedArray: int getIndex(int)>
<android.text.TextLine: float nextTab(float)>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcCallScreen: void lambda$onModified$0$WebRtcCallScreen(org.thoughtcrime.securesms.recipients.Recipient)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>
<android.support.v4.view.NestedScrollingParentHelper: void onNestedScrollAccepted(android.view.View,android.view.View,int)>
<android.support.v4.view.NestedScrollingParentHelper: void onNestedScrollAccepted(android.view.View,android.view.View,int,int)>
<android.support.v4.view.NestedScrollingParentHelper: void onStopNestedScroll(android.view.View)>
<android.support.v4.view.NestedScrollingParentHelper: void onStopNestedScroll(android.view.View,int)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: int getInt(int,int)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<android.view.VelocityTracker: void computeCurrentVelocity(int)>
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)>
<android.view.VelocityTracker: float getXVelocity(int)>
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class,boolean)>
<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>
<android.view.VelocityTracker: float getYVelocity(int)>
<android.content.res.TypedArray: android.content.res.ComplexColor getComplexColor(int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.icu.impl.ICUResourceBundleImpl$ResourceContainer: int getContainerResource(int)>
<android.icu.impl.ICUResourceBundleImpl$ResourceContainer: android.icu.util.UResourceBundle createBundleObject(int,java.lang.String,java.util.HashMap,android.icu.util.UResourceBundle)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: float getDimension(int,float)>
<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: void onDestroyActionMode(android.view.ActionMode)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<org.thoughtcrime.securesms.ConversationItem$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.support.design.internal.NavigationMenuItemView: void setCheckable(boolean)>
<android.support.design.internal.NavigationMenuItemView: void setChecked(boolean)>
<android.support.design.internal.NavigationMenuItemView: void setIcon(android.graphics.drawable.Drawable)>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: int getType(int)>
<android.support.design.internal.NavigationMenuItemView: void setTitle(java.lang.CharSequence)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.text.SpannableStringBuilder: java.lang.String substring(int,int)>
<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: int[] extractThemeAttrs(int[])>
<java.util.Calendar: void setTime(java.util.Date)>
<java.util.Calendar: void setTimeInMillis(long)>
<java.util.Calendar: int get(int)>
<java.util.Calendar: int internalGet(int)>
<java.util.Calendar: void internalSet(int,int)>
<java.util.Calendar: void set(int,int)>
<java.util.Calendar: void set(int,int,int)>
<java.util.Calendar: void set(int,int,int,int,int,int)>
<java.util.Calendar: boolean isSet(int)>
<android.icu.impl.TextTrieMap$Node: void add(android.icu.impl.TextTrieMap$CharIterator,java.lang.Object)>
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>
<android.icu.impl.TextTrieMap$Node: android.icu.impl.TextTrieMap$Node findMatch(android.icu.impl.TextTrieMap$CharIterator)>
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>
<java.io.ByteArrayInputStream: void mark(int)>
<java.util.Calendar: boolean checkDisplayNameParams(int,int,int,int,java.util.Locale,int)>
<java.util.Calendar: boolean isExternallySet(int)>
<java.util.Calendar: void setFieldsComputed(int)>
<java.util.Calendar: void setFieldsNormalized(int)>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.support.design.widget.SnackbarManager: void dismiss(android.support.design.widget.SnackbarManager$Callback,int)>
<android.support.design.widget.SnackbarManager: void handleTimeout(android.support.design.widget.SnackbarManager$SnackbarRecord)>
<android.support.design.widget.SnackbarManager: boolean isCurrentOrNext(android.support.design.widget.SnackbarManager$Callback)>
<android.support.design.widget.SnackbarManager: void onDismissed(android.support.design.widget.SnackbarManager$Callback)>
<java.util.Calendar: int getBaseStyle(int)>
<android.support.design.widget.SnackbarManager: void onShown(android.support.design.widget.SnackbarManager$Callback)>
<android.support.design.widget.SnackbarManager: void pauseTimeout(android.support.design.widget.SnackbarManager$Callback)>
<sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>
<android.support.design.widget.SnackbarManager: void restoreTimeoutIfPaused(android.support.design.widget.SnackbarManager$Callback)>
<android.os.BaseBundle: void setClassLoader(java.lang.ClassLoader)>
<android.support.design.widget.SnackbarManager: void show(int,android.support.design.widget.SnackbarManager$Callback)>
<java.util.Calendar: int compareTo(java.util.Calendar)>
<java.util.Calendar: void setZoneShared(boolean)>
<java.util.Calendar: void setLenient(boolean)>
<android.os.BaseBundle: boolean containsKey(java.lang.String)>
<android.os.BaseBundle: java.lang.Object get(java.lang.String)>
<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
<android.os.BaseBundle: void putInt(java.lang.String,int)>
<android.os.BaseBundle: void putLong(java.lang.String,long)>
<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
<com.android.internal.widget.SubtitleView: void setText(java.lang.CharSequence)>
<com.android.internal.widget.SubtitleView: void setForegroundColor(int)>
<com.android.internal.widget.SubtitleView: void setEdgeType(int)>
<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>
<com.android.internal.widget.SubtitleView: void setEdgeColor(int)>
<com.android.internal.widget.SubtitleView: void setTextSize(float)>
<com.android.internal.widget.SubtitleView: void setTypeface(android.graphics.Typeface)>
<android.support.v7.widget.RoundRectDrawable: void setColor(android.content.res.ColorStateList)>
<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>
<com.android.internal.widget.SubtitleView: void setAlignment(android.text.Layout$Alignment)>
<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
<android.support.v7.widget.RoundRectDrawable: void setPadding(float,boolean,boolean)>
<android.support.v7.widget.RoundRectDrawable: void setRadius(float)>
<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>
<android.os.BaseBundle: boolean getBoolean(java.lang.String)>
<android.os.BaseBundle: void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.ClassCastException)>
<android.os.BaseBundle: void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassCastException)>
<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
<android.os.BaseBundle: int getInt(java.lang.String)>
<android.os.BaseBundle: int getInt(java.lang.String,int)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void addAction(int)>
<android.os.BaseBundle: long getLong(java.lang.String,long)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String)>
<java.nio.HeapByteBuffer: int ix(int)>
<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>
<android.os.BaseBundle: int[] getIntArray(java.lang.String)>
<java.nio.HeapByteBuffer: byte _get(int)>
<android.os.BaseBundle: long[] getLongArray(java.lang.String)>
<java.nio.HeapByteBuffer: void _put(int,byte)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer putChar(char)>
<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.BaseBundle: void writeToParcelInner(android.os.Parcel,int)>
<android.os.BaseBundle: void readFromParcelInner(android.os.Parcel)>
<java.util.BitSet: void set(int)>
<java.util.BitSet: void set(int,int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer putInt(int)>
<java.util.BitSet: void set(int,int,boolean)>
<java.util.BitSet: void clear(int)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer putInt(int,int)>
<java.util.BitSet: void clear(int,int)>
<java.util.BitSet: boolean get(int)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setCheckable(boolean)>
<com.doomonafireball.betterpickers.datepicker.DatePicker: void doOnClick(android.view.View)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setChecked(boolean)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setClassName(java.lang.CharSequence)>
<org.thoughtcrime.securesms.ConversationActivity$15: boolean[] doInBackground(org.thoughtcrime.securesms.recipients.Recipient[])>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setCollectionInfo(java.lang.Object)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setCollectionItemInfo(java.lang.Object)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer putLong(int,long)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setContentInvalid(boolean)>
<org.thoughtcrime.securesms.ConversationActivity$15: void onPostExecute(boolean[])>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setError(java.lang.CharSequence)>
<java.nio.HeapByteBuffer: float getFloat(int)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setLabelFor(android.view.View)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Converter _createConverter(java.lang.Object)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setScrollable(boolean)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setText(java.lang.CharSequence)>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer putDouble(double)>
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>
<org.thoughtcrime.securesms.ConversationActivity$29$1: void onSuccess(java.lang.Void)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.annotation.JsonFormat$Value findExpectedFormat(com.fasterxml.jackson.annotation.JsonFormat$Value)>
<com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions: com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions crossFade(com.bumptech.glide.request.transition.DrawableCrossFadeFactory$Builder)>
<com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions: com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions crossFade(com.bumptech.glide.request.transition.DrawableCrossFadeFactory)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.reflect.Method findFactoryMethod(java.lang.Class[])>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _hasTextualNull(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _isNaN(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _isNegInf(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _isPosInf(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMethod findMethod(java.lang.String,java.lang.Class[])>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.annotation.JsonInclude$Include findSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.annotation.JsonInclude$Include findSerializationInclusionForContent(com.fasterxml.jackson.annotation.JsonInclude$Include)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.reflect.Constructor findSingleArgConstructor(java.lang.Class[])>
<android.icu.text.PluralRules$Rule: boolean appliesTo(android.icu.text.PluralRules$FixedDecimal)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.Object instantiateBean(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.text.RuleBasedCollator: int compare(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean isFactoryMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean removeProperty(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.ResourcesImpl$ThemeImpl: void applyStyle(int,boolean)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<android.content.res.ResourcesImpl$ThemeImpl: void setTo(android.content.res.ResourcesImpl$ThemeImpl)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)>
<android.content.res.ResourcesImpl$ThemeImpl: android.content.res.TypedArray obtainStyledAttributes(android.content.res.Resources$Theme,android.util.AttributeSet,int[],int,int)>
<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetrics(int,android.view.DisplayAdjustments)>
<android.content.res.ResourcesImpl$ThemeImpl: android.content.res.TypedArray resolveAttributes(android.content.res.Resources$Theme,int[],int[])>
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>
<java.util.zip.Inflater: void setInput(byte[],int,int)>
<android.content.res.ResourcesImpl$ThemeImpl: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.app.ResourcesManager: android.content.res.AssetManager createAssetManager(android.content.res.ResourcesKey)>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeEmojiInput$4$CreateProfileActivity(android.view.View)>
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeEmojiInput$6$CreateProfileActivity(android.view.View)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeResources$0$CreateProfileActivity(android.view.View)>
<java.io.File: boolean renameTo(java.io.File)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeResources$1$CreateProfileActivity(android.view.View)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeResources$2$CreateProfileActivity(android.view.View)>
<org.thoughtcrime.securesms.CreateProfileActivity: void lambda$initializeResources$3$CreateProfileActivity(android.view.View)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet set(int,int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet set(android.icu.text.UnicodeSet)>
<java.io.File: boolean setWritable(boolean,boolean)>
<android.widget.TextView$CharWrapper: void set(char[],int,int)>
<java.io.File: boolean setExecutable(boolean,boolean)>
<android.app.ResourcesManager: android.content.res.Resources createBaseActivityResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader)>
<java.io.File: int compareTo(java.io.File)>
<android.icu.impl.RuleCharacterIterator: int next(int)>
<android.icu.impl.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>
<android.icu.impl.RuleCharacterIterator: void setPos(java.lang.Object)>
<android.icu.impl.RuleCharacterIterator: void skipIgnored(int)>
<com.github.chrisbanes.photoview.PhotoViewAttacher$1: void onDrag(float,float)>
<android.icu.impl.RuleCharacterIterator: void jumpahead(int)>
<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader)>
<com.github.chrisbanes.photoview.PhotoViewAttacher$1: void onFling(float,float,float,float)>
<android.support.v4.app.FragmentManagerImpl: void addBackStackState(android.support.v4.app.BackStackRecord)>
<android.support.v4.app.FragmentManagerImpl: void addFragment(android.support.v4.app.Fragment,boolean)>
<android.app.ResourcesManager: void updateResourcesForActivity(android.os.IBinder,android.content.res.Configuration)>
<com.github.chrisbanes.photoview.PhotoViewAttacher$1: void onScale(float,float,float)>
<com.fasterxml.jackson.core.util.TextBuffer: void append(java.lang.String,int,int)>
<com.fasterxml.jackson.core.util.TextBuffer: void append(char[],int,int)>
<android.support.v4.app.FragmentManagerImpl: int allocBackStackIndex(android.support.v4.app.BackStackRecord)>
<com.google.protobuf.DynamicMessage$Builder: boolean hasField(com.google.protobuf.Descriptors$FieldDescriptor)>
<android.icu.text.UnicodeSet: void addMatchSetTo(android.icu.text.UnicodeSet)>
<android.support.v4.app.FragmentManagerImpl: void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(int,int)>
<android.support.v4.app.FragmentManagerImpl: void attachFragment(android.support.v4.app.Fragment)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(int)>
<android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet add(java.lang.CharSequence)>
<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(char[],int,int)>
<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>
<com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>
<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>
<android.support.v4.app.FragmentManagerImpl: void detachFragment(android.support.v4.app.Fragment)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames$FactoryImpl: android.icu.text.TimeZoneNames getTimeZoneNames(android.icu.util.ULocale)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean isDefaultDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)>
<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean isDefaultKeyDeserializer(com.fasterxml.jackson.databind.KeyDeserializer)>
<android.support.v4.app.BackStackState$1: android.support.v4.app.BackStackState createFromParcel(android.os.Parcel)>
<android.support.v4.app.BackStackState$1: android.support.v4.app.BackStackState[] newArray(int)>
<android.support.v4.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.support.v4.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement(int,int)>
<com.soundcloud.android.crop.CropImageView: void postTranslate(float,float)>
<com.soundcloud.android.crop.CropImageView: void setImageRotateBitmapResetBase(com.soundcloud.android.crop.RotateBitmap,boolean)>
<android.icu.text.UnicodeSet: boolean contains(int)>
<com.soundcloud.android.crop.CropImageView: void zoomTo(float,float,float)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)>
<android.icu.text.UnicodeSet: boolean contains(java.lang.CharSequence)>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)>
<org.thoughtcrime.securesms.database.EncryptingSmsDatabase$PlaintextCache: java.lang.String get(java.lang.String)>
<org.thoughtcrime.securesms.database.EncryptingSmsDatabase$PlaintextCache: void put(java.lang.String,java.lang.String)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)>
<android.icu.text.UnicodeSet: boolean containsAll(java.lang.String)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder addAllPreviousSessions(java.lang.Iterable)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet addAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet retainAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet removeAll(android.icu.text.UnicodeSet)>
<android.icu.text.UnicodeSet: int getRangeStart(int)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)>
<android.icu.text.UnicodeSet: int getRangeEnd(int)>
<com.nineoldandroids.animation.KeyframeSet: void setEvaluator(com.nineoldandroids.animation.TypeEvaluator)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,android.icu.text.SymbolTable,int)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)>
<android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>
<android.support.v4.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>
<org.thoughtcrime.securesms.mms.SlideDeck: void addSlide(org.thoughtcrime.securesms.mms.Slide)>
<android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(int,float[])>
<java.io.ObjectStreamClass$4: int compare(java.io.ObjectStreamClass$MemberSignature,java.io.ObjectStreamClass$MemberSignature)>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder setCurrentSession(org.whispersystems.libsignal.state.StorageProtos$SessionStructure)>
<android.app.Activity: void setContentView(int)>
<com.google.android.mms.pdu_alt.EncodedStringValue: void appendTextString(byte[])>
<android.support.v4.app.FragmentManagerImpl: void enqueueAction(android.support.v4.app.FragmentManagerImpl$OpGenerator,boolean)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator,com.fasterxml.jackson.annotation.ObjectIdResolver)>
<android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)>
<com.google.android.mms.pdu_alt.EncodedStringValue: void setTextString(byte[])>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentById(int)>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentByTag(java.lang.String)>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentByWho(java.lang.String)>
<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>
<com.nineoldandroids.animation.AnimatorSet$Node: void addDependency(com.nineoldandroids.animation.AnimatorSet$Dependency)>
<android.support.v4.app.FragmentManagerImpl: void freeBackStackIndex(int)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean _add(java.lang.annotation.Annotation)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean add(java.lang.annotation.Annotation)>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean addIfNotPresent(java.lang.annotation.Annotation)>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: java.lang.annotation.Annotation get(java.lang.Class)>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring handleUnresolvedReference(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: void put(java.lang.Object,java.lang.Object)>
<android.support.v4.app.FragmentManagerImpl: void hideFragment(android.support.v4.app.Fragment)>
<android.support.v4.app.FragmentManagerImpl: boolean isStateAtLeast(int)>
<android.graphics.drawable.StateListDrawable: void addState(int[],android.graphics.drawable.Drawable)>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: void requestPermissions(java.lang.String[],int)>
<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>
<android.graphics.drawable.StateListDrawable: int[] extractStateSet(android.util.AttributeSet)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyIntPropertyValue(int,int)>
<android.support.v4.app.FragmentManagerImpl: void makeActive(android.support.v4.app.Fragment)>
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,android.icu.text.SymbolTable)>
<android.graphics.drawable.StateListDrawable: int getStateDrawableIndex(int[])>
<android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)>
<android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)>
<android.icu.impl.ICUResourceBundleReader$Table: java.lang.String getKey(android.icu.impl.ICUResourceBundleReader,int)>
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>
<android.icu.impl.ICUResourceBundleReader$Table: int findTableItem(android.icu.impl.ICUResourceBundleReader,java.lang.CharSequence)>
<android.icu.impl.ICUResourceBundleReader$Table: boolean getKeyAndValue(int,android.icu.impl.UResource$Key,android.icu.impl.UResource$Value)>
<android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)>
<org.thoughtcrime.securesms.database.loaders.CountryListLoader$RegionComparator: int compare(java.util.Map,java.util.Map)>
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Activity: void startActivities(android.content.Intent[])>
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment)>
<android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)>
<org.thoughtcrime.securesms.giph.ui.GiphyActivity$1: android.net.Uri doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.giph.ui.GiphyActivity$1: void onPostExecute(android.net.Uri)>
<android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)>
<android.support.v4.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.support.v4.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet closeOver(int)>
<android.support.v4.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.support.v4.app.FragmentController: void doLoaderStop(boolean)>
<android.support.v4.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.support.v4.app.FragmentController: android.support.v4.app.Fragment findFragmentByWho(java.lang.String)>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.icu.text.UnicodeSet: int span(java.lang.CharSequence,android.icu.text.UnicodeSet$SpanCondition)>
<android.icu.text.UnicodeSet: int span(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition)>
<android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)>
<android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)>
<android.icu.text.UnicodeSet: int spanAndCount(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition,android.icu.util.OutputInt)>
<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>
<android.icu.text.UnicodeSet: int spanBack(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition)>
<com.android.mms.transaction.Observable: void attach(com.android.mms.transaction.Observer)>
<com.android.mms.transaction.Observable: void detach(com.android.mms.transaction.Observer)>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<libcore.util.ZoneInfoDB$TzData: libcore.io.BufferIterator getBufferIterator(java.lang.String)>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.support.v7.preference.PreferenceGroupAdapter$2: boolean areContentsTheSame(int,int)>
<android.support.v7.preference.PreferenceGroupAdapter$2: boolean areItemsTheSame(int,int)>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: void setClipRect(android.graphics.Rect)>
<android.view.animation.Transformation: void setClipRect(int,int,int,int)>
<com.google.protobuf.DescriptorProtos$ServiceOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: int addTransition(int,int,android.graphics.drawable.Drawable,boolean)>
<com.android.internal.widget.ActionBarContextView: void setSplitToolbar(boolean)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: int addStateSet(int[],android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: int indexOfKeyframe(int[])>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: int getKeyframeIdAt(int)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: int indexOfTransition(int,int)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: boolean isTransitionReversed(int,int)>
<android.app.Activity: void setVolumeControlStream(int)>
<android.graphics.drawable.AnimatedStateListDrawable$AnimatedStateListState: boolean transitionHasReversibleFlag(int,int)>
<com.android.internal.widget.ActionBarContextView: void setContentHeight(int)>
<java.lang.Class: boolean isInstance(java.lang.Object)>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<com.android.internal.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)>
<com.android.internal.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)>
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<org.thoughtcrime.securesms.webrtc.audio.BluetoothStateManager: void setWantsConnection(boolean)>
<com.android.internal.widget.ActionBarContextView: void initForMode(android.view.ActionMode)>
<org.webrtc.EglRenderer$EglSurfaceCreation: void setSurface(java.lang.Object)>
<android.app.Activity: boolean convertToTranslucent(android.app.Activity$TranslucentConversionListener,android.app.ActivityOptions)>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: boolean setAllowFds(boolean)>
<android.os.Bundle: void setDefusable(boolean)>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>
<android.icu.text.UCharacterIterator: int getText(char[])>
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>
<android.app.FragmentState: android.app.Fragment instantiate(android.app.FragmentHostCallback,android.app.Fragment,android.app.FragmentManagerNonConfig)>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)>
<com.android.internal.widget.ActionBarContextView: void setTitleOptional(boolean)>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.support.v4.app.FragmentManagerImpl: void popBackStack(int,int)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethodsUnchecked(boolean)>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
<android.support.v4.app.FragmentManagerImpl: boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int)>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields(boolean)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<android.support.v4.app.FragmentManagerImpl: void removeFragment(android.support.v4.app.Fragment)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<java.lang.Class: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>
<android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)>
<java.lang.Class: java.lang.String getDexCacheString(com.android.dex.Dex,int)>
<java.lang.Class: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>
<java.util.logging.Logger: void setLogManager(java.util.logging.LogManager)>
<java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay: void setActiveCall(java.lang.String)>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay: void setIncomingCallActionListener(org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay$IncomingCallActionListener)>
<java.io.ObjectStreamClass: void getPrimFieldValues(java.lang.Object,byte[])>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<java.io.ObjectStreamClass: void setPrimFieldValues(java.lang.Object,byte[])>
<java.io.ObjectStreamClass: void getObjFieldValues(java.lang.Object,java.lang.Object[])>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: android.graphics.Point alignVideoSizeV21(int,int)>
<java.lang.String: int codePointAt(int)>
<java.io.ObjectStreamClass: void setObjFieldValues(java.lang.Object,java.lang.Object[])>
<java.lang.String: int codePointBefore(int)>
<java.lang.String: int codePointCount(int,int)>
<java.lang.String: int offsetByCodePoints(int,int)>
<java.lang.String: void getChars(char[],int)>
<java.lang.String: void getChars(int,int,char[],int)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: boolean isAudioChannelCountSupportedV21(int)>
<org.thoughtcrime.securesms.database.RecipientDatabase$BulkOperationsHandle: void setDisplayName(org.thoughtcrime.securesms.recipients.Recipient,java.lang.String)>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: boolean isAudioSampleRateSupportedV21(int)>
<java.lang.String: void getCharsNoCheck(int,int,char[],int)>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: boolean isCodecSupported(java.lang.String)>
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
<org.thoughtcrime.securesms.ConversationFragment$2$1: java.lang.Void doInBackground(org.thoughtcrime.securesms.database.model.MessageRecord[])>
<com.doomonafireball.betterpickers.datepicker.DatePicker$SavedState$1: com.doomonafireball.betterpickers.datepicker.DatePicker$SavedState createFromParcel(android.os.Parcel)>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: boolean isVideoSizeAndRateSupportedV21(int,int,double)>
<com.doomonafireball.betterpickers.datepicker.DatePicker$SavedState$1: com.doomonafireball.betterpickers.datepicker.DatePicker$SavedState[] newArray(int)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: int compareTo(java.lang.String)>
<java.lang.String: int compareToIgnoreCase(java.lang.String)>
<org.thoughtcrime.securesms.push.AccountManagerFactory$1: java.lang.Void doInBackground(java.lang.Void[])>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<org.thoughtcrime.securesms.ConversationActivity$6: java.lang.Void doInBackground(java.lang.Void[])>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.util.logging.Logger: void fine(java.lang.String)>
<java.lang.String: int indexOf(int)>
<java.lang.String: int indexOf(int,int)>
<java.lang.String: int lastIndexOf(int)>
<org.thoughtcrime.securesms.ConversationActivity$4: void onClick(int)>
<java.lang.String: int lastIndexOf(int,int)>
<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.lang.String: int indexOf(java.lang.String)>
<java.util.logging.Logger: void setUseParentHandlers(boolean)>
<java.lang.String: int indexOf(java.lang.String,int)>
<android.database.sqlite.SQLiteConnection$Operation: void describe(java.lang.StringBuilder,boolean)>
<com.fasterxml.jackson.databind.ser.impl.WritableObjectId: java.lang.Object generateId(java.lang.Object)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<android.view.GhostView: void setMatrix(android.graphics.Matrix)>
<java.lang.String: java.lang.String substring(int)>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String concat(java.lang.String)>
<java.lang.String: java.lang.String replace(char,char)>
<java.lang.String: boolean matches(java.lang.String)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<android.support.v4.app.FragmentManagerImpl: void saveFragmentViewState(android.support.v4.app.Fragment)>
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.lang.String: java.lang.String[] split(java.lang.String)>
<android.view.ActionMode: void setType(int)>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<android.support.v4.app.FragmentManagerImpl: void setBackStackIndex(int,android.support.v4.app.BackStackRecord)>
<com.fasterxml.jackson.databind.ser.impl.JsonSerializerMap: com.fasterxml.jackson.databind.JsonSerializer find(com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey)>
<org.thoughtcrime.securesms.jobs.PushSendJob: void notifyMediaMessageDeliveryFailed(android.content.Context,long)>
<com.google.i18n.phonenumbers.ShortNumberInfo: boolean isPossibleShortNumberForRegion(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>
<libcore.icu.LocaleData: java.lang.String getDateFormat(int)>
<android.support.v4.app.FragmentManagerImpl: void setPrimaryNavigationFragment(android.support.v4.app.Fragment)>
<libcore.icu.LocaleData: java.lang.String getTimeFormat(int)>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder addField(int,com.google.protobuf.UnknownFieldSet$Field)>
<android.support.v4.app.FragmentManagerImpl: void showFragment(android.support.v4.app.Fragment)>
<com.google.protobuf.UnknownFieldSet$Builder: boolean hasField(int)>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeField(int,com.google.protobuf.UnknownFieldSet$Field)>
<org.thoughtcrime.securesms.util.DynamicTheme: void onCreate(android.app.Activity)>
<org.thoughtcrime.securesms.util.DynamicTheme: void onResume(android.app.Activity)>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeFrom(com.google.protobuf.UnknownFieldSet)>
<android.icu.impl.SoftCache: java.lang.Object getInstance(java.lang.Object,java.lang.Object)>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeVarintField(int,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: boolean compareAndSetWaitStatus(int,int)>
<org.thoughtcrime.securesms.scribbles.widget.MotionView: void render(android.graphics.Canvas)>
<org.thoughtcrime.securesms.scribbles.widget.MotionView: void setMotionViewCallback(org.thoughtcrime.securesms.scribbles.widget.MotionView$MotionViewCallback)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree: void add(java.lang.String,org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree: org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo getEmoji(java.lang.CharSequence,int,int)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree: org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$Matches isEmoji(java.lang.CharSequence,int,int)>
<android.widget.PopupWindow: void setEnterTransition(android.transition.Transition)>
<android.widget.PopupWindow: void setExitTransition(android.transition.Transition)>
<android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>
<android.widget.PopupWindow: void setFocusable(boolean)>
<android.widget.PopupWindow: void setInputMethodMode(int)>
<android.widget.PopupWindow: void setSoftInputMode(int)>
<android.widget.PopupWindow: void setTouchable(boolean)>
<android.widget.PopupWindow: void setOutsideTouchable(boolean)>
<android.widget.PopupWindow: void setClippingEnabled(boolean)>
<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>
<android.widget.PopupWindow: void setAllowScrollingAnchorParent(boolean)>
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>
<android.widget.PopupWindow: void setAttachedInDecor(boolean)>
<android.widget.PopupWindow: void setWindowLayoutType(int)>
<android.widget.PopupWindow: void setTouchModal(boolean)>
<android.widget.PopupWindow: void setHeight(int)>
<android.widget.PopupWindow: void setWidth(int)>
<android.widget.PopupWindow: void setOverlapAnchor(boolean)>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: void showAtLocation(android.os.IBinder,int,int,int)>
<libcore.icu.TimeZoneNames$1: int compare(java.lang.String[],java.lang.String[])>
<libcore.icu.TimeZoneNames$1: int compare(java.lang.Object,java.lang.Object)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>
<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
<android.graphics.drawable.LayerDrawable$ChildDrawable: void setDensity(int)>
<android.support.v4.widget.SwipeRefreshLayout: boolean dispatchNestedFling(float,float,boolean)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<android.support.v4.widget.SwipeRefreshLayout: boolean dispatchNestedPreFling(float,float)>
<android.support.v4.widget.SwipeRefreshLayout: boolean dispatchNestedPreScroll(int,int,int[],int[])>
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>
<android.graphics.drawable.AnimationDrawable: void addFrame(android.graphics.drawable.Drawable,int)>
<android.support.v4.widget.SwipeRefreshLayout: boolean dispatchNestedScroll(int,int,int,int,int[])>
<org.xml.sax.InputSource: void setCharacterStream(java.io.Reader)>
<android.support.v4.widget.SwipeRefreshLayout: void moveToStart(float)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder setBody(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder setPublicKey(com.google.protobuf.ByteString)>
<android.support.v7.widget.ViewInfoStore: void addToAppearedInPreLayoutHolders(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.ViewInfoStore: void addToDisappearedInLayout(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.ViewInfoStore: void addToOldChangeHolders(long,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.ViewInfoStore: void addToPostLayout(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.ViewInfoStore: void addToPreLayout(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.ViewInfoStore: android.support.v7.widget.RecyclerView$ViewHolder getFromOldChangeHolders(long)>
<android.support.v7.widget.ViewInfoStore: boolean isDisappearing(android.support.v7.widget.RecyclerView$ViewHolder)>
<org.webrtc.CameraEnumerationAndroid$1: int diff(org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)>
<android.support.design.widget.DirectedAcyclicGraph: void addEdge(java.lang.Object,java.lang.Object)>
<android.support.v7.widget.ViewInfoStore: boolean isInPreLayout(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.ViewInfoStore: void onViewDetached(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.design.widget.DirectedAcyclicGraph: void addNode(java.lang.Object)>
<android.support.v7.widget.ViewInfoStore: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPostLayout(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.ViewInfoStore: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo popFromPreLayout(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.design.widget.DirectedAcyclicGraph: boolean contains(java.lang.Object)>
<android.support.v7.widget.ViewInfoStore: void process(android.support.v7.widget.ViewInfoStore$ProcessCallback)>
<android.support.design.widget.DirectedAcyclicGraph: java.util.List getIncomingEdges(java.lang.Object)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>
<android.support.design.widget.DirectedAcyclicGraph: java.util.List getOutgoingEdges(java.lang.Object)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)>
<android.support.design.widget.DirectedAcyclicGraph: boolean hasOutgoingEdges(java.lang.Object)>
<android.support.v4.widget.SwipeRefreshLayout: void setAnimationProgress(float)>
<android.support.v4.widget.SwipeRefreshLayout: void setColorSchemeColors(int[])>
<android.support.v4.widget.SwipeRefreshLayout: void setColorSchemeResources(int[])>
<android.support.v7.widget.ViewInfoStore: void removeFromDisappearedInLayout(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.ViewInfoStore: void removeViewHolder(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.icu.impl.LocaleIDParser: void setBaseName(java.lang.String)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.support.v4.widget.SwipeRefreshLayout: void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener)>
<android.widget.PopupWindow: void update(int,int,int,int)>
<android.support.v4.widget.SwipeRefreshLayout: void setProgressBackgroundColorSchemeColor(int)>
<org.greenrobot.eventbus.PendingPostQueue: void enqueue(org.greenrobot.eventbus.PendingPost)>
<android.support.v4.widget.SwipeRefreshLayout: void setProgressBackgroundColorSchemeResource(int)>
<android.support.v4.widget.SwipeRefreshLayout: void setRefreshing(boolean)>
<android.support.v4.widget.SwipeRefreshLayout: void setTargetOffsetTopAndBottom(int)>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<android.support.v4.widget.SwipeRefreshLayout: boolean startNestedScroll(int)>
<android.support.v4.widget.SwipeRefreshLayout: void startScaleDownAnimation(android.view.animation.Animation$AnimationListener)>
<android.icu.impl.LocaleIDParser: java.lang.String getKeywordValue(java.lang.String)>
<android.icu.impl.LocaleIDParser: void defaultKeywordValue(java.lang.String,java.lang.String)>
<android.icu.impl.LocaleIDParser: void setKeywordValue(java.lang.String,java.lang.String)>
<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal)>
<android.support.v7.app.AlertController: int getIconAttributeResId(int)>
<android.support.v4.app.NotificationCompat$BigTextStyle: android.support.v4.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence)>
<android.support.v7.app.AlertController: boolean onKeyDown(int,android.view.KeyEvent)>
<android.support.v7.app.AlertController: boolean onKeyUp(int,android.view.KeyEvent)>
<android.support.v7.app.AlertController: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message)>
<org.thoughtcrime.securesms.util.SelectedRecipientsAdapter: void setOnRecipientDeletedListener(org.thoughtcrime.securesms.util.SelectedRecipientsAdapter$OnRecipientDeletedListener)>
<android.support.v7.app.AlertController: void setCustomTitle(android.view.View)>
<android.support.v7.app.AlertController: void setIcon(int)>
<android.support.v7.app.AlertController: void setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.app.AlertController: void setMessage(java.lang.CharSequence)>
<android.support.v7.app.AlertController: void setTitle(java.lang.CharSequence)>
<android.support.v7.app.AlertController: void setView(int)>
<android.support.v7.app.AlertController: void setView(android.view.View)>
<android.support.v7.app.AlertController: void setView(android.view.View,int,int,int,int)>
<org.ccil.cowan.tagsoup.Schema: void elementType(java.lang.String,int,int,int)>
<com.nineoldandroids.animation.PreHoneycombCompat$13: java.lang.Float get(android.view.View)>
<org.ccil.cowan.tagsoup.Schema: void attribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>
<com.nineoldandroids.animation.PreHoneycombCompat$13: void setValue(android.view.View,float)>
<dagger.internal.ArrayQueue: boolean add(java.lang.Object)>
<org.ccil.cowan.tagsoup.Schema: void parent(java.lang.String,java.lang.String)>
<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>
<org.ccil.cowan.tagsoup.Schema: void entity(java.lang.String,int)>
<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String)>
<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>
<org.ccil.cowan.tagsoup.Schema: int getEntity(java.lang.String)>
<org.ccil.cowan.tagsoup.Schema: void setURI(java.lang.String)>
<org.ccil.cowan.tagsoup.Schema: void setPrefix(java.lang.String)>
<com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.List)>
<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>
<com.google.protobuf.SmallSortedMap$1: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>
<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>
<com.android.internal.view.IInputConnectionWrapper: void setInputMethodId(java.lang.String)>
<android.support.v7.view.menu.MenuAdapter: void setForceShowIcon(boolean)>
<org.thoughtcrime.securesms.ConversationListActivity$2: boolean onMenuItemActionCollapse(android.view.MenuItem)>
<org.thoughtcrime.securesms.ConversationListActivity$2: boolean onMenuItemActionExpand(android.view.MenuItem)>
<com.android.internal.view.IInputConnectionWrapper: void dispatchMessage(android.os.Message)>
<com.android.internal.view.IInputConnectionWrapper: void executeMessage(android.os.Message)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.ser.ContainerSerializer buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.google.i18n.phonenumbers.MetadataManager$1: java.io.InputStream loadMetadata(java.lang.String)>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>
<android.widget.RelativeLayout$DependencyGraph: void add(android.view.View)>
<android.widget.RelativeLayout$DependencyGraph: void getSortedViews(android.view.View[],int[])>
<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean add(java.lang.Runnable)>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer: void setListener(org.thoughtcrime.securesms.audio.AudioSlidePlayer$Listener)>
<android.view.RoundScrollbarRenderer: void drawRoundScrollbars(android.graphics.Canvas,float,android.graphics.Rect)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.ser.ContainerSerializer buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessage(int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<org.thoughtcrime.securesms.preferences.MmsPreferencesFragment$LoadApnDefaultsTask: org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.preferences.MmsPreferencesFragment$LoadApnDefaultsTask: void onPostExecute(org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.jsontype.TypeSerializer createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: java.lang.Object findFilterId(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<com.google.android.mms.pdu_alt.PduPart: void setCharset(int)>
<com.google.android.mms.pdu_alt.PduPart: void setContentDisposition(byte[])>
<android.support.v4.app.FragmentManagerState$1: android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel)>
<android.widget.VideoView$8: void onChanged(android.media.SubtitleTrack$RenderingWidget)>
<com.google.android.mms.pdu_alt.PduPart: void setContentId(byte[])>
<android.support.v4.app.FragmentManagerState$1: android.support.v4.app.FragmentManagerState[] newArray(int)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializerByLookup(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,boolean)>
<android.support.v7.widget.AppCompatSpinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.google.android.mms.pdu_alt.PduPart: void setContentLocation(byte[])>
<com.google.android.mms.pdu_alt.PduPart: void setContentTransferEncoding(byte[])>
<com.google.android.mms.pdu_alt.PduPart: void setContentType(byte[])>
<org.thoughtcrime.securesms.GroupCreateActivity$CreateMmsGroupTask: org.thoughtcrime.securesms.groups.GroupManager$GroupActionResult doInBackground(java.lang.Void[])>
<com.google.android.mms.pdu_alt.PduPart: void setData(byte[])>
<com.google.android.mms.pdu_alt.PduPart: void setDataUri(android.net.Uri)>
<com.google.android.mms.pdu_alt.PduPart: void setFilename(byte[])>
<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>
<com.google.android.mms.pdu_alt.PduPart: void setName(byte[])>
<org.thoughtcrime.securesms.GroupCreateActivity$CreateMmsGroupTask: void onPostExecute(org.thoughtcrime.securesms.groups.GroupManager$GroupActionResult)>
<org.thoughtcrime.securesms.GroupCreateActivity$CreateMmsGroupTask: void onProgressUpdate(java.lang.Void[])>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.util.Set getAvailableMetaZoneIDs(java.lang.String)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.lang.String getMetaZoneID(java.lang.String,long)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.lang.String getReferenceZoneID(java.lang.String,java.lang.String)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.lang.String getMetaZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames$NameType)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.lang.String getTimeZoneDisplayName(java.lang.String,android.icu.text.TimeZoneNames$NameType)>
<android.icu.text.TimeZoneNames$DefaultTimeZoneNames: java.util.Collection find(java.lang.CharSequence,int,java.util.EnumSet)>
<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setState(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetState(int,int)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: boolean isIndexedList(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: com.fasterxml.jackson.databind.JavaType modifyTypeByAnnotation(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<android.support.design.widget.TabLayout$Tab: android.support.design.widget.TabLayout$Tab setContentDescription(java.lang.CharSequence)>
<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>
<android.support.design.widget.TabLayout$Tab: android.support.design.widget.TabLayout$Tab setCustomView(int)>
<android.support.design.widget.TabLayout$Tab: android.support.design.widget.TabLayout$Tab setCustomView(android.view.View)>
<com.google.protobuf.DescriptorProtos$EnumOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.support.design.widget.TabLayout$Tab: android.support.design.widget.TabLayout$Tab setIcon(android.graphics.drawable.Drawable)>
<android.support.design.widget.TabLayout$Tab: void setPosition(int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: boolean usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<android.support.design.widget.TabLayout$Tab: android.support.design.widget.TabLayout$Tab setText(java.lang.CharSequence)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>
<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TileLoadTask: android.graphics.Bitmap doInBackground(java.lang.Void[])>
<android.graphics.drawable.LevelListDrawable$LevelListState: void addLevel(int,int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int indexOfLevel(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TileLoadTask: void onPostExecute(android.graphics.Bitmap)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquireShared(int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean releaseShared(int)>
<android.icu.impl.CalendarAstronomer: void setTime(long)>
<android.graphics.drawable.VectorDrawable$VFullPath$7: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$7: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: void setNonTrivialBaseType(com.fasterxml.jackson.databind.JavaType)>
<android.icu.impl.CalendarAstronomer: android.icu.impl.CalendarAstronomer$Equatorial eclipticToEquatorial(double,double)>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.ser.BeanPropertyWriter unwrappingWriter(com.fasterxml.jackson.databind.util.NameTransformer)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.icu.impl.CalendarAstronomer: double[] getSunLongitude(double)>
<android.icu.impl.CalendarAstronomer: long getSunTime(double,boolean)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.impl.CalendarAstronomer: long getSunTime(android.icu.impl.CalendarAstronomer$SolarLongitude,boolean)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap$1: void onPostExecute(java.lang.Void)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<com.google.android.mms.pdu_alt.PduPersister: android.database.Cursor getPendingMessages(long)>
<android.icu.impl.CalendarAstronomer: long getMoonTime(double,boolean)>
<android.icu.impl.CalendarAstronomer: long getMoonTime(android.icu.impl.CalendarAstronomer$MoonAge,boolean)>
<com.google.android.gms.common.zzf: com.google.android.gms.common.zzd$zza zza(android.content.pm.PackageInfo,com.google.android.gms.common.zzd$zza[])>
<android.view.animation.BaseInterpolator: void setChangingConfiguration(int)>
<org.thoughtcrime.securesms.crypto.IdentityKeyParcelable$1: org.thoughtcrime.securesms.crypto.IdentityKeyParcelable createFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.crypto.IdentityKeyParcelable$1: org.thoughtcrime.securesms.crypto.IdentityKeyParcelable[] newArray(int)>
<android.widget.FastScroller: void setStyle(int)>
<android.media.Cea608CCParser: void parse(byte[])>
<android.widget.FastScroller: void setEnabled(boolean)>
<android.widget.FastScroller: void setAlwaysShow(boolean)>
<android.widget.FastScroller: void setScrollbarPosition(int)>
<java.security.MessageDigest$Delegate: void engineUpdate(byte)>
<java.security.MessageDigest$Delegate: void engineUpdate(byte[],int,int)>
<android.widget.FastScroller: void onSizeChanged(int,int,int,int)>
<android.widget.FastScroller: void onItemCountChanged(int,int)>
<com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer: com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer withResolved(com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<android.support.v4.app.NotificationManagerCompat: void cancel(int)>
<android.support.v4.app.NotificationManagerCompat: void cancel(java.lang.String,int)>
<android.support.v4.app.NotificationManagerCompat: void notify(int,android.app.Notification)>
<android.support.v4.app.NotificationManagerCompat: void notify(java.lang.String,int,android.app.Notification)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: void addChild(char)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode getChild(char)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: boolean hasChild(char)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: void setEmoji(org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo)>
<com.android.internal.view.menu.CascadingMenuPopup$3: void onItemHoverExit(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)>
<com.android.internal.view.menu.CascadingMenuPopup$3: void onItemHoverEnter(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)>
<com.bumptech.glide.manager.RequestManagerFragment: void setParentFragmentHint(android.app.Fragment)>
<com.bumptech.glide.manager.RequestManagerFragment: void setRequestManager(com.bumptech.glide.RequestManager)>
<android.support.v7.widget.SearchView$SavedState$1: android.support.v7.widget.SearchView$SavedState createFromParcel(android.os.Parcel)>
<android.support.v7.widget.SearchView$SavedState$1: android.support.v7.widget.SearchView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.v7.widget.SearchView$SavedState$1: android.support.v7.widget.SearchView$SavedState[] newArray(int)>
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)>
<java.util.zip.CRC32: void update(int)>
<java.util.zip.CRC32: void update(byte[],int,int)>
<org.thoughtcrime.securesms.service.RegistrationService: void setRegistrationStateHandler(android.os.Handler)>
<android.support.design.widget.CoordinatorLayout$ViewElevationComparator: int compare(android.view.View,android.view.View)>
<android.widget.FastScroller: void onScroll(int,int,int)>
<android.app.BackStackRecord: void addOp(android.app.BackStackRecord$Op)>
<android.app.BackStackRecord: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>
<android.app.BackStackRecord: android.app.FragmentTransaction remove(android.app.Fragment)>
<java.nio.ByteBufferAsIntBuffer: int ix(int)>
<java.nio.ByteBufferAsIntBuffer: java.nio.IntBuffer get(int[],int,int)>
<com.google.i18n.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>
<android.app.BackStackRecord: void bumpBackStackNesting(int)>
<android.app.BackStackRecord: int commitInternal(boolean)>
<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator: com.fasterxml.jackson.databind.deser.SettableBeanProperty findCreatorProperty(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator: com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer startBuilding(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)>
<android.graphics.drawable.VectorDrawable$VGroup$4: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.graphics.drawable.VectorDrawable$VGroup$4: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.widget.FastScroller: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.FastScroller: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<android.widget.FastScroller: boolean onTouchEvent(android.view.MotionEvent)>
<org.whispersystems.jobqueue.JobManager: void add(org.whispersystems.jobqueue.Job)>
<android.app.BackStackRecord: void calculateBackFragments(android.util.SparseArray,android.util.SparseArray)>
<android.widget.Spinner: void layout(int,boolean)>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: void setHighContrastText(boolean)>
<android.widget.OverScroller$SplineOverScroller: void updateScroll(float)>
<android.graphics.Canvas: int save(int)>
<android.support.v4.util.ArrayMap: boolean retainAll(java.util.Collection)>
<android.widget.OverScroller$SplineOverScroller: void startScroll(int,int,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)>
<android.widget.OverScroller$SplineOverScroller: boolean springback(int,int,int)>
<android.widget.Spinner: int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<com.nineoldandroids.util.IntProperty: void set(java.lang.Object,java.lang.Integer)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>
<android.widget.OverScroller$SplineOverScroller: void fling(int,int,int,int,int)>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.Canvas: void scale(float,float)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void rotate(float)>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>
<android.database.AbstractWindowedCursor: void clearOrCreateWindow(java.lang.String)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.graphics.drawable.VectorDrawable$VGroup$8: void setValue(android.graphics.drawable.VectorDrawable$VGroup,float)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.graphics.drawable.VectorDrawable$VGroup$8: java.lang.Float get(android.graphics.drawable.VectorDrawable$VGroup)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: void setShadowPadding(int,int,int,int)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<org.webrtc.GlShader: int getAttribLocation(java.lang.String)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<org.webrtc.GlShader: int getUniformLocation(java.lang.String)>
<okio.Segment: okio.Segment push(okio.Segment)>
<android.graphics.Canvas: void drawColor(int)>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,int,java.nio.FloatBuffer)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,java.nio.FloatBuffer)>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker$SavedState$1: com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker$SavedState createFromParcel(android.os.Parcel)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker$SavedState$1: com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker$SavedState[] newArray(int)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.app.BackStackRecord: android.app.BackStackRecord$TransitionState popFromBackStack(boolean,android.app.BackStackRecord$TransitionState,android.util.SparseArray,android.util.SparseArray)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.animation.AnimatorListenerAdapter: void onAnimationPause(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationResume(android.animation.Animator)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<com.google.protobuf.DescriptorProtos$FieldOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<org.thoughtcrime.securesms.preferences.ChatsPreferenceFragment$TrimLengthValidationListener: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.introspect.Annotated: boolean hasAnnotation(java.lang.Class)>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<java.util.concurrent.locks.ReentrantLock$Sync: boolean nonfairTryAcquire(int)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,char[])>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.support.v7.widget.AppCompatSpinner: int compatMeasureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayAdapter: int getArrayLength(byte[])>
<android.support.design.widget.TextInputLayout$SavedState$1: android.support.design.widget.TextInputLayout$SavedState createFromParcel(android.os.Parcel)>
<android.support.design.widget.TextInputLayout$SavedState$1: android.support.design.widget.TextInputLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.design.widget.TextInputLayout$SavedState$1: android.support.design.widget.TextInputLayout$SavedState[] newArray(int)>
<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>
<android.widget.AccessibilityIterators$PageTextSegmentIterator: void initialize(android.widget.TextView)>
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>
<android.support.v7.widget.AppCompatSpinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder mergeFrom(com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart$Builder setIsExtension(boolean)>
<android.support.v7.widget.RecyclerView$SavedState$1: android.support.v7.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel)>
<android.support.v7.widget.RecyclerView$SavedState$1: android.support.v7.widget.RecyclerView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.v7.widget.RecyclerView$SavedState$1: android.support.v7.widget.RecyclerView$SavedState[] newArray(int)>
<android.icu.impl.CalendarUtil$CalendarPreferences: java.lang.String getCalendarTypeForRegion(java.lang.String)>
<com.google.android.gles_jni.EGLImpl: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<com.google.android.gles_jni.EGLImpl: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<com.google.android.gles_jni.EGLImpl: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<com.google.android.gles_jni.EGLImpl: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<com.google.android.gles_jni.EGLImpl: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<com.google.android.gles_jni.EGLImpl: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<com.google.android.gles_jni.EGLImpl: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<com.google.android.gles_jni.EGLImpl: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<android.support.v7.widget.ToolbarWidgetWrapper: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.google.android.gles_jni.EGLImpl: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<android.support.v7.widget.ToolbarWidgetWrapper: void setCollapsible(boolean)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setCustomView(android.view.View)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setDefaultNavigationContentDescription(int)>
<com.google.android.gles_jni.EGLImpl: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setDisplayOptions(int)>
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setEmbeddedTabView(android.support.v7.widget.ScrollingTabContainerView)>
<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setHomeButtonEnabled(boolean)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setIcon(int)>
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.app.LoadedApk)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setLogo(int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setLogo(android.graphics.drawable.Drawable)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setMenu(android.view.Menu,android.support.v7.view.menu.MenuPresenter$Callback)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder mergeFrom(org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer)>
<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setNavigationContentDescription(int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setNavigationContentDescription(java.lang.CharSequence)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setNavigationIcon(android.graphics.drawable.Drawable)>
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>
<android.widget.ListView$FocusSelector: android.widget.ListView$FocusSelector setupForSetSelection(int,int)>
<android.widget.ListView$FocusSelector: java.lang.Runnable setupFocusIfValid(int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setSubtitle(java.lang.CharSequence)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setTitle(java.lang.CharSequence)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setVisibility(int)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setWindowCallback(android.view.Window$Callback)>
<android.support.v7.widget.ToolbarWidgetWrapper: void setWindowTitle(java.lang.CharSequence)>
<android.support.v7.widget.ToolbarWidgetWrapper: android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setDigest(com.google.protobuf.ByteString)>
<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode awaitFulfill(java.util.concurrent.SynchronousQueue$TransferStack$SNode,boolean,long)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setFlags(int)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setId(long)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setKey(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setSize(int)>
<java.util.concurrent.SynchronousQueue$TransferStack: boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder setThumbnail(com.google.protobuf.ByteString)>
<java.util.concurrent.SynchronousQueue$TransferStack: void clean(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)>
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>
<android.support.v7.widget.GridLayout$LayoutParams: void setColumnSpecSpan(android.support.v7.widget.GridLayout$Interval)>
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<android.support.v7.widget.GridLayout$LayoutParams: void setRowSpecSpan(android.support.v7.widget.GridLayout$Interval)>
<android.animation.PropertyValuesHolder: void getPropertyValues(android.animation.PropertyValuesHolder$PropertyValues)>
<android.net.PacProxySelector: java.util.List select(java.net.URI)>
<dalvik.system.CloseGuard: void open(java.lang.String)>
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean canRunInCurrentRunState(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: void reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture)>
<android.net.PacProxySelector: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)>
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure)>
<android.support.v7.app.AppCompatDelegateImplV14$AppCompatWindowCallbackV14: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)>
<android.icu.util.EthiopicCalendar: void setAmeteAlemEra(boolean)>
<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$MuteClickedListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder mergePendingKeyExchange(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder mergePendingPreKey(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder mergeSenderChain(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setAliceBaseKey(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setLocalIdentityPublic(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setLocalRegistrationId(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setNeedsRefresh(boolean)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: void setIndex(int,boolean)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: long toPeriodTime(long)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: long toRendererTime(long)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: long updatePeriodTrackSelection(long,boolean)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: long updatePeriodTrackSelection(long,boolean,boolean[])>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setPreviousCounter(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setRemoteIdentityPublic(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setRemoteRegistrationId(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setRootKey(com.google.protobuf.ByteString)>
<android.icu.util.Calendar$WeekDataCache: android.icu.util.Calendar$WeekData createInstance(java.lang.String,java.lang.String)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Builder setSessionVersion(int)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider$1: void onSuccess(android.graphics.Bitmap)>
<org.thoughtcrime.securesms.jobs.ContextJob: void setContext(android.content.Context)>
<android.support.design.widget.ViewOffsetHelper: boolean setTopAndBottomOffset(int)>
<android.icu.impl.CharTrie: char getCodePointValue(int)>
<android.icu.impl.CharTrie: char getLeadValue(char)>
<java.security.Provider$ServiceKey: boolean matches(java.lang.String,java.lang.String)>
<android.icu.impl.CharTrie: void unserialize(java.nio.ByteBuffer)>
<android.icu.impl.CharTrie: int getSurrogateOffset(char,char)>
<com.bumptech.glide.provider.ImageHeaderParserRegistry: void add(com.bumptech.glide.load.ImageHeaderParser)>
<com.google.android.gms.common.ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.google.android.gms.common.ErrorDialogFragment: void show(android.app.FragmentManager,java.lang.String)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void getMaxShadowAndCornerPadding(android.graphics.Rect)>
<com.google.i18n.phonenumbers.MultiFileMetadataSourceImpl: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>
<com.google.i18n.phonenumbers.MultiFileMetadataSourceImpl: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void setAddPaddingForCorners(boolean)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void setColor(android.content.res.ColorStateList)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void setCornerRadius(float)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void setMaxShadowSize(float)>
<android.support.v7.widget.RoundRectDrawableWithShadow: void setShadowSize(float)>
<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser: org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$CandidateList findCandidates(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.deser.impl.ValueInjector: java.lang.Object findValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)>
<org.thoughtcrime.securesms.RegistrationProgressActivity$VerifyClickListener$1: java.lang.Integer doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.RegistrationProgressActivity$VerifyClickListener$1: void onPostExecute(java.lang.Integer)>
<java.util.concurrent.TimeUnit$5: long toNanos(long)>
<java.util.concurrent.TimeUnit$5: long toSeconds(long)>
<org.json.JSONObject: boolean has(java.lang.String)>
<java.util.concurrent.TimeUnit$5: long convert(long,java.util.concurrent.TimeUnit)>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto)>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$EnumValueOptions)>
<android.app.BackStackState: android.app.BackStackRecord instantiate(android.app.FragmentManagerImpl)>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto$Builder setNumber(int)>
<android.icu.util.ULocale$2: android.icu.util.ULocale createInstance(java.util.Locale,java.lang.Void)>
<android.support.v7.app.AppCompatViewInflater: android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean)>
<java.lang.ThreadLocal: void set(java.lang.Object)>
<android.icu.text.PluralRanges: void add(android.icu.impl.StandardPlural,android.icu.impl.StandardPlural,android.icu.impl.StandardPlural)>
<libcore.io.IoUtils$FileReader: java.lang.String toString(java.nio.charset.Charset)>
<android.widget.ScrollView: void setFillViewport(boolean)>
<com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>
<sun.security.x509.X509Key: void setKey(sun.security.util.BitArray)>
<android.icu.text.PluralRanges: int compareTo(android.icu.text.PluralRanges)>
<android.graphics.drawable.VectorDrawable$VFullPath$4: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$4: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<org.thoughtcrime.securesms.contacts.RecipientsAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.support.v7.util.DiffUtil$DiffResult: void dispatchUpdatesTo(android.support.v7.util.ListUpdateCallback)>
<org.thoughtcrime.securesms.contacts.RecipientsAdapter: java.lang.CharSequence convertToString(android.database.Cursor)>
<org.thoughtcrime.securesms.contacts.RecipientsAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.support.v7.util.DiffUtil$DiffResult: void dispatchUpdatesTo(android.support.v7.widget.RecyclerView$Adapter)>
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
<android.view.GestureDetector: void setContextClickListener(android.view.GestureDetector$OnContextClickListener)>
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<org.thoughtcrime.securesms.scribbles.multitouch.TwoFingerGestureDetector: boolean isSloppyGesture(android.view.MotionEvent)>
<android.support.v7.app.AppCompatDialog: android.view.View findViewById(int)>
<org.thoughtcrime.securesms.scribbles.multitouch.TwoFingerGestureDetector: void updateStateByEvent(android.view.MotionEvent)>
<android.support.v7.app.AppCompatDialog: void setContentView(int)>
<android.support.v7.app.AppCompatDialog: boolean supportRequestWindowFeature(int)>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<org.thoughtcrime.securesms.GroupMembersDialog: java.util.List doInBackground(java.lang.Void[])>
<android.widget.ScrollView: void smoothScrollBy(int,int)>
<org.thoughtcrime.securesms.GroupMembersDialog: void onPostExecute(java.util.List)>
<android.support.design.widget.FloatingActionButtonImpl: android.support.design.widget.CircularBorderDrawable createBorderDrawable(int,android.content.res.ColorStateList)>
<android.widget.ScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<org.thoughtcrime.securesms.scribbles.multitouch.BaseGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.support.design.widget.FloatingActionButtonImpl: void setBackgroundTintList(android.content.res.ColorStateList)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment$GiphyScrollListener: void onLoadMore(int)>
<android.support.design.widget.FloatingActionButtonImpl: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>
<android.support.design.widget.FloatingActionButtonImpl: void setElevation(float)>
<android.support.design.widget.FloatingActionButtonImpl: void setPressedTranslationZ(float)>
<com.google.android.mms.util_alt.DrmConvertSession: int close(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer)>
<android.widget.ScrollView: void fling(int)>
<android.widget.FastScroller$4: void setValue(android.view.View,int)>
<android.widget.FastScroller$4: java.lang.Integer get(android.view.View)>
<android.view.RenderNode: android.view.DisplayListCanvas start(int,int)>
<android.view.RenderNode: void end(android.view.DisplayListCanvas)>
<android.view.RenderNode: void getMatrix(android.graphics.Matrix)>
<com.google.android.mms.util_alt.DrmConvertSession: byte[] convert(byte[],int)>
<android.view.RenderNode: void getInverseMatrix(android.graphics.Matrix)>
<android.view.RenderNode: boolean setLayerType(int)>
<android.view.RenderNode: boolean setLayerPaint(android.graphics.Paint)>
<android.view.RenderNode: boolean setClipBounds(android.graphics.Rect)>
<com.dd.CircularAnimatedDrawable: void draw(android.graphics.Canvas)>
<android.view.RenderNode: boolean setClipToBounds(boolean)>
<android.view.RenderNode: boolean setProjectBackwards(boolean)>
<android.view.RenderNode: boolean setProjectionReceiver(boolean)>
<android.view.RenderNode: boolean setOutline(android.graphics.Outline)>
<android.view.RenderNode: boolean setClipToOutline(boolean)>
<android.view.RenderNode: boolean setRevealClip(boolean,float,float,float)>
<android.view.RenderNode: boolean setStaticMatrix(android.graphics.Matrix)>
<com.dd.CircularAnimatedDrawable: void setCurrentGlobalAngle(float)>
<android.view.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>
<com.dd.CircularAnimatedDrawable: void setCurrentSweepAngle(float)>
<android.view.RenderNode: boolean setAlpha(float)>
<android.view.RenderNode: boolean setHasOverlappingRendering(boolean)>
<android.view.RenderNode: boolean setElevation(float)>
<android.view.RenderNode: boolean setTranslationX(float)>
<android.view.RenderNode: boolean setTranslationY(float)>
<android.view.RenderNode: boolean setTranslationZ(float)>
<android.view.RenderNode: boolean setRotation(float)>
<android.view.RenderNode: boolean setRotationX(float)>
<android.view.RenderNode: boolean setRotationY(float)>
<android.view.RenderNode: boolean setScaleX(float)>
<android.view.RenderNode: boolean setScaleY(float)>
<android.view.RenderNode: boolean setPivotX(float)>
<android.view.RenderNode: boolean setPivotY(float)>
<android.view.RenderNode: boolean setCameraDistance(float)>
<android.view.RenderNode: boolean setLeft(int)>
<android.view.RenderNode: boolean setTop(int)>
<android.view.RenderNode: boolean setRight(int)>
<android.view.RenderNode: boolean setBottom(int)>
<android.view.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>
<android.view.RenderNode: boolean offsetLeftAndRight(int)>
<android.view.RenderNode: boolean offsetTopAndBottom(int)>
<android.view.RenderNode: void addAnimator(android.view.RenderNodeAnimator)>
<android.view.RenderNode: void registerVectorDrawableAnimator(android.graphics.drawable.AnimatedVectorDrawable$VectorDrawableAnimatorRT)>
<org.thoughtcrime.securesms.ConversationListActivity$3: java.lang.Void doInBackground(java.lang.Void[])>
<android.media.MediaPlayer$2: void onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder addFixed32(int)>
<org.thoughtcrime.securesms.database.Database: void notifyConversationListeners(long)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder addFixed64(long)>
<org.thoughtcrime.securesms.database.Database: void notifyConversationListeners(java.util.Set)>
<org.thoughtcrime.securesms.database.Database: void setNotifyConverationListListeners(android.database.Cursor)>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder setLanguageTag(android.icu.impl.locale.LanguageTag)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder addGroup(com.google.protobuf.UnknownFieldSet)>
<org.thoughtcrime.securesms.database.Database: void setNotifyConverationListeners(android.database.Cursor,long)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder addLengthDelimited(com.google.protobuf.ByteString)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder addVarint(long)>
<java.text.MessageFormat: void applyPattern(java.lang.String)>
<android.graphics.drawable.ColorDrawable: void setColor(int)>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field$Builder mergeFrom(com.google.protobuf.UnknownFieldSet$Field)>
<android.support.v7.widget.RecyclerView$5: void addView(android.view.View,int)>
<android.support.v7.widget.RecyclerView$5: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.support.v7.widget.RecyclerView$5: void detachViewFromParent(int)>
<android.support.v7.widget.RecyclerView$5: android.view.View getChildAt(int)>
<android.support.v7.widget.RecyclerView$5: android.support.v7.widget.RecyclerView$ViewHolder getChildViewHolder(android.view.View)>
<android.support.v7.widget.RecyclerView$5: int indexOfChild(android.view.View)>
<android.support.v7.widget.RecyclerView$5: void onEnteredHiddenState(android.view.View)>
<android.support.v7.widget.RecyclerView$5: void onLeftHiddenState(android.view.View)>
<android.support.v7.widget.RecyclerView$5: void removeViewAt(int)>
<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)>
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)>
<java.io.ObjectOutputStream$BlockDataOutputStream: long getUTFLength(java.lang.String)>
<android.support.v7.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(android.support.v7.view.ActionMode)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _arrayListSuperInterfaceChain(com.fasterxml.jackson.databind.type.HierarchicType)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _doFindSuperInterfaceChain(com.fasterxml.jackson.databind.type.HierarchicType,java.lang.Class)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalBaseKey(com.google.protobuf.ByteString)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalBaseKeyPrivate(com.google.protobuf.ByteString)>
<android.graphics.Bitmap: int getScaledWidth(int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalIdentityKey(com.google.protobuf.ByteString)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalIdentityKeyPrivate(com.google.protobuf.ByteString)>
<android.view.ViewTreeObserver: void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalRatchetKey(com.google.protobuf.ByteString)>
<android.view.ViewTreeObserver: void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _findSuperTypeChain(java.lang.Class,java.lang.Class)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setLocalRatchetKeyPrivate(com.google.protobuf.ByteString)>
<android.graphics.Bitmap: void setHasMipMap(boolean)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromArrayType(java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange$Builder setSequence(int)>
<android.widget.Editor$HandleView: int getOffsetAtCoordinate(android.text.Layout,int,float)>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromClass(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<android.widget.Editor$HandleView: void updatePosition(int,int,boolean,boolean)>
<org.thoughtcrime.securesms.service.KeyCachingService: void setMasterSecret(org.thoughtcrime.securesms.crypto.MasterSecret)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParamType(java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)>
<android.widget.ArrayAdapter: void add(java.lang.Object)>
<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParameterizedClass(java.lang.Class,java.util.List)>
<sun.util.logging.PlatformLogger: boolean isLoggable(int)>
<android.icu.text.ReplaceableString: char charAt(int)>
<android.icu.text.ReplaceableString: int char32At(int)>
<sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>
<android.icu.text.ReplaceableString: void getChars(int,int,char[],int)>
<android.icu.text.ReplaceableString: void replace(int,int,java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromVariable(java.lang.reflect.TypeVariable,com.fasterxml.jackson.databind.type.TypeBindings)>
<android.icu.text.ReplaceableString: void replace(int,int,char[],int,int)>
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>
<android.icu.text.ReplaceableString: void copy(int,int,int)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromWildcard(java.lang.reflect.WildcardType,com.fasterxml.jackson.databind.type.TypeBindings)>
<sun.util.logging.PlatformLogger: void warning(java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.HierarchicType _hashMapSuperInterfaceChain(com.fasterxml.jackson.databind.type.HierarchicType)>
<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>
<sun.util.calendar.BaseCalendar$Date: boolean hit(int)>
<sun.util.calendar.BaseCalendar$Date: boolean hit(long)>
<sun.util.calendar.BaseCalendar$Date: void setCache(int,long,int)>
<android.widget.ArrayAdapter: void setDropDownViewResource(int)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: boolean _inIntRange(long)>
<android.widget.ArrayAdapter: void setDropDownViewTheme(android.content.res.Resources$Theme)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.BinaryNode binaryNode(byte[])>
<android.widget.ArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.BooleanNode booleanNode(boolean)>
<sun.util.logging.PlatformLogger: void finest(java.lang.String)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(double)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(int)>
<com.android.internal.view.menu.MenuPopup: void setEpicenterBounds(android.graphics.Rect)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(long)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(java.math.BigDecimal)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(java.math.BigInteger)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>
<android.icu.text.DateFormat: void setCalendar(android.icu.util.Calendar)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class,java.lang.Class,java.lang.Class)>
<android.icu.text.DateFormat: void setTimeZone(android.icu.util.TimeZone)>
<android.icu.text.DateFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext$Type)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ValueNode pojoNode(java.lang.Object)>
<android.support.v4.widget.NestedScrollView$SavedState$1: android.support.v4.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel)>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.TextNode textNode(java.lang.String)>
<android.support.design.widget.TabLayout$TabView: void setTab(android.support.design.widget.TabLayout$Tab)>
<android.support.v4.widget.NestedScrollView$SavedState$1: android.support.v4.widget.NestedScrollView$SavedState[] newArray(int)>
<java.lang.System$PropertiesWithNonOverrideableDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo$Builder setContentRect(android.graphics.Rect)>
<java.lang.System$PropertiesWithNonOverrideableDefaults: java.lang.Object remove(java.lang.Object)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSimpleType(java.lang.Class,java.lang.Class,com.fasterxml.jackson.databind.JavaType[])>
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSimpleType(java.lang.Class,com.fasterxml.jackson.databind.JavaType[])>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType[] findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<java.util.concurrent.TimeUnit$7: long toSeconds(long)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>
<com.android.mms.service_alt.MmsRequestManager: boolean writePduToContentUri(android.net.Uri,byte[])>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>
<android.content.res.ConstantState: java.lang.Object newInstance(android.content.res.Resources)>
<android.content.res.ConstantState: java.lang.Object newInstance(android.content.res.Resources,android.content.res.Resources$Theme)>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class)>
<android.support.v4.util.LogWriter: void write(char[],int,int)>
<com.pnikosis.materialishprogress.ProgressWheel$WheelSavedState$1: com.pnikosis.materialishprogress.ProgressWheel$WheelSavedState createFromParcel(android.os.Parcel)>
<com.pnikosis.materialishprogress.ProgressWheel$WheelSavedState$1: com.pnikosis.materialishprogress.ProgressWheel$WheelSavedState[] newArray(int)>
<android.icu.text.StringReplacer: int replace(android.icu.text.Replaceable,int,int,int[])>
<com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException setUnfinishedMessage(com.google.protobuf.MessageLite)>
<android.app.ActivityThread: int getIntCoreSetting(java.lang.String,int)>
<java.util.concurrent.TimeUnit$3: long toMinutes(long)>
<java.util.concurrent.TimeUnit$3: long toDays(long)>
<android.icu.text.StringReplacer: java.lang.String toReplacerPattern(boolean)>
<java.lang.String$CaseInsensitiveComparator: int compare(java.lang.String,java.lang.String)>
<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>
<org.thoughtcrime.securesms.components.reminder.Reminder: void setDismissListener(android.view.View$OnClickListener)>
<org.thoughtcrime.securesms.components.reminder.Reminder: void setOkListener(android.view.View$OnClickListener)>
<android.graphics.drawable.VectorDrawable$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.graphics.drawable.VectorDrawable$VGroup: void updateStateFromTypedArray(android.content.res.TypedArray)>
<java.lang.String$CaseInsensitiveComparator: int compare(java.lang.Object,java.lang.Object)>
<android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo setFrom(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo setFrom(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: android.database.Cursor getCursorAtPositionOrThrow(int)>
<android.graphics.drawable.VectorDrawable$VGroup: void setRotation(float)>
<android.graphics.drawable.VectorDrawable$VGroup: void setPivotX(float)>
<android.view.Choreographer$CallbackQueue: boolean hasDueCallbacksLocked(long)>
<android.graphics.drawable.VectorDrawable$VGroup: void setPivotY(float)>
<android.view.Choreographer$CallbackQueue: android.view.Choreographer$CallbackRecord extractDueCallbacksLocked(long)>
<com.google.android.exoplayer2.ui.AspectRatioFrameLayout: void setAspectRatio(float)>
<android.graphics.drawable.VectorDrawable$VGroup: void setScaleX(float)>
<com.google.android.exoplayer2.ui.AspectRatioFrameLayout: void setResizeMode(int)>
<android.view.Choreographer$CallbackQueue: void addCallbackLocked(long,java.lang.Object,java.lang.Object)>
<android.graphics.drawable.VectorDrawable$VGroup: void setScaleY(float)>
<android.graphics.drawable.VectorDrawable$VGroup: void setTranslateX(float)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: boolean isFooterPosition(int)>
<android.view.Choreographer$CallbackQueue: void removeCallbacksLocked(java.lang.Object,java.lang.Object)>
<android.graphics.drawable.VectorDrawable$VGroup: void setTranslateY(float)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: boolean isHeaderPosition(int)>
<android.support.v4.provider.SelfDestructiveThread: void postAndReply(java.util.concurrent.Callable,android.support.v4.provider.SelfDestructiveThread$ReplyCallback)>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken reset(boolean,int,int,int)>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: void setFooterView(android.view.View)>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonParser setFeatureMask(int)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: void setHeaderView(android.view.View)>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>
<sun.security.util.ManifestDigester: sun.security.util.ManifestDigester$Entry get(java.lang.String,boolean)>
<sun.security.util.ManifestDigester: byte[] manifestDigest(java.security.MessageDigest)>
<com.android.mms.service_alt.DownloadRequest: android.net.Uri persistIfRequired(android.content.Context,int,byte[])>
<sun.security.jca.ProviderList: java.security.Provider getProvider(int)>
<com.android.mms.service_alt.DownloadRequest: void revokeUriPermission(android.content.Context)>
<com.android.mms.service_alt.DownloadRequest: boolean transferResponse(android.content.Intent,byte[])>
<sun.security.jca.ProviderList: java.security.Provider getProvider(java.lang.String)>
<sun.security.jca.ProviderList: int getIndex(java.lang.String)>
<sun.security.jca.ProviderList: java.security.Provider$Service getService(java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList: java.util.List getServices(java.lang.String,java.lang.String)>
<sun.security.jca.ProviderList: java.util.List getServices(java.util.List)>
<org.thoughtcrime.securesms.components.TransferControlView$1: void onAnimationUpdate(com.nineoldandroids.animation.ValueAnimator)>
<com.melnykov.fab.FloatingActionButton: void setColorNormal(int)>
<com.nineoldandroids.animation.PreHoneycombCompat$2: java.lang.Float get(android.view.View)>
<com.melnykov.fab.FloatingActionButton: void setColorPressed(int)>
<com.nineoldandroids.animation.PreHoneycombCompat$2: void setValue(android.view.View,float)>
<android.view.HandlerActionQueue: void post(java.lang.Runnable)>
<android.view.HandlerActionQueue: void postDelayed(java.lang.Runnable,long)>
<com.melnykov.fab.FloatingActionButton: void setColorRipple(int)>
<java.text.CharacterIteratorFieldDelegate: void formatted(java.text.Format$Field,java.lang.Object,int,int,java.lang.StringBuffer)>
<android.view.HandlerActionQueue: void removeCallbacks(java.lang.Runnable)>
<android.view.HandlerActionQueue: void executeActions(android.os.Handler)>
<java.text.CharacterIteratorFieldDelegate: java.text.AttributedCharacterIterator getIterator(java.lang.String)>
<android.media.Cea608CCWidget$CCLayout: void update(android.text.SpannableStringBuilder[])>
<com.google.protobuf.DescriptorProtos$EnumOptions$Builder: com.google.protobuf.DescriptorProtos$EnumOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$EnumOptions)>
<com.google.protobuf.DescriptorProtos$EnumOptions$Builder: com.google.protobuf.DescriptorProtos$EnumOptions$Builder setAllowAlias(boolean)>
<java.lang.reflect.Proxy$ProxyClassFactory: java.lang.Class apply(java.lang.ClassLoader,java.lang.Class[])>
<com.android.internal.widget.AbsActionBarView$VisibilityAnimListener: com.android.internal.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(int)>
<java.lang.Short: int compareTo(java.lang.Short)>
<org.thoughtcrime.securesms.service.ExpiringMessageManager: void scheduleDeletion(long,boolean,long)>
<org.thoughtcrime.securesms.service.ExpiringMessageManager: void scheduleDeletion(long,boolean,long,long)>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>
<com.google.android.mms.pdu_alt.MultimediaMessagePdu: void setDate(long)>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)>
<android.animation.AnimatorSet: void setStartDelay(long)>
<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getLocalName(int)>
<android.animation.AnimatorSet: void start(android.animation.AnimatorSet$Node)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getQName(int)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(int)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(int)>
<org.ccil.cowan.tagsoup.AttributesImpl: int getIndex(java.lang.String)>
<com.fasterxml.jackson.core.base.GeneratorBase: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>
<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)>
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)>
<sun.net.www.protocol.jar.JarFileFactory: void close(java.util.jar.JarFile)>
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttributes(org.xml.sax.Attributes)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback: int getSwipeDirs(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback: void onChildDraw(android.graphics.Canvas,android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,float,float,int,boolean)>
<org.thoughtcrime.securesms.RegistrationProgressActivity$CallClickListener$1: java.lang.Integer doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.DatabaseUpgradeActivity$DatabaseUpgradeTask: java.lang.Void doInBackground(java.lang.Integer[])>
<org.ccil.cowan.tagsoup.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.thoughtcrime.securesms.RegistrationProgressActivity$CallClickListener$1: void onPostExecute(java.lang.Integer)>
<org.ccil.cowan.tagsoup.AttributesImpl: void removeAttribute(int)>
<java.util.LinkedList: void linkLast(java.lang.Object)>
<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback: boolean onMove(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ViewHolder)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback: void onSwiped(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: void doOnClick(android.view.View)>
<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>
<org.thoughtcrime.securesms.DatabaseUpgradeActivity$DatabaseUpgradeTask: void onPostExecute(java.lang.Void)>
<java.util.LinkedList: void addFirst(java.lang.Object)>
<org.thoughtcrime.securesms.DatabaseUpgradeActivity$DatabaseUpgradeTask: void onProgressUpdate(java.lang.Double[])>
<java.util.LinkedList: void addLast(java.lang.Object)>
<java.util.LinkedList: boolean contains(java.lang.Object)>
<org.thoughtcrime.securesms.DatabaseUpgradeActivity$DatabaseUpgradeTask: void setProgress(int,int)>
<java.util.LinkedList: boolean remove(java.lang.Object)>
<java.util.LinkedList: boolean addAll(int,java.util.Collection)>
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
<java.util.LinkedList: void add(int,java.lang.Object)>
<java.util.LinkedList: java.lang.Object remove(int)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>
<org.thoughtcrime.securesms.database.DatabaseFactory$NumberMigrator: java.lang.String migrate(java.lang.String)>
<java.util.LinkedList: java.util.LinkedList$Node node(int)>
<java.util.LinkedList: int indexOf(java.lang.Object)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment$GiphyScrollListener$1: java.util.List doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment$GiphyScrollListener$1: void onPostExecute(java.util.List)>
<android.graphics.drawable.RippleComponent: void setup(float,int)>
<android.graphics.drawable.RippleComponent: void enter(boolean)>
<java.util.LinkedList: void push(java.lang.Object)>
<android.graphics.drawable.RippleComponent: boolean draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.RippleComponent: void getBounds(android.graphics.Rect)>
<com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>
<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>
<com.google.android.exoplayer2.util.StandaloneMediaClock: void setPositionUs(long)>
<sun.net.www.protocol.file.Handler: java.net.URLConnection createFileURLConnection(java.net.URL,java.io.File)>
<android.icu.impl.UBiDiProps: void addPropertyStarts(android.icu.text.UnicodeSet)>
<android.icu.impl.UBiDiProps: int getMaxValue(int)>
<android.icu.impl.UBiDiProps: int getClass(int)>
<android.icu.impl.UBiDiProps: boolean isMirrored(int)>
<android.icu.impl.UBiDiProps: boolean isBidiControl(int)>
<android.icu.impl.UBiDiProps: boolean isJoinControl(int)>
<android.icu.impl.UBiDiProps: int getJoiningType(int)>
<android.icu.impl.UBiDiProps: int getJoiningGroup(int)>
<android.icu.impl.UBiDiProps: int getPairedBracketType(int)>
<java.lang.StringBuffer: void setLength(int)>
<java.lang.StringBuffer: int codePointAt(int)>
<java.lang.StringBuffer: void setCharAt(int,char)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<com.nineoldandroids.animation.PreHoneycombCompat$8: java.lang.Float get(android.view.View)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<com.nineoldandroids.animation.PreHoneycombCompat$8: void setValue(android.view.View,float)>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<javax.crypto.Cipher$SpiAndProviderUpdater: void setCipherSpiImplAndProvider(javax.crypto.CipherSpi,java.security.Provider)>
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>
<java.lang.StringBuffer: java.lang.String substring(int)>
<java.lang.StringBuffer: java.lang.String substring(int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder mergeFrom(org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint)>
<android.media.Cea708CCWidget$ScaledLayout$1: int compare(android.graphics.Rect,android.graphics.Rect)>
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder setContent(com.google.protobuf.ByteString)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>
<java.lang.StringBuffer: int indexOf(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: long getChildId(int)>
<android.view.accessibility.AccessibilityNodeInfo: void addChildUnchecked(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<org.thoughtcrime.securesms.components.InputAwareLayout: void hideAttachedInput(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<sun.security.x509.GeneralNames: sun.security.x509.GeneralNames add(sun.security.x509.GeneralName)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>
<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>
<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>
<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>
<android.support.v7.preference.PreferenceGroupAdapter: android.support.v7.preference.Preference getItem(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>
<java.util.logging.LogManager$LogNode: void walkAndSetParent(java.util.logging.Logger)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>
<android.support.v7.preference.PreferenceGroupAdapter: void onBindViewHolder(android.support.v7.preference.PreferenceViewHolder,int)>
<android.support.v7.preference.PreferenceGroupAdapter: android.support.v7.preference.PreferenceViewHolder onCreateViewHolder(android.view.ViewGroup,int)>
<android.graphics.PointF: void set(float,float)>
<android.graphics.PointF: void set(android.graphics.PointF)>
<android.graphics.PointF: boolean equals(java.lang.Object)>
<android.support.v7.widget.RecyclerView$SmoothScroller$Action: void jumpTo(int)>
<android.support.v7.widget.RecyclerView$SmoothScroller$Action: void runIfNecessary(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.RecyclerView$SmoothScroller$Action: void update(int,int,int,android.view.animation.Interpolator)>
<java.io.PrintWriter: void print(boolean)>
<java.io.PrintWriter: void print(java.lang.Object)>
<java.io.PrintWriter: void println(boolean)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.PrintWriter: void println(java.lang.Object)>
<java.util.Base64$Decoder: byte[] decode(byte[])>
<java.util.Base64$Decoder: byte[] decode(java.lang.String)>
<org.thoughtcrime.securesms.components.ThumbnailView: void setImageResource(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.mms.GlideRequests,android.net.Uri)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumMap)>
<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>
<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumSet)>
<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure,boolean)>
<java.lang.Enum: int compareTo(java.lang.Enum)>
<android.widget.EditText: void setSelection(int)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: boolean canDropOver(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: android.support.v7.widget.RecyclerView$ViewHolder chooseDropTarget(android.support.v7.widget.RecyclerView$ViewHolder,java.util.List,int,int)>
<java.util.Locale$Cache: java.util.Locale createObject(java.util.Locale$LocaleKey)>
<org.thoughtcrime.securesms.ApplicationContext: void injectDependencies(java.lang.Object)>
<dalvik.system.profiler.PortableThreadSampler: void setDepth(int)>
<android.support.v4.app.NotificationCompat$Style: void addCompatExtras(android.os.Bundle)>
<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void entryRemoved(boolean,java.lang.String,android.database.sqlite.SQLiteConnection$PreparedStatement,android.database.sqlite.SQLiteConnection$PreparedStatement)>
<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void clearView(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: int convertToAbsoluteDirection(int,int)>
<com.google.android.exoplayer2.Timeline$Window: com.google.android.exoplayer2.Timeline$Window set(java.lang.Object,long,long,boolean,boolean,long,long,int,int,long)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: int getAbsoluteMovementFlags(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: long getAnimationDuration(android.support.v7.widget.RecyclerView,int,float,float)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: float getMoveThreshold(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: float getSwipeEscapeVelocity(float)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: float getSwipeThreshold(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: float getSwipeVelocityThreshold(float)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: boolean hasDragFlag(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.graphics.drawable.RippleForeground: void getBounds(android.graphics.Rect)>
<org.thoughtcrime.securesms.notifications.DeleteNotificationReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.graphics.drawable.RippleForeground: void move(float,float)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: int interpolateOutOfBoundsScroll(android.support.v7.widget.RecyclerView,int,int,int,long)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void onChildDrawOver(android.graphics.Canvas,android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,float,float,int,boolean)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void onDraw(android.graphics.Canvas,android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,java.util.List,int,float,float)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void onDrawOver(android.graphics.Canvas,android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,java.util.List,int,float,float)>
<android.view.View$5: void setValue(android.view.View,float)>
<android.view.View$5: java.lang.Float get(android.view.View)>
<android.support.v4.app.NotificationCompat$Style: android.widget.RemoteViews makeBigContentView(android.support.v4.app.NotificationBuilderWithBuilderAccessor)>
<android.support.v4.app.NotificationCompat$Style: android.widget.RemoteViews makeContentView(android.support.v4.app.NotificationBuilderWithBuilderAccessor)>
<android.support.v4.app.NotificationCompat$Style: android.widget.RemoteViews makeHeadsUpContentView(android.support.v4.app.NotificationBuilderWithBuilderAccessor)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void onMoved(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$ViewHolder,int,android.support.v7.widget.RecyclerView$ViewHolder,int,int,int)>
<android.support.v4.app.NotificationCompat$Style: void setBuilder(android.support.v4.app.NotificationCompat$Builder)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder mergeFrom(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected)>
<java.util.ArrayDeque: void addLast(java.lang.Object)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder setId(long)>
<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: void onSelectedChanged(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector$SimpleOnMoveGestureListener: boolean onMoveBegin(org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector)>
<org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector$SimpleOnMoveGestureListener: void onMoveEnd(org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector)>
<java.util.ArrayDeque: boolean add(java.lang.Object)>
<java.util.ArrayDeque: boolean offer(java.lang.Object)>
<org.thoughtcrime.securesms.components.identity.UntrustedSendDialog$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.text.CurrencyPluralInfo: java.lang.String getCurrencyPluralPattern(java.lang.String)>
<org.thoughtcrime.securesms.components.identity.UntrustedSendDialog$1: void onPostExecute(java.lang.Void)>
<android.icu.impl.BMPSet: boolean contains(int)>
<android.icu.text.CurrencyPluralInfo: java.lang.String select(android.icu.text.PluralRules$FixedDecimal)>
<android.icu.impl.BMPSet: int span(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition,android.icu.util.OutputInt)>
<com.fasterxml.jackson.databind.deser.CreatorProperty: com.fasterxml.jackson.databind.deser.CreatorProperty withFallbackSetter(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.view.ViewPropertyAnimator$PropertyBundle: boolean cancel(int)>
<android.icu.impl.BMPSet: int spanBack(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition)>
<android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<android.support.v7.widget.AppCompatImageHelper: void setImageResource(int)>
<android.support.v7.widget.AppCompatImageHelper: void setSupportImageTintList(android.content.res.ColorStateList)>
<android.support.v7.widget.AppCompatImageHelper: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)>
<com.nineoldandroids.animation.PreHoneycombCompat$6: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$6: void setValue(android.view.View,float)>
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
<org.thoughtcrime.securesms.database.DatabaseFactory: void onApplicationLevelUpgrade(android.content.Context,org.thoughtcrime.securesms.crypto.MasterSecret,int,org.thoughtcrime.securesms.DatabaseUpgradeActivity$DatabaseUpgradeListener)>
<sun.misc.ASCIICaseInsensitiveComparator: int compare(java.lang.String,java.lang.String)>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder setId(int)>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder setPrivateKey(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder setPublicKey(com.google.protobuf.ByteString)>
<sun.misc.ASCIICaseInsensitiveComparator: int compare(java.lang.Object,java.lang.Object)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int constructUserData(boolean,boolean)>
<org.thoughtcrime.securesms.components.camera.CameraView: void addListener(org.thoughtcrime.securesms.components.camera.CameraView$CameraViewListener)>
<android.util.TypedValue: float getFraction(float,float)>
<org.thoughtcrime.securesms.components.camera.CameraView: int getCameraPictureRotation(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM8bit(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$RingtoneChangeListener$1: java.lang.Void doInBackground(android.net.Uri[])>
<org.thoughtcrime.securesms.components.camera.CameraView: void setPreviewCallback(org.thoughtcrime.securesms.components.camera.CameraView$PreviewCallback)>
<org.thoughtcrime.securesms.components.camera.CameraView: void takePicture(android.graphics.Rect)>
<android.graphics.drawable.BitmapDrawable: void setBitmap(android.graphics.Bitmap)>
<android.support.v4.app.RemoteInput$Builder: android.support.v4.app.RemoteInput$Builder setLabel(java.lang.CharSequence)>
<android.graphics.drawable.BitmapDrawable: void setGravity(int)>
<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>
<com.klinker.android.send_message.Settings: void setAgent(java.lang.String)>
<com.klinker.android.send_message.Settings: void setDeliveryReports(boolean)>
<com.klinker.android.send_message.Settings: void setGroup(boolean)>
<com.klinker.android.send_message.Settings: void setMmsc(java.lang.String)>
<com.klinker.android.send_message.Settings: void setPort(java.lang.String)>
<com.klinker.android.send_message.Settings: void setProxy(java.lang.String)>
<com.klinker.android.send_message.Settings: void setSendLongAsMms(boolean)>
<com.klinker.android.send_message.Settings: void setSendLongAsMmsAfter(int)>
<com.klinker.android.send_message.Settings: void setSignature(java.lang.String)>
<com.klinker.android.send_message.Settings: void setSplit(boolean)>
<com.klinker.android.send_message.Settings: void setSplitCounter(boolean)>
<com.klinker.android.send_message.Settings: void setStripUnicode(boolean)>
<com.klinker.android.send_message.Settings: void setUaProfTagName(java.lang.String)>
<com.klinker.android.send_message.Settings: void setUseSystemSending(boolean)>
<com.klinker.android.send_message.Settings: void setUserProfileUrl(java.lang.String)>
<org.thoughtcrime.securesms.notifications.AndroidAutoHeardReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromBooleanCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromDoubleCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromIntCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromLongCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromObjectSettings(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.deser.CreatorProperty[],com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.deser.CreatorProperty[])>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureFromStringCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: void configureIncompleteParameter(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)>
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.lang.Integer: int compareTo(java.lang.Integer)>
<java.security.Provider: java.lang.String getProperty(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.StdValueInstantiator: com.fasterxml.jackson.databind.JsonMappingException wrapException(java.lang.Throwable)>
<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>
<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$EnumDescriptorProto)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$EnumOptions)>
<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)>
<com.bumptech.glide.TransitionOptions: com.bumptech.glide.TransitionOptions transition(com.bumptech.glide.request.transition.TransitionFactory)>
<android.icu.impl.locale.BaseLocale$Key: int compareTo(android.icu.impl.locale.BaseLocale$Key)>
<android.transition.ArcMotion: void setMinimumHorizontalAngle(float)>
<android.transition.ArcMotion: void setMinimumVerticalAngle(float)>
<android.transition.ArcMotion: void setMaximumAngle(float)>
<android.text.BoringLayout: void ellipsized(int,int)>
<com.google.android.exoplayer2.ui.SubtitlePainter: void draw(com.google.android.exoplayer2.text.Cue,boolean,com.google.android.exoplayer2.text.CaptionStyleCompat,float,float,android.graphics.Canvas,int,int,int,int)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: void onTabReselected(android.support.design.widget.TabLayout$Tab)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: void onTabSelected(android.support.design.widget.TabLayout$Tab)>
<android.support.design.widget.TabLayout$ViewPagerOnTabSelectedListener: void onTabUnselected(android.support.design.widget.TabLayout$Tab)>
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<com.nineoldandroids.animation.PreHoneycombCompat$14: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$14: void setValue(android.view.View,float)>
<org.thoughtcrime.securesms.util.AbstractCursorLoader: void deliverResult(android.database.Cursor)>
<org.thoughtcrime.securesms.util.AbstractCursorLoader: void onCanceled(android.database.Cursor)>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>
<org.thoughtcrime.securesms.components.DocumentView: void setTint(int,int)>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>
<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<libcore.io.NioBufferIterator: void seek(int)>
<libcore.io.NioBufferIterator: void skip(int)>
<libcore.io.NioBufferIterator: void readByteArray(byte[],int,int)>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<libcore.io.NioBufferIterator: void readIntArray(int[],int,int)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.graphics.drawable.Drawable: boolean setLevel(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey)>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle,android.os.UserHandle)>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder setIndex(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey$Builder setKey(com.google.protobuf.ByteString)>
<android.icu.text.DecimalFormatSymbols: void setZeroDigit(char)>
<android.icu.text.DecimalFormatSymbols: void setDigitStrings(java.lang.String[])>
<android.support.v7.view.menu.ListMenuItemView: void setCheckable(boolean)>
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparator(char)>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparatorString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparator(char)>
<android.icu.text.DecimalFormatSymbols: void setDecimalSeparatorString(java.lang.String)>
<android.support.v7.view.menu.ListMenuItemView: void setForceShowIcon(boolean)>
<android.support.v7.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)>
<android.icu.text.DecimalFormatSymbols: void setPerMillString(java.lang.String)>
<android.media.Tokenizer: void tokenize(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setPercent(char)>
<android.icu.text.DecimalFormatSymbols: void setPercentString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setDigit(char)>
<android.support.v7.view.menu.ListMenuItemView: void setShortcut(boolean,char)>
<android.icu.text.DecimalFormatSymbols: void setPatternSeparator(char)>
<android.icu.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setNaN(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setMinusSign(char)>
<android.support.v7.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)>
<android.icu.text.DecimalFormatSymbols: void setMinusSignString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setPlusSignString(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setCurrency(android.icu.util.Currency)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryDecimalSeparatorString(java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparatorString(java.lang.String)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$ViewHolder: void lambda$new$0$ContactSelectionListAdapter$ViewHolder(org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$ItemClickListener,android.view.View)>
<android.icu.text.DecimalFormatSymbols: void setExponentMultiplicationSign(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>
<android.icu.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<org.thoughtcrime.securesms.ConversationActivity$30: void onSuccess(android.util.Pair)>
<android.support.design.widget.ShadowDrawableWrapper: void setAddPaddingForCorners(boolean)>
<android.support.design.widget.ShadowDrawableWrapper: void setRotation(float)>
<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float)>
<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: void setLocales(android.os.LocaleList)>
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: com.fasterxml.jackson.databind.introspect.ObjectIdInfo withAlwaysAsId(boolean)>
<android.icu.text.DecimalFormatSymbols: android.icu.util.ULocale getLocale(android.icu.util.ULocale$Type)>
<android.icu.text.DecimalFormatSymbols: void setLocale(android.icu.util.ULocale,android.icu.util.ULocale)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<com.google.android.flexbox.FlexboxLayoutManager: int getChildHeightMeasureSpec(int,int,int)>
<com.google.android.flexbox.FlexboxLayoutManager: int getChildWidthMeasureSpec(int,int,int)>
<com.google.android.flexbox.FlexboxLayoutManager: int getDecorationLengthCrossAxis(android.view.View)>
<com.google.android.flexbox.FlexboxLayoutManager: int getDecorationLengthMainAxis(android.view.View,int,int)>
<com.google.android.flexbox.FlexboxLayoutManager: android.view.View getFlexItemAt(int)>
<org.thoughtcrime.securesms.database.ApnDatabase: org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn getDefaultApnParameters(java.lang.String,java.lang.String)>
<com.google.android.flexbox.FlexboxLayoutManager: android.view.View getReorderedFlexItemAt(int)>
<com.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>
<org.thoughtcrime.securesms.database.ApnDatabase: org.whispersystems.libsignal.util.guava.Optional getMmsConnectionParameters(java.lang.String,java.lang.String)>
<android.icu.impl.ReplaceableUCharacterIterator: int getText(char[],int)>
<com.google.android.flexbox.FlexboxLayoutManager: void onNewFlexItemAdded(android.view.View,int,int,com.google.android.flexbox.FlexLine)>
<com.google.android.flexbox.FlexboxLayoutManager: void onNewFlexLineAdded(com.google.android.flexbox.FlexLine)>
<org.thoughtcrime.securesms.mms.MediaConstraints: boolean canResize(org.thoughtcrime.securesms.attachments.Attachment)>
<org.thoughtcrime.securesms.mms.MediaConstraints: boolean isSatisfied(android.content.Context,org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.Attachment)>
<com.google.android.flexbox.FlexboxLayoutManager: void setAlignItems(int)>
<com.google.android.flexbox.FlexboxLayoutManager: void setFlexDirection(int)>
<android.support.v4.view.GestureDetectorCompat: boolean onTouchEvent(android.view.MotionEvent)>
<com.google.android.flexbox.FlexboxLayoutManager: void setFlexWrap(int)>
<com.google.android.flexbox.FlexboxLayoutManager: void updateViewCache(int,android.view.View)>
<android.icu.text.PluralRules: java.lang.String select(double)>
<android.icu.text.PluralRules: java.lang.String select(android.icu.text.PluralRules$FixedDecimal)>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: int lastIndexOf(java.lang.Object)>
<android.icu.text.PluralRules: boolean equals(android.icu.text.PluralRules)>
<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>
<com.google.android.exoplayer2.ExoPlayerImpl: void addListener(com.google.android.exoplayer2.ExoPlayer$EventListener)>
<com.google.android.exoplayer2.ExoPlayerImpl: void blockingSendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])>
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>
<android.icu.text.TimeZoneNames: java.lang.String getDisplayName(java.lang.String,android.icu.text.TimeZoneNames$NameType,long)>
<android.support.v7.widget.ActionMenuPresenter$PopupPresenterCallback: void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean)>
<android.icu.text.TimeZoneNames: java.lang.String getExemplarLocationName(java.lang.String)>
<android.support.v7.widget.ActionMenuPresenter$PopupPresenterCallback: boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder)>
<com.google.android.exoplayer2.ExoPlayerImpl: int getRendererType(int)>
<com.google.android.exoplayer2.ExoPlayerImpl: void handleEvent(android.os.Message)>
<java.util.ArrayList: boolean removeAll(java.util.Collection)>
<org.thoughtcrime.securesms.scribbles.viewmodel.TextLayer: void setFont(org.thoughtcrime.securesms.scribbles.viewmodel.Font)>
<java.util.ArrayList: java.util.List subList(int,int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder mergeChainKey(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey)>
<com.google.android.exoplayer2.ExoPlayerImpl: void prepare(com.google.android.exoplayer2.source.MediaSource)>
<com.google.android.exoplayer2.ExoPlayerImpl: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean,boolean)>
<com.google.android.exoplayer2.ExoPlayerImpl: void removeListener(com.google.android.exoplayer2.ExoPlayer$EventListener)>
<com.google.android.exoplayer2.ExoPlayerImpl: void seekTo(int,long)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain)>
<org.thoughtcrime.securesms.push.SignalServiceNetworkAccess: org.whispersystems.signalservice.internal.configuration.SignalServiceConfiguration getConfiguration(android.content.Context)>
<com.google.android.exoplayer2.ExoPlayerImpl: void sendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])>
<com.google.android.exoplayer2.ExoPlayerImpl: void setPlayWhenReady(boolean)>
<org.thoughtcrime.securesms.push.SignalServiceNetworkAccess: org.whispersystems.signalservice.internal.configuration.SignalServiceConfiguration getConfiguration(java.lang.String)>
<org.thoughtcrime.securesms.push.SignalServiceNetworkAccess: boolean isCensored(android.content.Context)>
<org.webrtc.PeerConnectionFactory: org.webrtc.AudioSource createAudioSource(org.webrtc.MediaConstraints)>
<org.thoughtcrime.securesms.push.SignalServiceNetworkAccess: boolean isCensored(java.lang.String)>
<org.webrtc.PeerConnectionFactory: org.webrtc.AudioTrack createAudioTrack(java.lang.String,org.webrtc.AudioSource)>
<org.webrtc.PeerConnectionFactory: org.webrtc.MediaStream createLocalMediaStream(java.lang.String)>
<org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)>
<org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(org.webrtc.VideoCapturer)>
<org.webrtc.PeerConnectionFactory: org.webrtc.VideoTrack createVideoTrack(java.lang.String,org.webrtc.VideoSource)>
<org.webrtc.PeerConnectionFactory: void setVideoHwAccelerationOptions(org.webrtc.EglBase$Context,org.webrtc.EglBase$Context)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder setSenderRatchetKey(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$Builder setSenderRatchetKeyPrivate(com.google.protobuf.ByteString)>
<java.nio.DirectByteBuffer: void putUnchecked(int,float[],int,int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: void setDrawerStateAndUpdate(org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$DrawerState)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: void setDrawerStateAndUpdate(org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$DrawerState,boolean)>
<org.thoughtcrime.securesms.database.Address$1: org.thoughtcrime.securesms.database.Address createFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: void setSlideOffset(int)>
<org.thoughtcrime.securesms.database.Address$1: org.thoughtcrime.securesms.database.Address[] newArray(int)>
<org.webrtc.VideoTrack: void addRenderer(org.webrtc.VideoRenderer)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void setLocation(com.fasterxml.jackson.core.JsonLocation)>
<org.webrtc.VideoTrack: void removeRenderer(org.webrtc.VideoRenderer)>
<com.pnikosis.materialishprogress.ProgressWheel: void setBarColor(int)>
<com.doomonafireball.betterpickers.hmspicker.HmsView: void setTheme(int)>
<com.doomonafireball.betterpickers.hmspicker.HmsView: void setTime(int,int,int,int,int)>
<com.pnikosis.materialishprogress.ProgressWheel: void setInstantProgress(float)>
<org.thoughtcrime.securesms.GroupCreateActivity: void onRecipientsPanelUpdate(java.util.List)>
<org.whispersystems.libpastelog.SubmitLogFragment$PopulateLogcatAsyncTask: java.lang.String doInBackground(java.lang.Void[])>
<org.whispersystems.libpastelog.SubmitLogFragment$PopulateLogcatAsyncTask: void onPostExecute(java.lang.String)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: boolean addIceCandidate(org.webrtc.IceCandidate)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: org.webrtc.DataChannel createDataChannel(java.lang.String)>
<java.util.concurrent.ArrayBlockingQueue$Itrs: void doSomeSweeping(boolean)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment$4: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: void setAudioEnabled(boolean)>
<java.util.concurrent.ArrayBlockingQueue$Itrs: void register(java.util.concurrent.ArrayBlockingQueue$Itr)>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: void setVideoEnabled(boolean)>
<com.fasterxml.jackson.databind.JavaType: void _assertSubclass(java.lang.Class,java.lang.Class)>
<sun.security.util.ByteArrayLexOrder: int compare(byte[],byte[])>
<libcore.io.ClassPathURLStreamHandler: java.net.URL getEntryUrlOrNull(java.lang.String)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType _widen(java.lang.Class)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType forcedNarrowBy(java.lang.Class)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)>
<android.support.v7.util.DiffUtil$Callback: java.lang.Object getChangePayload(int,int)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)>
<com.android.mms.service_alt.MmsConfigXmlProcessor: com.android.mms.service_alt.MmsConfigXmlProcessor setMmsConfigHandler(com.android.mms.service_alt.MmsConfigXmlProcessor$MmsConfigHandler)>
<android.icu.text.NFRule: void setBaseValue(long)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment)>
<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>
<org.thoughtcrime.securesms.BaseActionBarActivity: void setStatusBarColor(int)>
<org.thoughtcrime.securesms.BaseActionBarActivity: void startActivitySceneTransition(android.content.Intent,android.view.View,java.lang.String)>
<com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType narrowBy(java.lang.Class)>
<android.media.Cea708CCWidget$CCHandler: void processCaptionEvent(android.media.Cea708CCParser$CaptionEvent)>
<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType widenBy(java.lang.Class)>
<org.thoughtcrime.securesms.components.reminder.InviteReminder$1$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.text.NFRule: void doFormat(long,java.lang.StringBuilder,int,int)>
<android.support.v7.preference.PreferenceDialogFragmentCompat: android.view.View onCreateDialogView(android.content.Context)>
<java.io.ExpiringCache: java.lang.String get(java.lang.String)>
<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>
<android.support.v4.app.NotificationCompat$Action$Builder: android.support.v4.app.NotificationCompat$Action$Builder addRemoteInput(android.support.v4.app.RemoteInput)>
<android.icu.text.NFRule: boolean shouldRollBack(long)>
<org.thoughtcrime.securesms.MessageDetailsActivity: void lambda$onModified$0$MessageDetailsActivity(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.MessageDetailsActivity: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<java.util.concurrent.FutureTask: boolean cancel(boolean)>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<java.util.concurrent.FutureTask: void set(java.lang.Object)>
<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>
<org.thoughtcrime.securesms.util.DynamicLanguage: void onCreate(android.app.Activity)>
<org.thoughtcrime.securesms.util.DynamicLanguage: void onResume(android.app.Activity)>
<org.thoughtcrime.securesms.util.DynamicLanguage: void updateServiceLocale(android.app.Service)>
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>
<android.support.v7.view.SupportMenuInflater$MenuState: void readGroup(android.util.AttributeSet)>
<android.support.v7.view.SupportMenuInflater$MenuState: void readItem(android.util.AttributeSet)>
<android.graphics.drawable.VectorDrawable$VFullPath$5: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,int)>
<android.graphics.drawable.AnimatedStateListDrawable$FrameInterpolator: int updateFrames(android.graphics.drawable.AnimationDrawable,boolean)>
<android.graphics.drawable.VectorDrawable$VFullPath$5: java.lang.Integer get(android.graphics.drawable.VectorDrawable$VFullPath)>
<android.support.v7.view.menu.MenuPopup: void setEpicenterBounds(android.graphics.Rect)>
<sun.util.calendar.AbstractCalendar: void setEras(sun.util.calendar.Era[])>
<android.icu.util.ULocale$1: java.lang.String createInstance(java.lang.String,java.lang.Void)>
<android.support.v7.app.AppCompatActivity: void onCreateSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder)>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>
<android.support.v7.app.AppCompatActivity: void onPrepareSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder)>
<sun.util.calendar.AbstractCalendar: long getTimeOfDay(sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: long getTimeOfDayValue(sun.util.calendar.CalendarDate)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate,int)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>
<android.support.v7.app.AppCompatActivity: void setContentView(int)>
<android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)>
<android.support.v7.app.AppCompatActivity: void setTheme(int)>
<android.support.v7.app.AppCompatActivity: android.support.v7.view.ActionMode startSupportActionMode(android.support.v7.view.ActionMode$Callback)>
<sun.util.calendar.AbstractCalendar: int normalizeTime(sun.util.calendar.CalendarDate)>
<org.thoughtcrime.securesms.ShareActivity$ResolveMediaTask: android.net.Uri doInBackground(android.net.Uri[])>
<android.support.v7.app.AppCompatActivity: void supportNavigateUpTo(android.content.Intent)>
<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<android.support.v7.app.AppCompatActivity: boolean supportRequestWindowFeature(int)>
<android.support.v7.app.AppCompatActivity: boolean supportShouldUpRecreateTask(android.content.Intent)>
<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>
<android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)>
<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<org.thoughtcrime.securesms.ShareActivity$ResolveMediaTask: void onPostExecute(android.net.Uri)>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.introspect.AnnotatedParameter withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<android.support.v4.util.SparseArrayCompat: void delete(int)>
<android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)>
<android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>
<android.support.v4.util.SparseArrayCompat: int indexOfKey(int)>
<android.support.v4.util.SparseArrayCompat: int keyAt(int)>
<android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)>
<java.text.DecimalFormat: void setGroupingUsed(boolean)>
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<java.text.DecimalFormat: void setParseIntegerOnly(boolean)>
<android.support.v4.util.SparseArrayCompat: void remove(int)>
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>
<android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)>
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>
<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>
<java.text.DecimalFormat: void setMaximumFractionDigits(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.util.concurrent.Delayed)>
<java.text.DecimalFormat: void setMinimumFractionDigits(int)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: void deleteAttachmentsForMessage(long)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: int getMappedViewType(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean cancel(boolean)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: boolean isViewTypeInRange(int)>
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.lang.Object)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: org.thoughtcrime.securesms.attachments.DatabaseAttachment getAttachment(org.thoughtcrime.securesms.crypto.MasterSecret,android.database.Cursor)>
<com.soundcloud.android.crop.CropImageActivity: void addLifeCycleListener(com.soundcloud.android.crop.MonitoredActivity$LifeCycleListener)>
<com.soundcloud.android.crop.CropImageActivity: void removeLifeCycleListener(com.soundcloud.android.crop.MonitoredActivity$LifeCycleListener)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: org.thoughtcrime.securesms.attachments.DatabaseAttachment getAttachment(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.AttachmentId)>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: void setFlexGrow(float)>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: void setFlexShrink(float)>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: void setWrapBefore(boolean)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: java.util.List getAttachmentsForMessage(org.thoughtcrime.securesms.crypto.MasterSecret,long)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: java.io.InputStream getDataStream(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.attachments.AttachmentId,java.lang.String)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: java.util.List getPendingAttachments(org.thoughtcrime.securesms.crypto.MasterSecret)>
<android.support.v4.view.ViewPager$ViewPositionComparator: int compare(android.view.View,android.view.View)>
<com.google.android.gms.common.api.GoogleApiActivity: void setResultCode(int)>
<com.fasterxml.jackson.databind.deser.DeserializerCache: com.fasterxml.jackson.databind.JsonDeserializer _findCachedDeserializer(com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.scribbles.widget.entity.MotionEntity: void moveCenterTo(android.graphics.PointF)>
<android.graphics.drawable.RippleForeground$4: void setValue(android.graphics.drawable.RippleForeground,float)>
<android.graphics.drawable.RippleForeground$4: java.lang.Float get(android.graphics.drawable.RippleForeground)>
<org.thoughtcrime.securesms.database.AttachmentDatabase: void setTransferState(long,org.thoughtcrime.securesms.attachments.AttachmentId,int)>
<com.google.android.gms.maps.MapView$zzb: void getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)>
<com.google.android.gms.maps.MapView$zzb: void onEnterAmbient(android.os.Bundle)>
<com.google.android.gms.maps.MapView$zzb: void zza(com.google.android.gms.dynamic.zzf)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider$EmojiDrawable: void setBitmap(android.graphics.Bitmap)>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$ProjectionMappingCursor: int getColumnIndex(java.lang.String)>
<dagger.internal.Loader: java.lang.Object instantiate(java.lang.String,java.lang.ClassLoader)>
<dagger.internal.Loader: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$ProjectionMappingCursor: java.lang.String getString(int)>
<javax.crypto.KeyGenerator: void init(int)>
<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>
<android.support.v7.widget.AppCompatSeekBarHelper: void drawTickMarks(android.graphics.Canvas)>
<android.support.v7.widget.AppCompatSeekBarHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<android.support.v7.widget.AppCompatSeekBarHelper: void setTickMark(android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.ContactSelectionListFragment$ListClickListener: void onItemClick(org.thoughtcrime.securesms.contacts.ContactSelectionListItem)>
<android.widget.PopupWindow$4: void onTransitionEnd(android.transition.Transition)>
<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale$Key normalizeKey(sun.util.locale.BaseLocale$Key)>
<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>
<android.app.Fragment: void restoreViewState(android.os.Bundle)>
<android.app.Fragment: void setIndex(int,android.app.Fragment)>
<android.support.v4.app.NotificationCompat$BuilderExtender: android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationBuilderWithBuilderAccessor)>
<android.app.Fragment: void onHiddenChanged(boolean)>
<android.support.v7.widget.AppCompatCompoundButtonHelper: int getCompoundPaddingLeft(int)>
<android.support.v7.widget.AppCompatCompoundButtonHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<android.view.View: void initializeFadingEdgeInternal(android.content.res.TypedArray)>
<android.support.v7.widget.AppCompatCompoundButtonHelper: void setSupportButtonTintList(android.content.res.ColorStateList)>
<android.support.v7.widget.AppCompatCompoundButtonHelper: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)>
<android.view.View: void initializeScrollbarsInternal(android.content.res.TypedArray)>
<org.thoughtcrime.securesms.ConversationActivity$1: void onSuccess(java.lang.Boolean)>
<android.media.Cea608CCParser$CCMemory: void tab(int)>
<android.view.View: boolean isOnScrollbar(float,float)>
<com.google.protobuf.ExtensionRegistry: com.google.protobuf.ExtensionRegistry$ExtensionInfo findExtensionByNumber(com.google.protobuf.Descriptors$Descriptor,int)>
<android.media.Cea608CCParser$CCMemory: void rollUp(int)>
<android.view.View: boolean isOnScrollbarThumb(float,float)>
<android.app.Fragment: void onAttachFragment(android.app.Fragment)>
<android.media.Cea608CCParser$CCMemory: void writeText(java.lang.String)>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.media.Cea608CCParser$CCMemory: void writeMidRowCode(android.media.Cea608CCParser$StyleCode)>
<android.media.Cea608CCParser$CCMemory: void writePAC(android.media.Cea608CCParser$PAC)>
<android.media.Cea608CCParser$CCMemory: android.text.SpannableStringBuilder[] getStyledText(android.view.accessibility.CaptioningManager$CaptionStyle)>
<android.app.Fragment: void restoreChildFragmentState(android.os.Bundle,boolean)>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.view.View: void setScrollIndicators(int)>
<android.view.View: void setScrollIndicators(int,int)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] quoteAsString(java.lang.String)>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.view.View: boolean performContextClick(float,float)>
<android.view.View: boolean performButtonActionOnTouchDown(android.view.MotionEvent)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>
<com.nineoldandroids.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<android.view.View: void startActivityForResult(android.content.Intent,int)>
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>
<android.view.View: void setRevealOnFocusHint(boolean)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>
<android.view.View: void notifyGlobalFocusCleared(android.view.View)>
<android.app.Fragment: void performCreate(android.os.Bundle)>
<android.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.view.View: void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)>
<android.app.Fragment: void performActivityCreated(android.os.Bundle)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void droppedFrames(int,long)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<android.app.Fragment: void performConfigurationChanged(android.content.res.Configuration)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void renderedFirstFrame(android.view.Surface)>
<com.google.android.exoplayer2.video.VideoRendererEventListener$EventDispatcher: void videoSizeChanged(int,int,int,float)>
<android.app.Fragment: boolean performOptionsItemSelected(android.view.MenuItem)>
<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>
<android.app.Fragment: boolean performContextItemSelected(android.view.MenuItem)>
<android.view.View: void getBoundsOnScreen(android.graphics.Rect,boolean)>
<android.app.Fragment: void performSaveInstanceState(android.os.Bundle)>
<org.thoughtcrime.securesms.ConversationActivity$29: void onSuccess(android.util.Pair)>
<org.thoughtcrime.securesms.GroupCreateActivity$CreateSignalGroupTask: org.whispersystems.libsignal.util.guava.Optional doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.GroupCreateActivity$CreateSignalGroupTask: void onPostExecute(org.whispersystems.libsignal.util.guava.Optional)>
<com.android.internal.database.SortCursor: long getLong(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>
<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setUsesChronometer(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])>
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomBigContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$NullBitmapTracker: void remove(android.graphics.Bitmap)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])>
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setLocalOnly(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder addPerson(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setGroup(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setGroupSummary(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setSortKey(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setExtras(android.os.Bundle)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setPublicVersion(android.app.Notification)>
<android.app.Notification$Builder: android.app.Notification$Builder setFlag(int,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>
<sun.security.util.Debug: void println(java.lang.String)>
<android.view.View: boolean isVisibleToUser(android.graphics.Rect)>
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.app.Notification$Builder: void setContentMinHeight(android.widget.RemoteViews,boolean)>
<java.security.CodeSigner: boolean equals(java.lang.Object)>
<android.view.View: void setAccessibilityTraversalBefore(int)>
<android.view.View: void setAccessibilityTraversalAfter(int)>
<android.view.View: void setLabelFor(int)>
<android.view.View: void setScrollContainer(boolean)>
<android.view.View: void setKeepScreenOn(boolean)>
<android.icu.impl.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>
<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.view.View: boolean computeFitSystemWindows(android.graphics.Rect,android.graphics.Rect)>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: void getOutsets(android.graphics.Rect)>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setLayoutDirection(int)>
<android.view.View: void setHasTransientState(boolean)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void setContextClickable(boolean)>
<android.view.View: void setPressed(boolean)>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: android.view.View focusSearch(int)>
<com.google.protobuf.GeneratedMessage$FieldAccessorTable: com.google.protobuf.GeneratedMessage$FieldAccessorTable ensureFieldAccessorsInitialized(java.lang.Class,java.lang.Class)>
<android.view.View: android.view.View findUserSetNextFocus(android.view.View,int)>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<sun.security.util.DerValue: boolean isContextSpecific(byte)>
<android.view.View: void addTouchables(java.util.ArrayList)>
<sun.security.util.DerValue: boolean isConstructed(byte)>
<android.media.MediaFormat: boolean containsKey(java.lang.String)>
<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>
<android.media.MediaFormat: int getInteger(java.lang.String)>
<android.media.MediaFormat: int getInteger(java.lang.String,int)>
<android.view.View: boolean requestFocus(int)>
<org.thoughtcrime.securesms.ImportExportFragment$ExportPlaintextTask: java.lang.Integer doInBackground(java.lang.Void[])>
<android.media.MediaFormat: java.lang.String getString(java.lang.String)>
<org.thoughtcrime.securesms.ImportExportFragment$ExportPlaintextTask: void onPostExecute(java.lang.Integer)>
<android.view.View: void setAccessibilityLiveRegion(int)>
<android.media.MediaFormat: void setInteger(java.lang.String,int)>
<android.view.View: void setImportantForAccessibility(int)>
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>
<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: boolean equals(java.lang.CharSequence,int,int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void setLastChar(char)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void append(int,int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void append(java.lang.CharSequence,int,int,int,int)>
<android.view.View: void setTransitionVisibility(int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void appendZeroCC(int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: android.icu.impl.Normalizer2Impl$ReorderingBuffer append(java.lang.CharSequence,int,int)>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: android.icu.impl.Normalizer2Impl$ReorderingBuffer flushAndAppendZeroCC(java.lang.CharSequence,int,int)>
<sun.misc.CharacterEncoder: java.lang.String encodeBuffer(byte[])>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void removeSuffix(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>
<sun.security.util.DerValue: boolean equals(sun.security.util.DerValue)>
<org.thoughtcrime.securesms.components.SendButton: void onChange(org.thoughtcrime.securesms.TransportOption,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<org.thoughtcrime.securesms.components.SendButton: void onSelected(org.thoughtcrime.securesms.TransportOption)>
<java.lang.StringBuilder: int indexOf(java.lang.String)>
<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>
<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<sun.security.util.DerValue: void resetTag(byte)>
<org.whispersystems.libsignal.kdf.HKDF: byte[] deriveSecrets(byte[],byte[],int)>
<org.whispersystems.libsignal.kdf.HKDF: byte[] deriveSecrets(byte[],byte[],byte[],int)>
<java.lang.StringBuilder: java.lang.String substring(int,int)>
<java.lang.StringBuilder: java.lang.String substring(int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder constructBeanSerializerBuilder(com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.BeanPropertyWriter constructFilteredBeanWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.lang.Class[])>
<java.lang.StringBuilder: void setCharAt(int,char)>
<java.lang.StringBuilder: int offsetByCodePoints(int,int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: com.fasterxml.jackson.databind.ser.PropertyBuilder constructPropertyBuilder(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription)>
<java.lang.StringBuilder: int codePointBefore(int)>
<java.lang.StringBuilder: int codePointAt(int)>
<java.lang.StringBuilder: void setLength(int)>
<java.lang.StringBuilder: void ensureCapacity(int)>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.view.View: void getWindowDisplayFrame(android.graphics.Rect)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.util.List filterBeanProperties(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<android.view.View: void performCollectViewAttributes(android.view.View$AttachInfo,int)>
<android.view.View: void needGlobalAttributesUpdate(boolean)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>
<android.icu.text.NumberFormat: java.lang.String format(double)>
<android.icu.text.NumberFormat: java.lang.String format(long)>
<android.support.v4.view.WindowInsetsCompat: android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)>
<android.view.View: void setHovered(boolean)>
<java.util.LinkedList$ListItr: void add(java.lang.Object)>
<android.icu.text.NumberFormat: java.lang.StringBuffer format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)>
<android.view.View: void onHoverChanged(boolean)>
<com.google.android.gms.gcm.GcmListenerService$2: java.lang.Void doInBackground(java.lang.Void[])>
<sun.security.util.ManifestDigester$Entry: byte[] digest(java.security.MessageDigest)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: boolean isPotentialBeanType(java.lang.Class)>
<android.icu.text.NumberFormat: void setParseIntegerOnly(boolean)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void processViews(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)>
<sun.security.util.ManifestDigester$Entry: byte[] digestWorkaround(java.security.MessageDigest)>
<android.icu.text.NumberFormat: android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext$Type)>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void removeIgnorableTypes(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<org.whispersystems.curve25519.Curve25519: byte[] calculateAgreement(byte[],byte[])>
<org.whispersystems.curve25519.Curve25519: byte[] calculateSignature(byte[],byte[])>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: void removeSetterlessGetters(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)>
<android.app.ExitTransitionCoordinator: void startExit(int,android.content.Intent)>
<android.icu.text.NumberFormat: void setGroupingUsed(boolean)>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: void setFlags(int,int)>
<com.google.i18n.phonenumbers.internal.RegexBasedMatcher: boolean matchNationalNumber(java.lang.CharSequence,com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>
<android.view.View: void setScrollX(int)>
<android.view.View: void setScrollY(int)>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<com.dd.StrokeGradientDrawable: void setStrokeColor(int)>
<com.dd.StrokeGradientDrawable: void setStrokeWidth(int)>
<android.view.View: void setRotation(float)>
<android.graphics.drawable.RippleForeground$2: void setValue(android.graphics.drawable.RippleForeground,float)>
<android.view.View: void setRotationY(float)>
<android.graphics.drawable.RippleForeground$2: java.lang.Float get(android.graphics.drawable.RippleForeground)>
<android.view.View: void setRotationX(float)>
<android.view.View: void setScaleX(float)>
<android.view.View: void setScaleY(float)>
<android.view.View: void setPivotX(float)>
<android.view.View: void setPivotY(float)>
<android.view.View: void forceHasOverlappingRendering(boolean)>
<com.android.internal.view.menu.MenuPopupHelper: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<com.android.internal.view.menu.MenuPopupHelper: void setAnchorView(android.view.View)>
<com.android.internal.view.menu.MenuPopupHelper: void setForceShowIcon(boolean)>
<com.android.internal.view.menu.MenuPopupHelper: void setGravity(int)>
<android.view.View: void setAlpha(float)>
<com.android.internal.view.menu.MenuPopupHelper: void show(int,int)>
<android.view.View: boolean setAlphaNoInvalidation(float)>
<com.android.internal.view.menu.MenuPopupHelper: boolean tryShow(int,int)>
<android.view.View: void setTransitionAlpha(float)>
<android.view.View: void setTop(int)>
<android.support.v4.util.ArraySet: boolean add(java.lang.Object)>
<android.view.View: void setBottom(int)>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<android.view.View: void setLeft(int)>
<android.support.v7.widget.TooltipCompatHandler: boolean onHover(android.view.View,android.view.MotionEvent)>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: android.support.v7.view.ViewPropertyAnimatorCompatSet play(android.support.v4.view.ViewPropertyAnimatorCompat)>
<android.widget.ListView: void addHeaderView(android.view.View)>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: android.support.v7.view.ViewPropertyAnimatorCompatSet playSequentially(android.support.v4.view.ViewPropertyAnimatorCompat,android.support.v4.view.ViewPropertyAnimatorCompat)>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: android.support.v7.view.ViewPropertyAnimatorCompatSet setDuration(long)>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: android.support.v7.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)>
<android.view.View: void setRight(int)>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: android.support.v7.view.ViewPropertyAnimatorCompatSet setListener(android.support.v4.view.ViewPropertyAnimatorListener)>
<android.view.View: void setX(float)>
<android.view.View: void setY(float)>
<android.view.View: void setElevation(float)>
<android.view.View: void setTranslationX(float)>
<android.view.View: void setTranslationY(float)>
<com.android.internal.widget.AbsActionBarView: android.animation.Animator setupAnimatorToVisibility(int,long)>
<android.view.View: void setTranslationZ(float)>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat setGMTOffsetDigits(java.lang.String)>
<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>
<android.view.View: void setClipToOutline(boolean)>
<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>
<android.view.View: void setRevealClip(boolean,float,float,float)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetISO8601Basic(int,boolean,boolean,boolean)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetISO8601Extended(int,boolean,boolean,boolean)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetLocalizedGMT(int)>
<android.icu.text.TimeZoneFormat: java.lang.String formatOffsetShortLocalizedGMT(int)>
<android.view.View: boolean pointInView(float,float)>
<android.view.View: boolean pointInView(float,float,float)>
<android.icu.text.TimeZoneFormat: java.lang.String format(android.icu.text.TimeZoneFormat$Style,android.icu.util.TimeZone,long)>
<com.android.internal.widget.AbsActionBarView: int measureChildView(android.view.View,int,int,int)>
<android.icu.text.TimeZoneFormat: java.lang.String format(android.icu.text.TimeZoneFormat$Style,android.icu.util.TimeZone,long,android.icu.util.Output)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<com.android.internal.widget.AbsActionBarView: int positionChild(android.view.View,int,int,int,boolean)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.GestureDetector$SimpleOnGestureListener: void onShowPress(android.view.MotionEvent)>
<org.thoughtcrime.securesms.ConversationActivity$11: java.lang.Void doInBackground(java.lang.Void[])>
<android.view.View: void offsetTopAndBottom(int)>
<android.support.v4.util.ArraySet: java.lang.Object valueAt(int)>
<android.view.View: void offsetLeftAndRight(int)>
<android.support.v4.app.FragmentActivity: void doReallyStop(boolean)>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.support.v4.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.view.View: void scrollBy(int,int)>
<android.view.View: boolean awakenScrollBars(int)>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<com.google.android.gms.maps.model.zze: com.google.android.gms.maps.model.LatLng zzor(android.os.Parcel)>
<android.support.v4.app.FragmentActivity: void onAttachFragment(android.support.v4.app.Fragment)>
<com.google.android.gms.maps.model.zze: com.google.android.gms.maps.model.LatLng[] zzvw(int)>
<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>
<com.google.protobuf.RepeatedFieldBuilder: com.google.protobuf.RepeatedFieldBuilder addAllMessages(java.lang.Iterable)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty _resolveInnerClassValuedProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.view.View: void transformRect(android.graphics.Rect)>
<com.google.protobuf.RepeatedFieldBuilder: com.google.protobuf.RepeatedFieldBuilder addMessage(com.google.protobuf.GeneratedMessage)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty _resolveManagedReferenceProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.google.protobuf.UnknownFieldSet$Field: int getSerializedSize(int)>
<android.support.v4.app.FragmentActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<android.view.View: boolean post(java.lang.Runnable)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: void postOnAnimation(java.lang.Runnable)>
<com.google.protobuf.UnknownFieldSet$Field: int getSerializedSizeAsMessageSetExtension(int)>
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty _resolveUnwrappedProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty _resolvedObjectIdProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<org.thoughtcrime.securesms.contacts.RecipientsEditor$RecipientsEditorTokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>
<org.thoughtcrime.securesms.contacts.RecipientsEditor$RecipientsEditorTokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.support.v4.app.FragmentActivity: void requestPermissionsFromFragment(android.support.v4.app.Fragment,java.lang.String[],int)>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<libcore.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)>
<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>
<android.support.v4.app.FragmentActivity: void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int)>
<android.support.v4.app.FragmentActivity: void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<org.thoughtcrime.securesms.contacts.RecipientsEditor$RecipientsEditorTokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.widget.ListView: int measureHeightOfChildren(int,int,int,int,int)>
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>
<android.view.View: boolean canScrollVertically(int)>
<android.support.v4.app.FragmentActivity: void validateRequestPermissionsRequestCode(int)>
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addTransportType(int)>
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setNetworkSpecifier(java.lang.String)>
<libcore.reflect.GenericSignatureParser: void expect(char)>
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>
<android.view.View: void onDrawHorizontalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>
<android.view.View: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>
<android.view.View: void assignParent(android.view.ViewParent)>
<android.icu.text.NFRuleSet: void parseRules(java.lang.String)>
<dagger.internal.ThrowingErrorHandler: void handleErrors(java.util.List)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.google.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)>
<android.icu.text.NFRuleSet: void setNonNumericalRule(android.icu.text.NFRule)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setNumberOfLeadingZeros(int)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setPreferredDomesticCarrierCode(java.lang.String)>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber setRawInput(java.lang.String)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty findProperty(com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.SettableBeanProperty findProperty(java.lang.String)>
<android.icu.text.NFRuleSet: void format(long,java.lang.StringBuilder,int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setBitmapDecoderClass(java.lang.Class)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setDoubleTapZoomDpi(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setDoubleTapZoomScale(float)>
<android.view.View: int combineVisibility(int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(com.davemorrissey.labs.subscaleview.ImageSource)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(com.davemorrissey.labs.subscaleview.ImageSource,com.davemorrissey.labs.subscaleview.ImageSource,com.davemorrissey.labs.subscaleview.ImageViewState)>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: void setLayerPaint(android.graphics.Paint)>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<org.thoughtcrime.securesms.ConversationActivity$2: void onSuccess(java.lang.Boolean)>
<android.widget.ListView: int lookForSelectablePositionAfter(int,int,boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMaxScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumDpi(int)>
<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setOrientation(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setPanEnabled(boolean)>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.view.View: void buildDrawingCache(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setQuickScaleEnabled(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setRegionDecoderClass(java.lang.Class)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setScaleAndCenter(float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setTileBackgroundColor(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setZoomEnabled(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord(float,float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord(android.graphics.PointF)>
<android.support.v7.widget.GridLayout$Axis: int getMeasure(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(float,float)>
<com.google.android.exoplayer2.ui.SubtitleView: void onCues(java.util.List)>
<android.widget.ListView: boolean pageScroll(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(float,float,android.graphics.PointF)>
<android.support.v7.widget.GridLayout$Axis: android.support.v7.widget.GridLayout$Arc[][] groupArcsByFirstVertex(android.support.v7.widget.GridLayout$Arc[])>
<com.google.android.exoplayer2.ui.SubtitleView: void setCues(java.util.List)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(android.graphics.PointF)>
<android.widget.ListView: boolean fullScroll(int)>
<com.google.android.exoplayer2.ui.SubtitleView: void setFractionalTextSize(float)>
<com.google.android.exoplayer2.ui.SubtitleView: void setFractionalTextSize(float,boolean)>
<android.widget.RelativeLayout$LayoutParams: void addRule(int,int)>
<com.google.android.exoplayer2.ui.SubtitleView: void setStyle(com.google.android.exoplayer2.text.CaptionStyleCompat)>
<com.google.android.mms.pdu_alt.PduParser: com.google.android.mms.pdu_alt.PduHeaders parseHeaders(java.io.ByteArrayInputStream)>
<android.widget.ListView: boolean arrowScroll(int)>
<android.support.v7.widget.GridLayout$Axis: void layout(int)>
<android.support.v7.widget.GridLayout$Axis: void setCount(int)>
<android.support.v7.widget.GridLayout$Axis: void setOrderPreserved(boolean)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])>
<android.view.View: void setDisplayListProperties(android.view.RenderNode)>
<android.widget.RelativeLayout$LayoutParams: int[] getRules(int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withYieldAllowed(boolean)>
<java.lang.Long: int compareTo(java.lang.Long)>
<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)>
<org.thoughtcrime.securesms.ConversationActivity$27: java.lang.Long doInBackground(org.thoughtcrime.securesms.sms.OutgoingTextMessage[])>
<org.thoughtcrime.securesms.ConversationActivity$27: void onPostExecute(java.lang.Long)>
<com.google.android.mms.pdu_alt.PduParser: boolean parsePartHeaders(java.io.ByteArrayInputStream,com.google.android.mms.pdu_alt.PduPart,int)>
<android.media.WebVttParser: void parse(java.lang.String)>
<android.icu.impl.PatternTokenizer: android.icu.impl.PatternTokenizer setSyntaxCharacters(android.icu.text.UnicodeSet)>
<android.icu.impl.PatternTokenizer: android.icu.impl.PatternTokenizer setExtraQuotingCharacters(android.icu.text.UnicodeSet)>
<android.icu.impl.PatternTokenizer: android.icu.impl.PatternTokenizer setUsingQuote(boolean)>
<android.widget.ListView: void drawOverscrollHeader(android.graphics.Canvas,android.graphics.drawable.Drawable,android.graphics.Rect)>
<android.icu.impl.PatternTokenizer: android.icu.impl.PatternTokenizer setPattern(java.lang.String)>
<android.widget.ListView: void drawOverscrollFooter(android.graphics.Canvas,android.graphics.drawable.Drawable,android.graphics.Rect)>
<android.icu.impl.PatternTokenizer: java.lang.String quoteLiteral(java.lang.String)>
<com.google.android.mms.pdu_alt.PduParser: com.google.android.mms.pdu_alt.PduBody parseParts(java.io.ByteArrayInputStream)>
<android.icu.impl.PatternTokenizer: int next(java.lang.StringBuffer)>
<android.support.v7.view.menu.MenuDialogHelper: void show(android.os.IBinder)>
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo)>
<android.widget.ListView: void drawDivider(android.graphics.Canvas,android.graphics.Rect,int)>
<android.graphics.pdf.PdfDocument: void finishPage(android.graphics.pdf.PdfDocument$Page)>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<sun.net.ProgressMonitor: boolean shouldMeterInput(java.net.URL,java.lang.String)>
<sun.net.ProgressMonitor: void registerSource(sun.net.ProgressSource)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setDividerHeight(int)>
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>
<sun.net.ProgressMonitor: void unregisterSource(sun.net.ProgressSource)>
<sun.net.ProgressMonitor: void updateProgress(sun.net.ProgressSource)>
<android.support.v7.util.DiffUtil$1: int compare(android.support.v7.util.DiffUtil$Snake,android.support.v7.util.DiffUtil$Snake)>
<android.widget.ListView: android.view.View findViewInHeadersOrFooters(java.util.ArrayList,int)>
<android.widget.ListView: android.view.View findViewByPredicateInHeadersOrFooters(java.util.ArrayList,java.util.function.Predicate,android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$11: java.lang.Integer get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$11: void setValue(android.view.View,int)>
<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.AbsListView$FlingRunnable: void start(int)>
<android.widget.AbsListView$FlingRunnable: void startOverfling(int)>
<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>
<android.support.design.widget.TextInputLayout: void animateToExpansionFraction(float)>
<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>
<org.thoughtcrime.securesms.MediaPreviewActivity: void lambda$saveToDisk$0$MediaPreviewActivity(android.content.DialogInterface,int)>
<android.widget.ListView: android.widget.HeaderViewListAdapter wrapHeaderListAdapterInternal(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)>
<android.view.View: void onDrawForeground(android.graphics.Canvas)>
<libcore.util.ZoneInfo: int findTransitionIndex(long)>
<libcore.util.ZoneInfo: int findOffsetIndexForTimeInSeconds(long)>
<libcore.util.ZoneInfo: int findOffsetIndexForTimeInMilliseconds(long)>
<libcore.util.ZoneInfo: int getOffsetsByUtcTime(long,int[])>
<org.thoughtcrime.securesms.profiles.UnknownSenderView: void lambda$handleBlock$3$UnknownSenderView(android.content.Context,android.content.DialogInterface,int)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView: void lambda$handleProfileAccess$4$UnknownSenderView(android.content.Context,android.content.DialogInterface,int)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView: void lambda$new$0$UnknownSenderView(android.view.View)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView: void lambda$new$1$UnknownSenderView(android.view.View)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView: void lambda$new$2$UnknownSenderView(android.view.View)>
<android.view.View: void setPaddingRelative(int,int,int,int)>
<libcore.util.ZoneInfo: boolean hasSameRules(java.util.TimeZone)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: void layoutMenuItems(java.util.List,android.view.MenuItem$OnMenuItemClickListener,int)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: void show(android.graphics.Rect)>
<android.support.design.widget.TextInputLayout: void setCounterEnabled(boolean)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: void updateCoordinates(android.graphics.Rect)>
<android.view.View: void setActivated(boolean)>
<android.support.design.widget.TextInputLayout: void setCounterMaxLength(int)>
<android.view.View: boolean toGlobalMotionEvent(android.view.MotionEvent)>
<android.support.design.widget.TextInputLayout: void setError(java.lang.CharSequence)>
<android.view.View: boolean toLocalMotionEvent(android.view.MotionEvent)>
<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>
<android.support.design.widget.TextInputLayout: void setErrorEnabled(boolean)>
<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: void transformFromViewToWindowSpace(int[])>
<java.net.Inet6Address$Inet6AddressHolder: void setAddr(byte[])>
<java.net.Inet6Address$Inet6AddressHolder: void init(byte[],int)>
<java.net.Inet6Address$Inet6AddressHolder: boolean equals(java.lang.Object)>
<android.support.design.widget.TextInputLayout: void setHint(java.lang.CharSequence)>
<android.view.View: android.view.View findViewById(int)>
<android.view.View: android.view.View findViewByPredicate(java.util.function.Predicate)>
<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,java.util.function.Predicate)>
<android.support.design.widget.TextInputLayout: void setHintTextAppearance(int)>
<com.dd.CircularAnimatedDrawable$1: java.lang.Float get(com.dd.CircularAnimatedDrawable)>
<android.view.View: void setId(int)>
<com.dd.CircularAnimatedDrawable$1: void set(com.dd.CircularAnimatedDrawable,java.lang.Float)>
<android.view.View: void setIsRootNamespace(boolean)>
<android.support.design.widget.TextInputLayout: void setPasswordVisibilityToggleContentDescription(java.lang.CharSequence)>
<android.icu.impl.UCharacterName$AlgorithmName: boolean setInfo(int,int,byte,byte)>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: java.lang.Object getTag(int)>
<android.view.View: void setTag(int,java.lang.Object)>
<android.icu.impl.UCharacterName$AlgorithmName: boolean setFactor(char[])>
<android.support.design.widget.TextInputLayout: void setPasswordVisibilityToggleDrawable(android.graphics.drawable.Drawable)>
<android.icu.impl.UCharacterName$AlgorithmName: boolean setPrefix(java.lang.String)>
<android.view.View: void setTagInternal(int,java.lang.Object)>
<android.icu.impl.UCharacterName$AlgorithmName: boolean setFactorString(byte[])>
<android.icu.impl.UCharacterName$AlgorithmName: boolean contains(int)>
<android.icu.impl.UCharacterName$AlgorithmName: void appendName(int,java.lang.StringBuffer)>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.content.Context: java.lang.String getString(int)>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.icu.impl.UCharacterName$AlgorithmName: int getChar(java.lang.String)>
<android.content.Context: java.lang.String getString(int,java.lang.Object[])>
<android.content.Context: int getColor(int)>
<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>
<android.support.design.widget.TextInputLayout: void updateCounter(int)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.DrawableCache: android.graphics.drawable.Drawable getInstance(long,android.content.res.Resources,android.content.res.Resources$Theme)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>
<org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.DrawableCache: boolean shouldInvalidateEntry(android.graphics.drawable.Drawable$ConstantState,int)>
<org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)>
<android.icu.impl.UCharacterName$AlgorithmName: int add(int[],int)>
<android.support.design.widget.TextInputLayout: void updateLabelState(boolean)>
<android.support.design.widget.TextInputLayout: void updateLabelState(boolean,boolean)>
<android.view.View: void measure(int,int)>
<org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadFromBuffer(org.webrtc.VideoFrame$I420Buffer)>
<org.webrtc.SurfaceViewRenderer: void setMirror(boolean)>
<org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadYuvData(int,int,int[],java.nio.ByteBuffer[])>
<android.view.View: void setMeasuredDimension(int,int)>
<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>
<org.thoughtcrime.securesms.ConversationFragment: void lambda$onCreateView$0$ConversationFragment(android.view.View)>
<org.thoughtcrime.securesms.ConversationFragment: void lambda$onCreateView$1$ConversationFragment(android.view.View)>
<org.thoughtcrime.securesms.ConversationFragment: void lambda$scrollToLastSeenPosition$2$ConversationFragment(int)>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: java.util.List layoutMainPanelItems(java.util.List,int)>
<android.support.v7.view.menu.CascadingMenuPopup$3: void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem)>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<org.thoughtcrime.securesms.ConversationFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.support.v7.view.menu.CascadingMenuPopup$3: void onItemHoverExit(android.support.v7.view.menu.MenuBuilder,android.view.MenuItem)>
<android.view.View: void playSoundEffect(int)>
<org.thoughtcrime.securesms.ConversationFragment: void releaseOutgoingMessage(long)>
<android.view.View: boolean performHapticFeedback(int)>
<android.view.View: boolean performHapticFeedback(int,int)>
<org.thoughtcrime.securesms.ConversationFragment: void reload(org.thoughtcrime.securesms.recipients.Recipient,long)>
<org.thoughtcrime.securesms.ConversationFragment: void setLastSeen(long)>
<android.view.View: void setSystemUiVisibility(int)>
<org.thoughtcrime.securesms.ConversationFragment: long stageOutgoingMessage(org.thoughtcrime.securesms.mms.OutgoingMediaMessage)>
<org.thoughtcrime.securesms.ConversationFragment: long stageOutgoingMessage(org.thoughtcrime.securesms.sms.OutgoingTextMessage)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment$1: org.whispersystems.libsignal.fingerprint.Fingerprint doInBackground(java.lang.Void[])>
<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment$1: void onPostExecute(org.whispersystems.libsignal.fingerprint.Fingerprint)>
<org.thoughtcrime.securesms.database.EncryptingSmsDatabase: org.thoughtcrime.securesms.database.SmsDatabase$Reader getMessages(org.thoughtcrime.securesms.crypto.MasterSecret,int,int)>
<org.thoughtcrime.securesms.database.EncryptingSmsDatabase: long insertMessageOutbox(org.thoughtcrime.securesms.crypto.MasterSecretUnion,long,org.thoughtcrime.securesms.sms.OutgoingTextMessage,boolean,long,org.thoughtcrime.securesms.database.SmsDatabase$InsertListener)>
<org.thoughtcrime.securesms.database.EncryptingSmsDatabase: org.thoughtcrime.securesms.database.SmsDatabase$Reader readerFor(org.thoughtcrime.securesms.crypto.MasterSecret,android.database.Cursor)>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: com.fasterxml.jackson.databind.introspect.AnnotatedField withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<android.view.View: boolean callDragEventHandler(android.view.DragEvent)>
<android.support.v7.widget.RecyclerView$ViewHolder: void addChangePayload(java.lang.Object)>
<android.support.v7.widget.RecyclerView$ViewHolder: void addFlags(int)>
<android.support.v4.app.FragmentHostCallback: void doLoaderStop(boolean)>
<android.support.v4.app.FragmentHostCallback: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.support.v7.widget.RecyclerView$ViewHolder: void flagRemovedAndOffsetPosition(int,int,boolean)>
<org.thoughtcrime.securesms.components.AttachmentTypeSelector: void show(android.app.Activity,android.view.View)>
<android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)>
<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<android.widget.TextView$Drawables: boolean resolveWithLayoutDirection(int)>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean hasAnyOfTheFlags(int)>
<android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)>
<android.widget.TextView$Drawables: void setErrorDrawable(android.graphics.drawable.Drawable,android.widget.TextView)>
<android.support.v7.widget.RecyclerView$ViewHolder: void offsetPosition(int,boolean)>
<android.icu.text.AnyTransliterator$ScriptRunIterator: void adjustLimit(int)>
<android.view.View: boolean startNestedScroll(int)>
<android.support.v7.widget.RecyclerView$ViewHolder: void setFlags(int,int)>
<android.support.v7.widget.RecyclerView$ViewHolder: void setIsRecyclable(boolean)>
<android.support.v7.widget.RecyclerView$ViewHolder: void setScrapContainer(android.support.v7.widget.RecyclerView$Recycler,boolean)>
<com.google.android.exoplayer2.source.TrackGroupArray: com.google.android.exoplayer2.source.TrackGroup get(int)>
<com.google.android.exoplayer2.source.TrackGroupArray: int indexOf(com.google.android.exoplayer2.source.TrackGroup)>
<android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)>
<com.google.protobuf.SingleFieldBuilder: com.google.protobuf.SingleFieldBuilder mergeFrom(com.google.protobuf.GeneratedMessage)>
<com.google.protobuf.SingleFieldBuilder: com.google.protobuf.SingleFieldBuilder setMessage(com.google.protobuf.GeneratedMessage)>
<org.thoughtcrime.securesms.util.task.SnackbarAsyncTask$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.view.View: void setTextDirection(int)>
<org.thoughtcrime.securesms.util.task.SnackbarAsyncTask$1: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void lambda$addSticker$0$ScribbleActivity(android.graphics.Bitmap)>
<org.thoughtcrime.securesms.components.ComposeText: void setHint(java.lang.String,java.lang.CharSequence)>
<org.whispersystems.libsignal.fingerprint.NumericFingerprintGenerator: org.whispersystems.libsignal.fingerprint.Fingerprint createFor(java.lang.String,java.util.List,java.lang.String,java.util.List)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onBrushSelected(boolean)>
<android.view.View: void setTextAlignment(int)>
<org.thoughtcrime.securesms.components.ComposeText: void setMediaListener(org.thoughtcrime.securesms.components.InputPanel$MediaListener)>
<org.whispersystems.libsignal.fingerprint.NumericFingerprintGenerator: org.whispersystems.libsignal.fingerprint.Fingerprint createFor(java.lang.String,org.whispersystems.libsignal.IdentityKey,java.lang.String,org.whispersystems.libsignal.IdentityKey)>
<android.support.v7.widget.RecyclerView$4: void processAppeared(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onColorChange(int)>
<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>
<android.support.v7.widget.RecyclerView$4: void processDisappeared(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.RecyclerView$4: void processPersistent(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.RecyclerView$4: void unused(android.support.v7.widget.RecyclerView$ViewHolder)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onStickerSelected(boolean)>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onTextSelected(boolean)>
<android.view.View: void setPointerIcon(android.view.PointerIcon)>
<android.view.View: void setTransitionName(java.lang.String)>
<org.thoughtcrime.securesms.audio.AudioCodec: void start(java.io.OutputStream)>
<org.webrtc.EglBase10: void createPbufferSurface(int,int)>
<org.thoughtcrime.securesms.contacts.RecipientsEditor: void populate(java.util.List)>
<org.thoughtcrime.securesms.database.FastCursorRecyclerViewAdapter: void addFastRecord(java.lang.Object)>
<org.thoughtcrime.securesms.database.FastCursorRecyclerViewAdapter: java.lang.Object getRecordForPositionOrThrow(int)>
<org.thoughtcrime.securesms.database.FastCursorRecyclerViewAdapter: void releaseFastRecord(long)>
<android.support.v7.view.menu.BaseMenuWrapper: android.view.MenuItem getMenuItemWrapper(android.view.MenuItem)>
<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>
<android.support.v7.view.menu.BaseMenuWrapper: void internalRemoveItem(int)>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void inset(int,int)>
<android.support.v4.view.ViewPager$SavedState$1: android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel)>
<android.support.v4.view.ViewPager$SavedState$1: android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.graphics.Rect: boolean contains(int,int)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseBitmap(int,int)>
<android.support.v4.view.ViewPager$SavedState$1: android.support.v4.view.ViewPager$SavedState[] newArray(int)>
<org.thoughtcrime.securesms.database.RecipientDatabase$BulkOperationsHandle$$Lambda$0: void accept(java.lang.Object)>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void createCachedBitmapIfNeeded(int,int)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String put(java.lang.String,java.lang.String)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.Paint getPaint(android.graphics.ColorFilter)>
<com.google.zxing.common.BitArray: void appendBit(boolean)>
<com.google.zxing.common.BitArray: void appendBitArray(com.google.zxing.common.BitArray)>
<java.lang.ProcessEnvironment$StringEnvironment: byte[] toEnvironmentBlock(int[])>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<com.google.zxing.common.BitArray: void appendBits(int,int)>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.google.zxing.common.BitArray: boolean get(int)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams$1: com.google.android.flexbox.FlexboxLayoutManager$LayoutParams createFromParcel(android.os.Parcel)>
<android.support.v7.widget.helper.ItemTouchHelper$5: int onGetChildDrawingOrder(int,int)>
<org.thoughtcrime.securesms.notifications.MarkReadReceiver$$Lambda$1: java.lang.Object apply(java.lang.Object)>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams$1: com.google.android.flexbox.FlexboxLayoutManager$LayoutParams[] newArray(int)>
<com.bumptech.glide.GlideBuilder: com.bumptech.glide.Glide build(android.content.Context)>
<com.google.zxing.common.BitArray: void toBytes(int,byte[],int,int)>
<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>
<com.google.zxing.common.BitArray: void xor(com.google.zxing.common.BitArray)>
<com.bumptech.glide.GlideBuilder: com.bumptech.glide.GlideBuilder setRequestManagerFactory(com.bumptech.glide.manager.RequestManagerRetriever$RequestManagerFactory)>
<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>
<com.google.android.flexbox.FlexboxLayoutManager$SavedState$1: com.google.android.flexbox.FlexboxLayoutManager$SavedState createFromParcel(android.os.Parcel)>
<com.google.zxing.common.reedsolomon.GenericGF: com.google.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int)>
<com.google.android.flexbox.FlexboxLayoutManager$SavedState$1: com.google.android.flexbox.FlexboxLayoutManager$SavedState[] newArray(int)>
<com.google.zxing.common.reedsolomon.GenericGF: int exp(int)>
<com.google.zxing.common.reedsolomon.GenericGF: int inverse(int)>
<com.google.zxing.common.reedsolomon.GenericGF: int multiply(int,int)>
<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>
<android.support.v4.provider.FontsContractCompat$2: void onReply(android.graphics.Typeface)>
<android.support.v4.provider.FontsContractCompat$2: void onReply(java.lang.Object)>
<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>
<org.thoughtcrime.securesms.giph.util.RecyclerViewPositionHelper: android.view.View findOneVisibleChild(int,int,boolean,boolean)>
<android.content.res.ConfigurationBoundResourceCache: java.lang.Object getInstance(long,android.content.res.Resources,android.content.res.Resources$Theme)>
<android.content.res.ConfigurationBoundResourceCache: boolean shouldInvalidateEntry(android.content.res.ConstantState,int)>
<android.content.res.ConfigurationBoundResourceCache: void onConfigurationChange(int)>
<android.telecom.Log$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.app.FragmentHostCallback: android.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)>
<android.app.FragmentHostCallback: void restoreLoaderNonConfig(android.util.ArrayMap)>
<android.app.FragmentHostCallback: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<org.webrtc.Camera1Session$3: void lambda$null$0$Camera1Session$3(byte[])>
<org.webrtc.Camera1Session$3: void lambda$onPreviewFrame$1$Camera1Session$3(byte[])>
<org.thoughtcrime.securesms.ConversationListFragment$4: void executeAction(java.lang.Void)>
<org.thoughtcrime.securesms.ConversationListFragment$4: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.ConversationListFragment$4: void reverseAction(java.lang.Void)>
<android.view.View$SendViewStateChangedAccessibilityEvent: void runOrPost(int)>
<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>
<dagger.ObjectGraph$DaggerObjectGraph: java.lang.Object inject(java.lang.Object)>
<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>
<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>
<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>
<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>
<dagger.internal.Memoizer: java.lang.Object get(java.lang.Object)>
<java.lang.UNIXProcess: void processExited(int)>
<android.view.ViewTreeObserver$CopyOnWriteArray: void add(java.lang.Object)>
<android.view.ViewTreeObserver$CopyOnWriteArray: void remove(java.lang.Object)>
<org.whispersystems.libsignal.state.SessionRecord: void promoteState(org.whispersystems.libsignal.state.SessionState)>
<com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder: com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder addHmsPickerDialogHandler(com.doomonafireball.betterpickers.hmspicker.HmsPickerDialogFragment$HmsPickerDialogHandler)>
<com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder: com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder setFragmentManager(android.support.v4.app.FragmentManager)>
<com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder: com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder setStyleResId(int)>
<com.google.android.gms.maps.MapView$zza: void getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)>
<com.google.android.gms.maps.MapView$zza: void onCreate(android.os.Bundle)>
<android.widget.FastScroller$5: void setValue(android.view.View,int)>
<android.widget.FastScroller$5: java.lang.Integer get(android.view.View)>
<com.google.android.gms.maps.MapView$zza: void onEnterAmbient(android.os.Bundle)>
<com.google.android.gms.maps.MapView$zza: void onSaveInstanceState(android.os.Bundle)>
<com.nineoldandroids.animation.PreHoneycombCompat$3: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$3: void setValue(android.view.View,float)>
<android.media.SubtitleController: boolean selectTrack(android.media.SubtitleTrack)>
<android.support.design.widget.SwipeDismissBehavior: void setEndAlphaSwipeDistance(float)>
<android.support.design.widget.SwipeDismissBehavior: void setListener(android.support.design.widget.SwipeDismissBehavior$OnDismissListener)>
<android.support.design.widget.SwipeDismissBehavior: void setStartAlphaSwipeDistance(float)>
<android.support.design.widget.SwipeDismissBehavior: void setSwipeDirection(int)>
<org.thoughtcrime.securesms.giph.ui.GiphyActivity: void onFilterChanged(java.lang.String)>
<org.thoughtcrime.securesms.giph.ui.GiphyActivity: void onLayoutChanged(int)>
<android.support.v7.widget.GapWorker$1: int compare(android.support.v7.widget.GapWorker$Task,android.support.v7.widget.GapWorker$Task)>
<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>
<android.media.SubtitleController: void registerRenderer(android.media.SubtitleController$Renderer)>
<android.media.SubtitleController: void setAnchor(android.media.SubtitleController$Anchor)>
<android.media.Cea708CCWidget$CCLayout: void addOrUpdateViewToSafeTitleArea(android.media.Cea708CCWidget$CCWindowLayout,android.media.Cea708CCWidget$ScaledLayout$ScaledLayoutParams)>
<android.media.Cea708CCWidget$CCLayout: void removeViewFromSafeTitleArea(android.media.Cea708CCWidget$CCWindowLayout)>
<com.soundcloud.android.crop.RotateBitmap: void setBitmap(android.graphics.Bitmap)>
<com.soundcloud.android.crop.RotateBitmap: void setRotation(int)>
<com.nineoldandroids.animation.PreHoneycombCompat$5: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$5: void setValue(android.view.View,float)>
<android.support.v7.preference.PreferenceFragmentCompat: void addPreferencesFromResource(int)>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.preference.Preference findPreference(java.lang.CharSequence)>
<java.lang.Boolean: int compareTo(java.lang.Boolean)>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.widget.RecyclerView$Adapter onCreateAdapter(android.support.v7.preference.PreferenceScreen)>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.widget.RecyclerView onCreateRecyclerView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<org.thoughtcrime.securesms.database.RecipientDatabase: org.whispersystems.libsignal.util.guava.Optional getRecipientSettings(android.database.Cursor)>
<android.support.v4.view.AbsSavedState$2: android.support.v4.view.AbsSavedState createFromParcel(android.os.Parcel)>
<android.support.v4.view.AbsSavedState$2: android.support.v4.view.AbsSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<org.whispersystems.jobqueue.persistence.PersistentStorage: java.util.List getAllEncrypted(org.whispersystems.jobqueue.EncryptionKeys)>
<org.whispersystems.jobqueue.persistence.PersistentStorage: void remove(long)>
<android.support.v4.view.AbsSavedState$2: android.support.v4.view.AbsSavedState[] newArray(int)>
<org.thoughtcrime.securesms.database.RecipientDatabase: org.whispersystems.libsignal.util.guava.Optional getRecipientSettings(org.thoughtcrime.securesms.database.Address)>
<android.support.v7.preference.PreferenceFragmentCompat: void setDivider(android.graphics.drawable.Drawable)>
<android.support.v7.preference.PreferenceFragmentCompat: void setDividerHeight(int)>
<android.support.v7.preference.PreferenceFragmentCompat: void setPreferenceScreen(android.support.v7.preference.PreferenceScreen)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setBlocked(org.thoughtcrime.securesms.recipients.Recipient,boolean)>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setColor(org.thoughtcrime.securesms.recipients.Recipient,org.thoughtcrime.securesms.color.MaterialColor)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setDefaultSubscriptionId(org.thoughtcrime.securesms.recipients.Recipient,int)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setExpireMessages(org.thoughtcrime.securesms.recipients.Recipient,int)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setMuted(org.thoughtcrime.securesms.recipients.Recipient,long)>
<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setProfileSharing(org.thoughtcrime.securesms.recipients.Recipient,boolean)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setRegistered(java.util.List,java.util.List)>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setRegistered(org.thoughtcrime.securesms.recipients.Recipient,org.thoughtcrime.securesms.database.RecipientDatabase$RegisteredState)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setRingtone(org.thoughtcrime.securesms.recipients.Recipient,android.net.Uri)>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper: long adjustReleaseTime(long,long)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setSeenInviteReminder(org.thoughtcrime.securesms.recipients.Recipient,boolean)>
<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>
<android.support.v13.app.FragmentTabHost$SavedState$1: android.support.v13.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.database.RecipientDatabase: void setVibrate(org.thoughtcrime.securesms.recipients.Recipient,org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState)>
<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>
<android.support.v13.app.FragmentTabHost$SavedState$1: android.support.v13.app.FragmentTabHost$SavedState[] newArray(int)>
<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>
<java.io.ObjectInputStream$HandleTable: void finish(int)>
<java.io.ObjectInputStream$HandleTable: void setObject(int,java.lang.Object)>
<java.io.ObjectInputStream$HandleTable: java.lang.Object lookupObject(int)>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void onLoadCanceled(android.support.v4.content.Loader)>
<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>
<org.thoughtcrime.securesms.scribbles.viewmodel.Layer: void postTranslate(float,float)>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void onLoadComplete(android.support.v4.content.Loader,java.lang.Object)>
<android.support.v4.graphics.PathParser$PathDataNode: void interpolatePathDataNode(android.support.v4.graphics.PathParser$PathDataNode,android.support.v4.graphics.PathParser$PathDataNode,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$3: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,int)>
<android.graphics.drawable.VectorDrawable$VFullPath$3: java.lang.Integer get(android.graphics.drawable.VectorDrawable$VFullPath)>
<com.dd.CircularProgressDrawable: void draw(android.graphics.Canvas)>
<org.thoughtcrime.securesms.ConversationUpdateItem$InternalClickListener$1: void onSuccess(org.whispersystems.libsignal.util.guava.Optional)>
<com.dd.CircularProgressDrawable: void setSweepAngle(float)>
<com.fasterxml.jackson.core.io.IOContext: void _verifyAlloc(java.lang.Object)>
<com.fasterxml.jackson.core.io.IOContext: void _verifyRelease(byte[],byte[])>
<com.fasterxml.jackson.core.io.IOContext: void _verifyRelease(char[],char[])>
<com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>
<com.fasterxml.jackson.core.io.IOContext: char[] allocTokenBuffer(int)>
<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>
<com.fasterxml.jackson.core.io.IOContext: void releaseConcatBuffer(char[])>
<com.fasterxml.jackson.core.io.IOContext: void releaseNameCopyBuffer(char[])>
<com.fasterxml.jackson.core.io.IOContext: void releaseTokenBuffer(char[])>
<com.bumptech.glide.RequestManager: void clear(com.bumptech.glide.request.target.Target)>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.Class getRawParameterType(int)>
<com.bumptech.glide.RequestManager: void setRequestOptions(com.bumptech.glide.request.RequestOptions)>
<com.bumptech.glide.RequestManager: boolean untrack(com.bumptech.glide.request.target.Target)>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>
<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>
<android.widget.CursorAdapter: void init(android.content.Context,android.database.Cursor,int)>
<android.graphics.PorterDuffColorFilter: void setColor(int)>
<android.graphics.PorterDuffColorFilter: void setMode(android.graphics.PorterDuff$Mode)>
<android.widget.CursorAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<android.view.KeyEvent: char getMatch(char[],int)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: java.util.Set getAllContactsWithNumbers(android.content.Context)>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: android.database.Cursor getAllSystemContacts(android.content.Context)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: org.thoughtcrime.securesms.contacts.ContactAccessor$ContactData getContactData(android.content.Context,android.net.Uri)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: android.database.Cursor getCursorForRecipientFilter(java.lang.CharSequence,android.content.ContentResolver)>
<org.thoughtcrime.securesms.CountrySelectionFragment: void onLoadFinished(android.support.v4.content.Loader,java.util.ArrayList)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: java.lang.String getNameFromContact(android.content.Context,android.net.Uri)>
<android.icu.text.TimeZoneFormat$TimeZoneFormatCache: android.icu.text.TimeZoneFormat createInstance(android.icu.util.ULocale,android.icu.util.ULocale)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: java.util.List getNumbersForThreadSearchFilter(android.content.Context,java.lang.String)>
<org.webrtc.AndroidVideoTrackSourceObserver: void onByteBufferFrameCaptured(byte[],int,int,int,long)>
<org.webrtc.AndroidVideoTrackSourceObserver: void onCapturerStarted(boolean)>
<org.webrtc.AndroidVideoTrackSourceObserver: void onFrameCaptured(org.webrtc.VideoFrame)>
<sun.security.pkcs.PKCS9Attributes: sun.security.pkcs.PKCS9Attribute getAttribute(sun.security.util.ObjectIdentifier)>
<org.webrtc.AndroidVideoTrackSourceObserver: void onTextureFrameCaptured(int,int,int,float[],int,long)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: boolean isSystemContact(android.content.Context,java.lang.String)>
<org.thoughtcrime.securesms.contacts.ContactAccessor: java.lang.CharSequence phoneTypeToString(android.content.Context,int,java.lang.CharSequence)>
<android.icu.impl.locale.LocaleObjectCache: java.lang.Object get(java.lang.Object)>
<com.android.internal.widget.AutoScrollHelper$AbsListViewAutoScroller: void scrollTargetBy(int,int)>
<com.android.internal.widget.AutoScrollHelper$AbsListViewAutoScroller: boolean canTargetScrollHorizontally(int)>
<com.android.internal.widget.AutoScrollHelper$AbsListViewAutoScroller: boolean canTargetScrollVertically(int)>
<com.google.android.exoplayer2.BaseRenderer: int readSource(com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,boolean)>
<com.google.android.exoplayer2.BaseRenderer: void setIndex(int)>
<com.google.android.exoplayer2.BaseRenderer: void skipToKeyframeBefore(long)>
<android.media.MiniThumbFile: long getMagic(long)>
<com.fasterxml.jackson.core.io.SegmentedStringWriter: void write(java.lang.String)>
<com.fasterxml.jackson.core.io.SegmentedStringWriter: void write(char[],int,int)>
<com.google.android.mms.util_alt.PduCache: boolean isUpdating(android.net.Uri)>
<com.google.android.mms.util_alt.PduCache: com.google.android.mms.util_alt.PduCacheEntry purge(android.net.Uri)>
<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<android.hardware.Camera: void addCallbackBuffer(byte[])>
<com.google.android.mms.util_alt.PduCache: boolean put(android.net.Uri,com.google.android.mms.util_alt.PduCacheEntry)>
<com.google.android.mms.util_alt.PduCache: void setUpdating(android.net.Uri,boolean)>
<android.hardware.Camera: void setDisplayOrientation(int)>
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>
<android.widget.MediaController: void setAnchorView(android.view.View)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<org.thoughtcrime.securesms.crypto.MasterSecret$1: org.thoughtcrime.securesms.crypto.MasterSecret[] newArray(int)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.support.v4.app.JobIntentService$CommandProcessor: java.lang.Void doInBackground(java.lang.Void[])>
<android.support.v4.app.JobIntentService$CommandProcessor: void onCancelled(java.lang.Void)>
<android.widget.MediaController: void show(int)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.support.v4.app.JobIntentService$CommandProcessor: void onPostExecute(java.lang.Void)>
<android.content.Intent: void setAllowFds(boolean)>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,double[])>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<org.thoughtcrime.securesms.recipients.Recipient: void addListener(org.thoughtcrime.securesms.recipients.RecipientModifiedListener)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<org.thoughtcrime.securesms.recipients.Recipient: android.graphics.drawable.Drawable getFallbackContactPhotoDrawable(android.content.Context,boolean)>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<com.google.protobuf.AbstractMessage: int hashFields(int,java.util.Map)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<org.thoughtcrime.securesms.recipients.Recipient: void removeListener(org.thoughtcrime.securesms.recipients.RecipientModifiedListener)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<org.thoughtcrime.securesms.recipients.Recipient: void setBlocked(boolean)>
<android.content.Intent: android.content.ComponentName resolveSystemService(android.content.pm.PackageManager,int)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)>
<org.thoughtcrime.securesms.recipients.Recipient: void setColor(org.thoughtcrime.securesms.color.MaterialColor)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.recipients.Recipient: void setDefaultSubscriptionId(org.whispersystems.libsignal.util.guava.Optional)>
<org.thoughtcrime.securesms.recipients.Recipient: void setExpireMessages(int)>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)>
<org.thoughtcrime.securesms.recipients.Recipient: void setHasSeenInviteReminder(boolean)>
<org.thoughtcrime.securesms.recipients.Recipient: void setMuted(long)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<org.thoughtcrime.securesms.recipients.Recipient: void setProfileSharing(boolean)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<org.thoughtcrime.securesms.recipients.Recipient: void setRegistered(org.thoughtcrime.securesms.database.RecipientDatabase$RegisteredState)>
<org.thoughtcrime.securesms.recipients.Recipient: void setRingtone(android.net.Uri)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<org.thoughtcrime.securesms.recipients.Recipient: void setSystemDisplayName(java.lang.String)>
<com.google.protobuf.LiteralByteString: byte byteAt(int)>
<org.thoughtcrime.securesms.recipients.Recipient: void setVibrate(org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState)>
<android.content.Intent: void setClipData(android.content.ClipData)>
<com.google.protobuf.LiteralByteString: void copyToInternal(byte[],int,int,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<com.google.protobuf.LiteralByteString: boolean equalsRange(com.google.protobuf.LiteralByteString,int,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<org.thoughtcrime.securesms.ConversationListActivity$1: boolean onQueryTextSubmit(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>
<com.google.protobuf.LiteralByteString: int partialHash(int,int,int)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.icu.util.GregorianCalendar: boolean isLeapYear(int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.icu.util.GregorianCalendar: boolean isEquivalentTo(android.icu.util.Calendar)>
<libcore.io.Posix: java.lang.String gai_strerror(int)>
<libcore.io.Posix: java.lang.String getenv(java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState: android.support.v7.view.menu.MenuView getListMenuView(android.support.v7.view.menu.MenuPresenter$Callback)>
<libcore.io.Posix: java.net.InetAddress inet_pton(int,java.lang.String)>
<android.icu.util.GregorianCalendar: int getActualMinimum(int)>
<android.icu.util.GregorianCalendar: int getActualMaximum(int)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState: void setMenu(android.support.v7.view.menu.MenuBuilder)>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState: void setStyle(android.content.Context)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)>
<android.arch.lifecycle.LifecycleRegistry: void markState(android.arch.lifecycle.Lifecycle$State)>
<org.webrtc.MediaStreamTrack: boolean setEnabled(boolean)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean,boolean)>
<org.webrtc.RendererCommon$VideoLayoutMeasure: android.graphics.Point measure(int,int,int,int)>
<org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType)>
<libcore.io.Posix: java.lang.String strerror(int)>
<org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)>
<libcore.io.Posix: long sysconf(int)>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void draw(android.graphics.Canvas,android.graphics.Rect)>
<android.view.Window: void setOnWindowDismissedCallback(android.view.Window$OnWindowDismissedCallback)>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: void setGravity(int)>
<android.view.Window: void setSoftInputMode(int)>
<android.view.Window: void addFlags(int)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void drawTriangle(android.graphics.Canvas,float,float,android.graphics.RectF)>
<android.view.Window: void setFlags(int,int)>
<android.view.Window: void setNeedsMenuKey(int)>
<sun.net.ProgressSource: void updateProgress(long,long)>
<com.android.internal.view.menu.MenuDialogHelper: void show(android.os.IBinder)>
<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object forName(java.lang.Object)>
<android.view.Window: void setCloseOnTouchOutside(boolean)>
<android.view.Window: void setCloseOnTouchOutsideIfNotSet(boolean)>
<android.view.Window: boolean shouldCloseOnTouch(android.content.Context,android.view.MotionEvent)>
<com.dd.MorphingAnimation: void setDuration(int)>
<com.dd.MorphingAnimation: void setFromColor(int)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<com.dd.MorphingAnimation: void setFromCornerRadius(float)>
<com.dd.MorphingAnimation: void setFromStrokeColor(int)>
<com.dd.MorphingAnimation: void setFromWidth(int)>
<com.dd.MorphingAnimation: void setListener(com.dd.OnAnimationEndListener)>
<com.dd.MorphingAnimation: void setPadding(float)>
<com.dd.MorphingAnimation: void setToColor(int)>
<android.support.v7.widget.AppCompatSpinner$DropdownPopup: boolean isVisibleToUser(android.view.View)>
<com.dd.MorphingAnimation: void setToCornerRadius(float)>
<android.view.Window: void removeFeature(int)>
<com.dd.MorphingAnimation: void setToStrokeColor(int)>
<com.dd.MorphingAnimation: void setToWidth(int)>
<com.android.internal.view.menu.MenuDialogHelper: void onCloseMenu(com.android.internal.view.menu.MenuBuilder,boolean)>
<android.support.v7.widget.AppCompatSpinner$DropdownPopup: void setAdapter(android.widget.ListAdapter)>
<android.support.v7.widget.AppCompatSpinner$DropdownPopup: void setPromptText(java.lang.CharSequence)>
<com.android.internal.view.menu.MenuDialogHelper: boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder)>
<android.view.Window: android.view.View findViewById(int)>
<android.media.SubtitleTrack$CueList: void add(android.media.SubtitleTrack$Cue)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setAlpha(int)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setArrowDimensions(float,float)>
<android.view.Window: void setBackgroundDrawableResource(int)>
<org.thoughtcrime.securesms.ShareListItem: void lambda$onModified$0$ShareListItem(org.thoughtcrime.securesms.recipients.Recipient)>
<android.media.SubtitleTrack$CueList: void remove(android.media.SubtitleTrack$Cue)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setArrowScale(float)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setCenterRadius(float)>
<android.media.SubtitleTrack$CueList: java.lang.Iterable entriesBetween(long,long)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setColor(int)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setColorFilter(android.graphics.ColorFilter)>
<android.media.SubtitleTrack$CueList: long nextTimeAfter(long)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setColorIndex(int)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setColors(int[])>
<android.view.Window: boolean hasFeature(int)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setEndTrim(float)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setRotation(float)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setShowArrow(boolean)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setStartTrim(float)>
<android.support.v4.widget.CircularProgressDrawable$Ring: void setStrokeWidth(float)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider: android.text.Spannable emojify(java.lang.CharSequence,android.widget.TextView)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider: android.text.Spannable emojify(org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$CandidateList,java.lang.CharSequence,android.widget.TextView)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider: org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$CandidateList getCandidates(java.lang.CharSequence)>
<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>
<org.thoughtcrime.securesms.components.emoji.EmojiProvider: android.graphics.drawable.Drawable getEmojiDrawable(java.lang.CharSequence)>
<android.content.Intent: void prepareToLeaveProcess(boolean)>
<android.icu.impl.Trie2Writable: android.icu.impl.Trie2Writable set(int,int)>
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.Arrays$ArrayList: int indexOf(java.lang.Object)>
<org.thoughtcrime.securesms.ConversationActivity$29$1$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.impl.Trie2Writable: android.icu.impl.Trie2Writable setRange(int,int,int,boolean)>
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>
<android.icu.impl.Trie2Writable: android.icu.impl.Trie2Writable setRange(android.icu.impl.Trie2$Range,boolean)>
<android.icu.impl.Trie2Writable: android.icu.impl.Trie2Writable setForLeadSurrogateCodeUnit(char,int)>
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>
<java.security.Provider$Service: void addAttribute(java.lang.String,java.lang.String)>
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>
<com.doomonafireball.betterpickers.radialtimepicker.CircleView: void setTheme(android.content.Context,boolean)>
<com.bumptech.glide.provider.ResourceEncoderRegistry: void append(java.lang.Class,com.bumptech.glide.load.ResourceEncoder)>
<android.support.v7.widget.CardView$1: void setCardBackground(android.graphics.drawable.Drawable)>
<android.support.v7.widget.CardView$1: void setMinWidthHeightInternal(int,int)>
<android.support.v7.widget.CardView$1: void setShadowPadding(int,int,int,int)>
<android.text.BidiFormatter: java.lang.String markAfter(java.lang.CharSequence,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: java.lang.String markBefore(java.lang.CharSequence,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean)>
<com.fasterxml.jackson.databind.ser.std.EnumSerializer: boolean _serializeAsIndex(com.fasterxml.jackson.databind.SerializerProvider)>
<android.support.v7.widget.ActionMenuView: boolean hasSupportDividerBeforeChildAt(int)>
<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String)>
<android.support.v7.widget.ActionMenuView: void initialize(android.support.v7.view.menu.MenuBuilder)>
<android.support.v4.app.DialogFragment: void dismissInternal(boolean)>
<com.android.internal.widget.BackgroundFallback: void setDrawable(android.graphics.drawable.Drawable)>
<com.android.internal.widget.BackgroundFallback: void draw(android.view.ViewGroup,android.graphics.Canvas,android.view.View)>
<android.support.v7.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)>
<android.support.v4.app.DialogFragment: void setShowsDialog(boolean)>
<android.support.v7.widget.ActionMenuView: void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter$Callback,android.support.v7.view.menu.MenuBuilder$Callback)>
<android.support.v4.app.DialogFragment: void setStyle(int,int)>
<android.support.v7.widget.ActionMenuView: void setOnMenuItemClickListener(android.support.v7.widget.ActionMenuView$OnMenuItemClickListener)>
<android.support.v7.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.support.v4.app.DialogFragment: void setupDialog(android.app.Dialog,int)>
<android.support.v7.widget.ActionMenuView: void setOverflowReserved(boolean)>
<android.support.v7.widget.ActionMenuView: void setPopupTheme(int)>
<android.support.v4.app.DialogFragment: int show(android.support.v4.app.FragmentTransaction,java.lang.String)>
<android.support.v7.widget.ActionMenuView: void setPresenter(android.support.v7.widget.ActionMenuPresenter)>
<android.support.v4.app.DialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)>
<com.google.android.mms.pdu_alt.PduBody: void addPart(int,com.google.android.mms.pdu_alt.PduPart)>
<com.google.android.mms.pdu_alt.PduBody: boolean addPart(com.google.android.mms.pdu_alt.PduPart)>
<com.google.android.mms.pdu_alt.PduBody: com.google.android.mms.pdu_alt.PduPart getPart(int)>
<android.support.v7.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>
<com.android.internal.view.menu.BaseMenuPresenter: void addItemView(android.view.View,int)>
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>
<org.apache.http.message.AbstractHttpMessage: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: char getFieldChar(int)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: int getFieldLength(int)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: void populate(int,java.lang.String)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: void populate(int,char,int)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: boolean isFieldEmpty(int)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: java.lang.StringBuilder appendTo(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.UUID)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: java.lang.StringBuilder appendFieldTo(int,java.lang.StringBuilder)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: int compareTo(android.icu.text.DateTimePatternGenerator$SkeletonFields)>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: boolean equals(java.lang.Object)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setDefaultNavigationContentDescription(int)>
<android.view.DisplayListCanvas: void drawRenderNode(android.view.RenderNode)>
<android.view.DisplayListCanvas: void drawHardwareLayer(android.view.HardwareLayer)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setWindowCallback(android.view.Window$Callback)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setWindowTitle(java.lang.CharSequence)>
<android.view.DisplayListCanvas: void drawCircle(android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setTitle(java.lang.CharSequence)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setSubtitle(java.lang.CharSequence)>
<com.android.mms.service_alt.MmsConfig$1: void process(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setIcon(android.graphics.drawable.Drawable)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setLogo(android.graphics.drawable.Drawable)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setDisplayOptions(int)>
<com.android.internal.app.AlertController: void setTitle(java.lang.CharSequence)>
<com.android.internal.app.AlertController: void setCustomTitle(android.view.View)>
<com.android.internal.app.AlertController: void setMessage(java.lang.CharSequence)>
<com.android.internal.app.AlertController: void setView(int)>
<com.android.internal.app.AlertController: void setView(android.view.View)>
<com.android.internal.app.AlertController: void setView(android.view.View,int,int,int,int)>
<com.android.internal.app.AlertController: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message)>
<com.android.internal.app.AlertController: void setIcon(int)>
<com.android.internal.app.AlertController: void setIcon(android.graphics.drawable.Drawable)>
<com.android.internal.app.AlertController: int getIconAttributeResId(int)>
<android.content.res.ResourcesImpl: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.app.AlertController: void setInverseBackgroundForced(boolean)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setCustomView(android.view.View)>
<java.util.TimeZone: void setID(java.lang.String)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setNavigationIcon(android.graphics.drawable.Drawable)>
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setNavigationContentDescription(java.lang.CharSequence)>
<com.android.internal.widget.ToolbarWidgetWrapper: void setNavigationContentDescription(int)>
<android.content.res.ResourcesImpl: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>
<android.util.LongArray: void add(long)>
<android.util.LongArray: void add(int,long)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.util.LongArray: long get(int)>
<android.util.LongArray: int indexOf(long)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>
<android.content.res.ResourcesImpl: int calcConfigChanges(android.content.res.Configuration)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment append(int,com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment append(int,com.fasterxml.jackson.core.JsonToken,java.lang.Object)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment append(int,com.fasterxml.jackson.core.JsonToken,java.lang.Object,java.lang.Object)>
<android.support.v4.graphics.TypefaceCompatBaseImpl$1: int getWeight(android.support.v4.provider.FontsContractCompat$FontInfo)>
<android.support.v4.graphics.TypefaceCompatBaseImpl$1: boolean isItalic(android.support.v4.provider.FontsContractCompat$FontInfo)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment append(int,com.fasterxml.jackson.core.JsonToken,java.lang.Object,java.lang.Object,java.lang.Object)>
<android.support.v4.widget.SlidingPaneLayout$SavedState$1: android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel)>
<android.support.v4.widget.SlidingPaneLayout$SavedState$1: android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.v4.widget.SlidingPaneLayout$SavedState$1: android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findObjectId(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findTypeId(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object get(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.core.JsonToken type(int)>
<com.doomonafireball.betterpickers.numberpicker.NumberView: void setNumber(java.lang.String,java.lang.String,boolean,boolean)>
<com.google.protobuf.Descriptors$EnumDescriptor: com.google.protobuf.Descriptors$EnumValueDescriptor findValueByName(java.lang.String)>
<com.google.protobuf.Descriptors$EnumDescriptor: com.google.protobuf.Descriptors$EnumValueDescriptor findValueByNumber(int)>
<com.doomonafireball.betterpickers.numberpicker.NumberView: void setTheme(int)>
<android.graphics.drawable.VectorDrawable$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.content.res.ResourcesImpl: android.content.res.ComplexColor loadComplexColor(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>
<org.thoughtcrime.securesms.contacts.ContactsDatabase: android.database.Cursor querySystemContacts(java.lang.String)>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: void doOnClick(android.view.View)>
<org.thoughtcrime.securesms.contacts.ContactsDatabase: android.database.Cursor queryTextSecureContacts(java.lang.String)>
<java.io.ObjectOutputStream$ReplaceTable: void assign(java.lang.Object,java.lang.Object)>
<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object lookup(java.lang.Object)>
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])>
<android.support.v7.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.content.res.ResourcesImpl: android.content.res.ResourcesImpl$ThemeImpl newThemeImpl(android.content.res.Resources$ThemeKey)>
<android.support.v7.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.app.AlertDialog: void setMessage(java.lang.CharSequence)>
<android.support.v7.app.AlertDialog: void setTitle(java.lang.CharSequence)>
<android.support.v7.app.AlertDialog: void setView(android.view.View)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withGroupId(java.lang.String)>
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withRequirement(org.whispersystems.jobqueue.requirements.Requirement)>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withRetryCount(int)>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withWakeLock(boolean)>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withWakeLock(boolean,long,java.util.concurrent.TimeUnit)>
<sun.security.x509.CertificateVersion: int compare(int)>
<android.view.ScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.support.v7.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<com.google.android.exoplayer2.source.SinglePeriodTimeline: int getIndexOfPeriod(java.lang.Object)>
<android.widget.RemoteViews$MemoryUsageCounter: void increment(int)>
<android.widget.RemoteViews$MemoryUsageCounter: void addBitmapMemory(android.graphics.Bitmap)>
<android.support.v7.widget.RecyclerView$Recycler: void addViewHolderToRecycledViewPool(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.graphics.drawable.AnimationDrawable$AnimationState: void addFrame(android.graphics.drawable.Drawable,int)>
<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>
<android.view.ScaleGestureDetector: void setStylusScaleEnabled(boolean)>
<org.thoughtcrime.securesms.util.IdentityUtil$1: org.whispersystems.libsignal.util.guava.Optional doInBackground(org.thoughtcrime.securesms.recipients.Recipient[])>
<android.app.LoadedApk$DexLoadReporter: void report(java.util.List)>
<org.thoughtcrime.securesms.util.IdentityUtil$1: void onPostExecute(org.whispersystems.libsignal.util.guava.Optional)>
<android.support.v7.widget.RecyclerView$Recycler: void dispatchViewRecycled(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView$Recycler: android.support.v7.widget.RecyclerView$ViewHolder getChangedScrapViewForPosition(int)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment: void onClick(org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder)>
<android.support.v4.view.ViewPropertyAnimatorCompat$2: void onAnimationUpdate(android.animation.ValueAnimator)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment: void onLoadFinished(android.support.v4.content.Loader,java.util.List)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment: void setClickListener(org.thoughtcrime.securesms.giph.ui.GiphyAdapter$OnItemClickListener)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment: void setLayoutManager(int)>
<org.thoughtcrime.securesms.giph.ui.GiphyFragment: void setSearchString(java.lang.String)>
<android.support.v7.widget.RecyclerView$Recycler: android.support.v7.widget.RecyclerView$ViewHolder getScrapOrCachedViewForId(long,int,boolean)>
<android.support.v7.widget.RecyclerView$Recycler: android.support.v7.widget.RecyclerView$ViewHolder getScrapOrHiddenOrCachedHolderForPosition(int,boolean)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: boolean _checkIfCreatorPropertyBased(com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)>
<com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool: void trimMemory(int)>
<android.support.v7.widget.RecyclerView$Recycler: android.view.View getScrapViewAt(int)>
<android.support.v7.widget.RecyclerView$Recycler: android.view.View getViewForPosition(int)>
<dalvik.system.BaseDexClassLoader: void addDexPath(java.lang.String)>
<android.support.v7.widget.RecyclerView$Recycler: android.view.View getViewForPosition(int,boolean)>
<dalvik.system.BaseDexClassLoader: java.util.Enumeration findResources(java.lang.String)>
<android.support.v7.widget.RecyclerView$Recycler: void offsetPositionRecordsForInsert(int,int)>
<android.support.v7.widget.RecyclerView$Recycler: void offsetPositionRecordsForMove(int,int)>
<android.support.v7.widget.RecyclerView$Recycler: void offsetPositionRecordsForRemove(int,int,boolean)>
<org.thoughtcrime.securesms.ConversationActivity$30$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.support.v7.widget.RecyclerView$Recycler: void onAdapterChanged(android.support.v7.widget.RecyclerView$Adapter,android.support.v7.widget.RecyclerView$Adapter,boolean)>
<android.support.v7.widget.RecyclerView$Recycler: void quickRecycleScrapView(android.view.View)>
<android.support.v7.widget.RecyclerView$Recycler: void recycleCachedViewAt(int)>
<android.support.v7.widget.RecyclerView$Recycler: void recycleView(android.view.View)>
<android.support.v7.widget.RecyclerView$Recycler: void recycleViewHolderInternal(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>
<android.support.v7.widget.RecyclerView$Recycler: void scrapView(android.view.View)>
<android.support.v4.app.Fragment: java.lang.String getString(int)>
<android.support.v4.app.Fragment: java.lang.String getString(int,java.lang.Object[])>
<android.support.v7.widget.RecyclerView$Recycler: void setRecycledViewPool(android.support.v7.widget.RecyclerView$RecycledViewPool)>
<android.support.v7.widget.RecyclerView$Recycler: void setViewCacheExtension(android.support.v7.widget.RecyclerView$ViewCacheExtension)>
<android.support.v7.widget.RecyclerView$Recycler: void setViewCacheSize(int)>
<android.support.v7.widget.RecyclerView$Recycler: android.support.v7.widget.RecyclerView$ViewHolder tryGetViewHolderForPositionByDeadline(int,boolean,long)>
<com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator: com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey key(java.lang.Object)>
<android.support.v7.widget.LinearSmoothScroller: int calculateDtToFit(int,int,int,int,int)>
<android.support.v4.app.Fragment: void onAttachFragment(android.support.v4.app.Fragment)>
<android.support.v7.widget.LinearSmoothScroller: int calculateDxToMakeVisible(android.view.View,int)>
<android.support.v7.widget.LinearSmoothScroller: int calculateDyToMakeVisible(android.view.View,int)>
<android.support.v4.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)>
<android.support.v4.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.support.v7.widget.LinearSmoothScroller: float calculateSpeedPerPixel(android.util.DisplayMetrics)>
<android.support.v7.widget.LinearSmoothScroller: int calculateTimeForDeceleration(int)>
<android.support.v7.widget.LinearSmoothScroller: int calculateTimeForScrolling(int)>
<android.support.v7.widget.LinearSmoothScroller: android.graphics.PointF computeScrollVectorForPosition(int)>
<android.support.v4.app.Fragment: void onHiddenChanged(boolean)>
<android.support.v7.widget.LinearSmoothScroller: void onSeekTargetStep(int,int,android.support.v7.widget.RecyclerView$State,android.support.v7.widget.RecyclerView$SmoothScroller$Action)>
<android.support.v7.widget.LinearSmoothScroller: void onTargetFound(android.view.View,android.support.v7.widget.RecyclerView$State,android.support.v7.widget.RecyclerView$SmoothScroller$Action)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.type.CollectionType _mapAbstractCollectionType(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig)>
<android.support.v4.app.Fragment: void onViewStateRestored(android.os.Bundle)>
<android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)>
<android.support.v7.widget.LinearSmoothScroller: void updateActionForInterimTarget(android.support.v7.widget.RecyclerView$SmoothScroller$Action)>
<android.support.v4.app.Fragment: void performConfigurationChanged(android.content.res.Configuration)>
<com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>
<android.support.v4.app.Fragment: boolean performContextItemSelected(android.view.MenuItem)>
<android.support.v4.app.Fragment: void performCreate(android.os.Bundle)>
<android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.support.v7.preference.PreferenceManager: android.support.v7.preference.Preference findPreference(java.lang.CharSequence)>
<android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.support.v4.app.Fragment: boolean performOptionsItemSelected(android.view.MenuItem)>
<com.fasterxml.jackson.databind.deser.BasicDeserializerFactory: com.fasterxml.jackson.databind.util.EnumResolver constructEnumResolver(java.lang.Class,com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<android.support.v7.preference.PreferenceManager: android.support.v7.preference.PreferenceScreen inflateFromResource(android.content.Context,int,android.support.v7.preference.PreferenceScreen)>
<android.support.v7.preference.PreferenceManager: void setOnDisplayPreferenceDialogListener(android.support.v7.preference.PreferenceManager$OnDisplayPreferenceDialogListener)>
<android.support.v7.preference.PreferenceManager: void setOnNavigateToScreenListener(android.support.v7.preference.PreferenceManager$OnNavigateToScreenListener)>
<android.support.v7.preference.PreferenceManager: void setOnPreferenceTreeClickListener(android.support.v7.preference.PreferenceManager$OnPreferenceTreeClickListener)>
<android.support.v7.widget.RecyclerView$Recycler: void unscrapView(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.preference.PreferenceManager: boolean setPreferences(android.support.v7.preference.PreferenceScreen)>
<android.support.v7.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>
<android.support.v7.widget.RecyclerView$Recycler: boolean validateViewHolderForOffsetPosition(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<android.support.v4.app.Fragment: void registerForContextMenu(android.view.View)>
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(android.net.Uri$Part)>
<android.support.v4.app.Fragment: void requestPermissions(java.lang.String[],int)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(android.net.Uri$Part)>
<android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)>
<android.net.Uri$Builder: android.net.Uri$Builder path(android.net.Uri$PathPart)>
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.support.v7.widget.RecyclerView$Recycler: void viewRangeUpdate(int,int)>
<android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)>
<android.support.v4.app.Fragment: void setArguments(android.os.Bundle)>
<android.net.Uri$Builder: android.net.Uri$Builder query(android.net.Uri$Part)>
<android.support.v4.app.Fragment: void setEnterTransition(java.lang.Object)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(android.net.Uri$Part)>
<android.support.v4.app.Fragment: void setExitTransition(java.lang.Object)>
<android.support.v4.app.Fragment: void setHasOptionsMenu(boolean)>
<android.widget.VideoView: void seekTo(int)>
<android.support.v4.app.Fragment: void setHideReplaced(boolean)>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.support.v4.app.Fragment: void setIndex(int,android.support.v4.app.Fragment)>
<org.thoughtcrime.securesms.ConversationActivity$14: java.util.List doInBackground(java.lang.Void[])>
<android.support.v4.app.Fragment: void setNextAnim(int)>
<android.support.v4.app.Fragment: void setNextTransition(int,int)>
<org.thoughtcrime.securesms.ConversationActivity$14: void onPostExecute(java.util.List)>
<android.support.v4.app.Fragment: void setOnStartEnterTransitionListener(android.support.v4.app.Fragment$OnStartEnterTransitionListener)>
<android.support.v4.app.Fragment: void setSharedElementEnterTransition(java.lang.Object)>
<android.support.v4.app.Fragment: void setSharedElementReturnTransition(java.lang.Object)>
<android.support.v4.app.Fragment: void setStateAfterAnimating(int)>
<android.support.v4.app.Fragment: void setTargetFragment(android.support.v4.app.Fragment,int)>
<android.support.v4.app.Fragment: void startActivity(android.content.Intent)>
<android.support.v4.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>
<android.support.v4.app.Fragment: void startActivityForResult(android.content.Intent,int)>
<android.support.v4.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<org.thoughtcrime.securesms.ConversationListItem: void lambda$onModified$0$ConversationListItem(org.thoughtcrime.securesms.recipients.Recipient)>
<sun.util.locale.Extension: void setValue(java.lang.String)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: java.lang.Object convertValue(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer withDelegate(com.fasterxml.jackson.databind.util.Converter,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>
<android.util.ArraySet: void ensureCapacity(int)>
<org.thoughtcrime.securesms.PassphraseChangeActivity$ChangePassphraseTask: org.thoughtcrime.securesms.crypto.MasterSecret doInBackground(java.lang.String[])>
<android.util.ArraySet: boolean contains(java.lang.Object)>
<android.util.ArraySet: int indexOf(java.lang.Object)>
<org.thoughtcrime.securesms.PassphraseChangeActivity$ChangePassphraseTask: void onPostExecute(org.thoughtcrime.securesms.crypto.MasterSecret)>
<android.util.ArraySet: java.lang.Object valueAt(int)>
<android.util.ArraySet: boolean add(java.lang.Object)>
<android.util.ArraySet: void addAll(android.util.ArraySet)>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection: com.google.android.exoplayer2.Format getFormat(int)>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection: int getIndexInTrackGroup(int)>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection: boolean isBlacklisted(int,long)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setAlpha(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setPivotX(float)>
<android.graphics.drawable.RippleComponent$RenderNodeAnimatorSet: void add(android.view.RenderNodeAnimator)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setPivotY(float)>
<android.graphics.drawable.RippleComponent$RenderNodeAnimatorSet: void start(android.view.DisplayListCanvas)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setRotation(float)>
<android.os.ResultReceiver: void send(int,android.os.Bundle)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setRotationX(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setRotationY(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setScaleX(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setScaleY(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setScrollX(int)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setScrollY(int)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setTranslationX(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setTranslationY(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setX(float)>
<com.nineoldandroids.view.animation.AnimatorProxy: void setY(float)>
<android.support.design.widget.TabLayout: void addOnTabSelectedListener(android.support.design.widget.TabLayout$OnTabSelectedListener)>
<android.support.design.widget.TabLayout: void addTab(android.support.design.widget.TabLayout$Tab)>
<android.icu.text.TransliteratorParser: void parse(java.lang.String,int)>
<android.icu.text.TransliteratorParser: void parseRules(android.icu.text.TransliteratorParser$RuleBody,int)>
<android.support.design.widget.TabLayout: void addTab(android.support.design.widget.TabLayout$Tab,int,boolean)>
<android.support.design.widget.TabLayout: void addTab(android.support.design.widget.TabLayout$Tab,boolean)>
<android.support.design.widget.TabLayout: int dpToPx(int)>
<android.support.design.widget.TabLayout: android.support.design.widget.TabLayout$Tab getTabAt(int)>
<android.support.v4.util.LongSparseArray: void delete(long)>
<android.support.v4.util.LongSparseArray: java.lang.Object get(long)>
<android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<org.webrtc.CameraCapturer$1: void onDone(org.webrtc.CameraSession)>
<android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)>
<android.support.v4.util.MapCollections: java.lang.Object[] toArrayHelper(int)>
<android.support.design.widget.TabLayout: void removeOnTabSelectedListener(android.support.design.widget.TabLayout$OnTabSelectedListener)>
<android.support.v4.util.LongSparseArray: void removeAt(int)>
<android.support.design.widget.TabLayout: void selectTab(android.support.design.widget.TabLayout$Tab)>
<android.support.v4.util.LongSparseArray: java.lang.Object valueAt(int)>
<android.support.design.widget.TabLayout: void selectTab(android.support.design.widget.TabLayout$Tab,boolean)>
<android.support.design.widget.TabLayout: void setPagerAdapter(android.support.v4.view.PagerAdapter,boolean)>
<org.webrtc.CameraCapturer$1: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)>
<android.support.design.widget.TabLayout: void setScrollPosition(int,float,boolean)>
<android.support.design.widget.TabLayout: void setScrollPosition(int,float,boolean,boolean)>
<android.support.design.widget.TabLayout: void setTabTextColors(android.content.res.ColorStateList)>
<android.support.design.widget.TabLayout: void setupWithViewPager(android.support.v4.view.ViewPager)>
<android.support.design.widget.TabLayout: void setupWithViewPager(android.support.v4.view.ViewPager,boolean)>
<android.support.design.widget.TabLayout: void updateTabViews(boolean)>
<com.google.android.gms.common.zzd$zza: boolean equals(java.lang.Object)>
<java.lang.BootClassLoader: java.net.URL findResource(java.lang.String)>
<java.lang.BootClassLoader: java.lang.Package getPackage(java.lang.String)>
<android.icu.text.TransliteratorParser: char generateStandInFor(java.lang.Object)>
<android.icu.text.TransliteratorParser: char getSegmentStandin(int)>
<android.icu.text.TransliteratorParser: void setSegmentObject(int,android.icu.text.StringMatcher)>
<android.text.Layout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>
<android.text.Layout: void draw(android.graphics.Canvas)>
<android.support.v7.widget.GridLayout: android.support.v7.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>
<android.support.v7.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>
<android.text.Layout: void drawText(android.graphics.Canvas,int,int)>
<android.support.v7.widget.GridLayout: int getMeasurementIncludingMargin(android.view.View,boolean)>
<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListPopupWindow: void setPromptPosition(int)>
<android.widget.ListPopupWindow: void setModal(boolean)>
<android.view.FrameInfo: void setVsync(long,long)>
<android.widget.ListPopupWindow: void setForceIgnoreOutsideTouch(boolean)>
<android.widget.ListPopupWindow: void setDropDownAlwaysVisible(boolean)>
<android.widget.ListPopupWindow: void setSoftInputMode(int)>
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setAnimationStyle(int)>
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>
<android.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.ListPopupWindow: void setDropDownGravity(int)>
<android.widget.ListPopupWindow: void setWidth(int)>
<android.widget.ListPopupWindow: void setContentWidth(int)>
<android.widget.ListPopupWindow: void setHeight(int)>
<android.text.Layout: void drawBackground(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int,int,int)>
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.support.v7.widget.GridLayout: void setAlignmentMode(int)>
<android.support.v7.widget.GridLayout: void setColumnCount(int)>
<android.widget.ListPopupWindow: void setPromptView(android.view.View)>
<android.support.v7.widget.GridLayout: void setColumnOrderPreserved(boolean)>
<android.support.v7.widget.GridLayout: void setOrientation(int)>
<android.support.v7.widget.GridLayout: void setRowCount(int)>
<android.support.v7.widget.GridLayout: void setRowOrderPreserved(boolean)>
<android.support.v7.widget.GridLayout: void setUseDefaultMargins(boolean)>
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.widget.ListPopupWindow: void setInputMethodMode(int)>
<android.widget.ListPopupWindow: void setSelection(int)>
<android.view.animation.ScaleAnimation: float resolveScale(float,int,int,int,int)>
<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)>
<android.widget.ListPopupWindow: boolean performItemClick(int)>
<com.google.android.gms.common.zzb: com.google.android.gms.common.ConnectionResult zzcc(android.os.Parcel)>
<android.widget.ListPopupWindow: void setListItemExpandMax(int)>
<android.widget.ListPopupWindow: boolean onKeyDown(int,android.view.KeyEvent)>
<com.google.android.gms.common.zzb: com.google.android.gms.common.ConnectionResult[] zzfk(int)>
<android.icu.impl.ICUResourceBundleReader$ResourceCache$Level: java.lang.Object get(int)>
<android.icu.impl.ICUResourceBundleReader$ResourceCache$Level: java.lang.Object putIfAbsent(int,java.lang.Object,int)>
<android.text.Layout: void increaseWidthTo(int)>
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>
<android.widget.ListPopupWindow: boolean onKeyUp(int,android.view.KeyEvent)>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.text.Layout: boolean isLevelBoundary(int)>
<android.text.Layout: boolean isRtlCharAt(int)>
<android.text.Layout: long getRunRange(int)>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.text.Layout: float getPrimaryHorizontal(int,boolean)>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.text.Layout: float getSecondaryHorizontal(int,boolean)>
<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow,int,int,boolean)>
<android.view.Display: void getRectSize(android.graphics.Rect)>
<android.text.Layout: float getLineLeft(int)>
<android.text.Layout: float getLineRight(int)>
<android.text.Layout: int getLineForOffset(int)>
<android.widget.FastScroller$3: void setValue(android.view.View,int)>
<android.widget.FastScroller$3: java.lang.Integer get(android.view.View)>
<android.support.v7.widget.ListViewCompat: void drawSelectorCompat(android.graphics.Canvas)>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.text.Layout: int getOffsetForHorizontal(int,float,boolean)>
<android.support.v7.widget.GapWorker: void add(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.ListViewCompat: int measureHeightOfChildrenCompat(int,int,int,int,int)>
<android.support.v7.widget.GapWorker: void postFromTraversal(android.support.v7.widget.RecyclerView,int,int)>
<android.support.v7.widget.GapWorker: void prefetch(long)>
<android.support.v7.widget.GapWorker: void remove(android.support.v7.widget.RecyclerView)>
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>
<com.fasterxml.jackson.databind.PropertyName: boolean hasSimpleName(java.lang.String)>
<android.support.v7.widget.ListViewCompat: void positionSelectorCompat(int,android.view.View)>
<android.text.Layout: int getLineEnd(int)>
<android.text.Layout: int getLineVisibleEnd(int)>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.core.SerializableString simpleAsEncoded(com.fasterxml.jackson.databind.cfg.MapperConfig)>
<android.support.v7.widget.ListViewCompat: void positionSelectorLikeFocusCompat(int,android.view.View)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setDefaultShowAsAction(int)>
<com.android.internal.view.menu.MenuBuilder: void addMenuPresenter(com.android.internal.view.menu.MenuPresenter)>
<android.text.Layout: int getLineBottom(int)>
<android.text.Layout: int getLineBaseline(int)>
<com.android.internal.view.menu.MenuBuilder: void addMenuPresenter(com.android.internal.view.menu.MenuPresenter,android.content.Context)>
<android.support.v7.widget.ListViewCompat: void positionSelectorLikeTouchCompat(int,android.view.View,float,float)>
<com.android.internal.view.menu.MenuBuilder: void removeMenuPresenter(com.android.internal.view.menu.MenuPresenter)>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.text.Layout: int getOffsetToRightOf(int)>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.databind.PropertyName withSimpleName(java.lang.String)>
<android.support.v7.widget.ListViewCompat: void setSelectorEnabled(boolean)>
<android.text.Layout: boolean shouldClampCursor(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>
<com.android.internal.view.menu.MenuBuilder: void savePresenterStates(android.os.Bundle)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>
<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setContentType(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder addTag(java.lang.String)>
<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>
<android.view.MotionEvent: void setSource(int)>
<android.view.MotionEvent: void setTainted(boolean)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setCapturePreset(int)>
<com.annimon.stream.Collectors$5: void accept(java.util.List,java.lang.Object)>
<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>
<android.view.MotionEvent: float getAxisValue(int)>
<com.android.internal.view.menu.MenuBuilder: android.view.SubMenu addSubMenu(int,int,int,int)>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<android.view.MotionEvent: int getPointerId(int)>
<android.view.MotionEvent: int getToolType(int)>
<android.view.MotionEvent: int findPointerIndex(int)>
<android.view.MotionEvent: float getX(int)>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getPressure(int)>
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>
<android.text.Layout: int getParagraphLeft(int)>
<android.text.Layout: int getParagraphRight(int)>
<android.support.v7.widget.VectorEnabledTintResources: android.graphics.drawable.Drawable superGetDrawable(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<com.android.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(android.view.MenuItem)>
<android.view.MotionEvent: float getHistoricalY(int)>
<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>
<org.thoughtcrime.securesms.components.reminder.ReminderView: void setOnDismissListener(org.thoughtcrime.securesms.components.reminder.ReminderView$OnDismissListener)>
<org.thoughtcrime.securesms.components.reminder.ReminderView: void showReminder(org.thoughtcrime.securesms.components.reminder.Reminder)>
<com.android.internal.view.menu.MenuBuilder: int findItemIndex(int)>
<android.icu.text.DateFormatSymbols$CalendarDataSink: void preEnumerate(java.lang.String)>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>
<android.view.MotionEvent: void setLocation(float,float)>
<com.android.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<org.thoughtcrime.securesms.giph.ui.AspectRatioImageView: int calculateHeight(int,double)>
<org.thoughtcrime.securesms.giph.ui.AspectRatioImageView: int calculateWidth(int,double)>
<android.support.v4.app.FragmentState$1: android.support.v4.app.FragmentState createFromParcel(android.os.Parcel)>
<android.support.v4.app.FragmentState$1: android.support.v4.app.FragmentState[] newArray(int)>
<com.bumptech.glide.manager.DefaultConnectivityMonitor: boolean isConnected(android.content.Context)>
<android.view.View$1: boolean test(android.view.View)>
<android.icu.text.DateFormatSymbols$CalendarDataSink: void processResource(java.lang.String,android.icu.impl.UResource$Key,android.icu.impl.UResource$Value)>
<android.content.res.CompatibilityInfo: void applyToDisplayMetrics(android.util.DisplayMetrics)>
<com.android.internal.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,int)>
<com.android.internal.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,com.android.internal.view.menu.MenuPresenter,int)>
<android.content.res.CompatibilityInfo: void applyToConfiguration(int,android.content.res.Configuration)>
<org.greenrobot.eventbus.SubscriberMethodFinder: java.util.List findSubscriberMethods(java.lang.Class)>
<android.view.MotionEvent: android.view.MotionEvent split(int)>
<com.android.internal.view.menu.MenuBuilder: void close(boolean)>
<com.android.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<org.thoughtcrime.securesms.CreateProfileActivity$3: void onSuccess(java.lang.String)>
<com.android.internal.view.menu.MenuBuilder: void onItemVisibleChanged(com.android.internal.view.menu.MenuItemImpl)>
<com.android.internal.view.menu.MenuBuilder: void onItemActionRequestChanged(com.android.internal.view.menu.MenuItemImpl)>
<dagger.internal.SetBinding: void injectMembers(java.util.Set)>
<android.view.Choreographer$CallbackRecord: void run(long)>
<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<org.thoughtcrime.securesms.ConversationActivity$4$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.android.internal.view.menu.MenuItemImpl)>
<android.media.WebVttRenderingWidget: void setActiveCues(java.util.Vector)>
<org.thoughtcrime.securesms.ConversationActivity$4$1: void onPostExecute(java.lang.Void)>
<android.view.MotionEvent: boolean isButtonPressed(int)>
<org.thoughtcrime.securesms.service.ExpiringMessageManager$ExpiringMessageComparator: int compare(org.thoughtcrime.securesms.service.ExpiringMessageManager$ExpiringMessageReference,org.thoughtcrime.securesms.service.ExpiringMessageManager$ExpiringMessageReference)>
<android.app.ExitTransitionCoordinator$6: void onTranslucentConversionComplete(boolean)>
<java.io.ObjectStreamClass$5: int compare(java.io.ObjectStreamClass$MemberSignature,java.io.ObjectStreamClass$MemberSignature)>
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)>
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int,int,int)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: boolean hasTypePropertyName(java.lang.String)>
<com.fasterxml.jackson.databind.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>
<android.support.v7.widget.TintTypedArray: boolean getBoolean(int,boolean)>
<com.fasterxml.jackson.databind.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>
<android.support.v7.widget.TintTypedArray: int getColor(int,int)>
<android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.widget.AbsListView$RecycleBin: void setViewTypeCount(int)>
<android.support.v7.widget.TintTypedArray: int getDimensionPixelOffset(int,int)>
<com.fasterxml.jackson.databind.util.ObjectBuffer: void completeAndClearBuffer(java.lang.Object[],int,java.util.List)>
<android.support.v7.widget.TintTypedArray: int getDimensionPixelSize(int,int)>
<android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)>
<com.fasterxml.jackson.databind.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int)>
<android.support.v7.widget.TintTypedArray: float getFloat(int,float)>
<com.github.chrisbanes.photoview.CustomGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.support.v7.widget.TintTypedArray: android.graphics.Typeface getFont(int,int,android.widget.TextView)>
<com.fasterxml.jackson.databind.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int,java.lang.Class)>
<android.widget.AbsListView$RecycleBin: boolean shouldRecycleViewType(int)>
<android.widget.AbsListView$RecycleBin: void fillActiveViews(int,int)>
<android.support.v7.widget.TintTypedArray: int getInt(int,int)>
<android.widget.AbsListView$RecycleBin: android.view.View getActiveView(int)>
<android.support.v7.widget.TintTypedArray: int getInteger(int,int)>
<android.support.v7.widget.TintTypedArray: int getLayoutDimension(int,int)>
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>
<android.widget.AbsListView$RecycleBin: android.view.View getTransientStateView(int)>
<android.support.v7.widget.TintTypedArray: int getResourceId(int,int)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>
<android.support.v7.widget.TintTypedArray: java.lang.String getString(int)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>
<android.support.v7.widget.TintTypedArray: java.lang.CharSequence getText(int)>
<android.support.v7.widget.TintTypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.widget.AbsListView$RecycleBin: android.view.View getScrapView(int)>
<android.widget.AbsListView$RecycleBin: void addScrapView(android.view.View,int)>
<android.support.v7.widget.TintTypedArray: boolean hasValue(int)>
<android.support.v7.graphics.drawable.DrawableWrapper: void setWrappedDrawable(android.graphics.drawable.Drawable)>
<com.google.protobuf.DescriptorProtos$DescriptorProto$Builder: com.google.protobuf.DescriptorProtos$DescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$DescriptorProto)>
<android.support.design.widget.Snackbar: android.support.design.widget.Snackbar setAction(int,android.view.View$OnClickListener)>
<android.support.design.widget.Snackbar: android.support.design.widget.Snackbar setAction(java.lang.CharSequence,android.view.View$OnClickListener)>
<android.support.design.widget.Snackbar: android.support.design.widget.Snackbar setActionTextColor(int)>
<android.widget.AbsListView$RecycleBin: void setCacheColorHint(int)>
<android.support.design.widget.Snackbar: android.support.design.widget.Snackbar setText(java.lang.CharSequence)>
<org.greenrobot.eventbus.BackgroundPoster: void enqueue(org.greenrobot.eventbus.Subscription,java.lang.Object)>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>
<com.google.protobuf.DescriptorProtos$DescriptorProto$Builder: com.google.protobuf.DescriptorProtos$DescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$MessageOptions)>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object getAttribute(java.lang.Object)>
<com.google.android.exoplayer2.audio.AudioTrack: void enableTunnelingV21(int)>
<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void resetTyped(java.lang.Class)>
<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void resetUntyped(com.fasterxml.jackson.databind.JavaType)>
<com.google.android.exoplayer2.audio.AudioTrack: long getCurrentPositionUs(boolean)>
<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void resetUntyped(java.lang.Class)>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer getUnknownTypeSerializer(java.lang.Class)>
<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<com.google.android.exoplayer2.audio.AudioTrack: boolean isPassthroughSupported(java.lang.String)>
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase: void deleteRowsForMessage(long)>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase: java.util.List getGroupReceiptInfo(long)>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase: void insert(java.util.List,long,int,long)>
<com.google.android.exoplayer2.audio.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>
<com.google.android.exoplayer2.audio.AudioTrack: void setStreamType(int)>
<com.google.android.exoplayer2.audio.AudioTrack: void setVolume(float)>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase: void update(org.thoughtcrime.securesms.database.Address,long,int,long)>
<org.thoughtcrime.securesms.ConversationActivity$23: java.lang.Long doInBackground(java.lang.Long[])>
<java.util.concurrent.atomic.AtomicLong: void set(long)>
<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<org.thoughtcrime.securesms.ConversationActivity$23: void onPostExecute(java.lang.Long)>
<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
<org.thoughtcrime.securesms.preferences.widgets.RingtonePreferenceDialogFragmentCompat$3: java.lang.String[] doInBackground(android.net.Uri[])>
<org.thoughtcrime.securesms.preferences.widgets.RingtonePreferenceDialogFragmentCompat$3: void onPostExecute(java.lang.String[])>
<android.view.View$MatchIdPredicate: boolean test(android.view.View)>
<org.thoughtcrime.securesms.components.ThreadPhotoRailView$ThreadPhotoRailAdapter: void lambda$onBindItemViewHolder$0$ThreadPhotoRailView$ThreadPhotoRailAdapter(org.thoughtcrime.securesms.database.MediaDatabase$MediaRecord,android.view.View)>
<org.thoughtcrime.securesms.components.ThreadPhotoRailView$ThreadPhotoRailAdapter: void onBindItemViewHolder(org.thoughtcrime.securesms.components.ThreadPhotoRailView$ThreadPhotoRailAdapter$ThreadPhotoViewHolder,android.database.Cursor)>
<org.thoughtcrime.securesms.components.ThreadPhotoRailView$ThreadPhotoRailAdapter: void setListener(org.thoughtcrime.securesms.components.ThreadPhotoRailView$OnItemClickedListener)>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedFling(float,float,boolean)>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedPreFling(float,float)>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedPreScroll(int,int,int[],int[])>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedPreScroll(int,int,int[],int[],int)>
<android.media.RingtoneManager: void setType(int)>
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedScroll(int,int,int,int,int[])>
<android.support.v4.view.NestedScrollingChildHelper: boolean dispatchNestedScroll(int,int,int,int,int[],int)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.support.v4.view.NestedScrollingChildHelper: boolean hasNestedScrollingParent(int)>
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>
<android.support.v4.view.NestedScrollingChildHelper: void setNestedScrollingEnabled(boolean)>
<android.widget.RatingBar: void setIsIndicator(boolean)>
<android.support.v4.view.NestedScrollingChildHelper: boolean startNestedScroll(int)>
<android.support.v4.view.NestedScrollingChildHelper: boolean startNestedScroll(int,int)>
<android.widget.RatingBar: void setNumStars(int)>
<android.widget.RatingBar: void setRating(float)>
<android.widget.RatingBar: void setStepSize(float)>
<android.support.v4.view.NestedScrollingChildHelper: void stopNestedScroll(int)>
<android.widget.RatingBar: void dispatchRatingChange(boolean)>
<org.thoughtcrime.securesms.recipients.RecipientProvider$RecipientCache: org.thoughtcrime.securesms.recipients.Recipient get(org.thoughtcrime.securesms.database.Address)>
<org.whispersystems.libpastelog.util.Scrubber: java.lang.String scrub(java.lang.String)>
<org.thoughtcrime.securesms.recipients.RecipientProvider$RecipientCache: void set(org.thoughtcrime.securesms.database.Address,org.thoughtcrime.securesms.recipients.Recipient)>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder environment(java.lang.String[])>
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>
<org.thoughtcrime.securesms.components.webrtc.PercentFrameLayout: void setHidden(boolean)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addBackReferenceProperty(java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<org.thoughtcrime.securesms.components.webrtc.PercentFrameLayout: void setPosition(int,int,int,int)>
<org.thoughtcrime.securesms.components.webrtc.PercentFrameLayout: void setSquare(boolean)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addCreatorProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addIgnorable(java.lang.String)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addInjectable(com.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.util.Annotations,com.fasterxml.jackson.databind.introspect.AnnotatedMember,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addOrReplaceProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty,boolean)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void addProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.JsonDeserializer buildBuilderBased(com.fasterxml.jackson.databind.JavaType,java.lang.String)>
<android.icu.util.UResourceBundle: android.icu.util.UResourceBundle get(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addCreatorParam(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)>
<android.icu.util.UResourceBundle: android.icu.util.UResourceBundle get(int)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.deser.SettableBeanProperty findProperty(com.fasterxml.jackson.databind.PropertyName)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void setAnySetter(com.fasterxml.jackson.databind.deser.SettableAnyProperty)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void setIgnoreUnknownProperties(boolean)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void setPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder$Value)>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: void setValueInstantiator(com.fasterxml.jackson.databind.deser.ValueInstantiator)>
<com.bumptech.glide.Glide: void registerRequestManager(com.bumptech.glide.RequestManager)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter: java.lang.CharSequence getBubbleText(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addGetterMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.AnnotationIntrospector)>
<com.bumptech.glide.Glide: void removeFromManagers(com.bumptech.glide.request.target.Target)>
<com.bumptech.glide.Glide: void trimMemory(int)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter: void onBindHeaderViewHolder(org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$HeaderViewHolder,int)>
<com.bumptech.glide.Glide: void unregisterRequestManager(com.bumptech.glide.RequestManager)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter: void onBindItemViewHolder(org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$ViewHolder,android.database.Cursor)>
<android.support.v7.widget.ViewBoundsCheck: android.view.View findOneViewWithinBoundFlags(int,int,int,int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addSetterMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.AnnotationIntrospector)>
<android.graphics.drawable.AnimatedVectorDrawable$VectorDrawableAnimatorRT: void recordLastSeenTarget(android.view.DisplayListCanvas)>
<android.media.Cea608CCWidget$CCLineBox: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter: void onItemViewRecycled(org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$ViewHolder)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _doAddInjectable(java.lang.Object,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<android.view.View$3: void setValue(android.view.View,float)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder _property(com.fasterxml.jackson.databind.PropertyName)>
<android.view.View$3: java.lang.Float get(android.view.View)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder _property(java.lang.String)>
<android.icu.text.PluralRules$RuleList: android.icu.text.PluralRules$RuleList addRule(android.icu.text.PluralRules$Rule)>
<android.icu.text.PluralRules$RuleList: java.lang.String select(android.icu.text.PluralRules$FixedDecimal)>
<android.support.v4.content.SharedPreferencesCompat$EditorCompat$Helper: void apply(android.content.SharedPreferences$Editor)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameUsing(com.fasterxml.jackson.databind.PropertyNamingStrategy)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean hasSingleElement(java.util.Iterator)>
<com.fasterxml.jackson.databind.ser.impl.IteratorSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Iterator)>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: boolean allowPassthrough(java.lang.String)>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void onAudioSessionId(int)>
<com.annimon.stream.Collectors$36: void accept(java.util.Map,java.lang.Object)>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void onAudioTrackUnderrun(int,long,long)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _updateCreatorProperty(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder,java.util.List)>
<java.io.PrintStream: void write(int)>
<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>
<org.thoughtcrime.securesms.database.DraftDatabase: void clearDrafts(long)>
<org.thoughtcrime.securesms.database.DraftDatabase: void clearDrafts(java.util.Set)>
<org.thoughtcrime.securesms.database.DraftDatabase: java.util.List getDrafts(org.thoughtcrime.securesms.crypto.MasterCipher,long)>
<java.io.PrintStream: void print(char)>
<java.io.PrintStream: void print(java.lang.String)>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void reportProblem(java.lang.String)>
<org.thoughtcrime.securesms.database.DraftDatabase: void insertDrafts(org.thoughtcrime.securesms.crypto.MasterCipher,long,java.util.List)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.Object)>
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>
<android.media.UnstyledTextExtractor: void onData(java.lang.String)>
<android.media.UnstyledTextExtractor: void onStart(java.lang.String,java.lang.String[],java.lang.String)>
<android.media.UnstyledTextExtractor: void onEnd(java.lang.String)>
<android.media.UnstyledTextExtractor: void onTimeStamp(long)>
<android.view.ViewGroup$4: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.view.ViewGroup$4: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.widget.Scroller: void setFinalX(int)>
<com.doomonafireball.betterpickers.datepicker.DateView: void setDate(java.lang.String,int,int)>
<com.doomonafireball.betterpickers.datepicker.DateView: void setOnClick(android.view.View$OnClickListener)>
<com.doomonafireball.betterpickers.datepicker.DateView: void setTheme(int)>
<com.doomonafireball.betterpickers.datepicker.DateView: void setUnderlinePage(com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean hasSingleElement(java.lang.Iterable)>
<com.fasterxml.jackson.databind.ser.std.IterableSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Iterable)>
<android.text.StaticLayout: void generate(android.text.StaticLayout$Builder,boolean,boolean)>
<android.widget.Editor$SelectionHandleView: int getOffsetAtCoordinate(android.text.Layout,int,float)>
<com.fasterxml.jackson.databind.node.ObjectNode: boolean _childrenEqual(com.fasterxml.jackson.databind.node.ObjectNode)>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<com.dd.StateManager: void checkState(com.dd.CircularProgressButton)>
<com.dd.StateManager: void saveProgress(com.dd.CircularProgressButton)>
<org.thoughtcrime.securesms.webrtc.locks.LockManager: void updatePhoneState(org.thoughtcrime.securesms.webrtc.locks.LockManager$PhoneState)>
<android.transition.PatternPathMotion: void setPatternPath(android.graphics.Path)>
<org.thoughtcrime.securesms.components.camera.CameraUtils$AspectRatioComparator: int compare(android.hardware.Camera$Size,android.hardware.Camera$Size)>
<android.view.View$12: void setValue(android.view.View,float)>
<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode replace(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>
<android.database.MatrixCursor: void addRow(java.lang.Object[])>
<android.view.View$12: java.lang.Float get(android.view.View)>
<org.thoughtcrime.securesms.mms.Slide: boolean equals(java.lang.Object)>
<java.net.URI: int compareTo(java.net.URI)>
<com.fasterxml.jackson.databind.type.ClassKey: int compareTo(com.fasterxml.jackson.databind.type.ClassKey)>
<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: void addUnresolvedId(java.lang.Object,java.lang.Class,com.fasterxml.jackson.core.JsonLocation)>
<org.thoughtcrime.securesms.ConversationActivity$26: java.lang.Long doInBackground(org.thoughtcrime.securesms.mms.OutgoingMediaMessage[])>
<com.google.android.gms.maps.model.zzd: com.google.android.gms.maps.model.LatLngBounds zzoq(android.os.Parcel)>
<org.thoughtcrime.securesms.ConversationActivity$26: void onPostExecute(java.lang.Long)>
<com.google.android.gms.maps.model.zzd: com.google.android.gms.maps.model.LatLngBounds[] zzvv(int)>
<android.database.sqlite.SQLiteProgram: void bindNull(int)>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setCancelable(boolean)>
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setCustomTitle(android.view.View)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setIconAttribute(int)>
<android.graphics.drawable.shapes.Shape: void resize(float,float)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>
<org.thoughtcrime.securesms.ConversationActivity: void lambda$initializeViews$0$ConversationActivity(android.view.View)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>
<org.thoughtcrime.securesms.ConversationActivity: boolean lambda$initializeViews$1$ConversationActivity(android.view.View)>
<org.thoughtcrime.securesms.ConversationActivity: void lambda$initializeViews$2$ConversationActivity(android.view.View)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setMessage(int)>
<org.thoughtcrime.securesms.ConversationActivity: void lambda$initializeViews$3$ConversationActivity(android.view.View)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<org.thoughtcrime.securesms.ConversationActivity: void lambda$initializeViews$4$ConversationActivity(android.view.View)>
<org.thoughtcrime.securesms.ConversationActivity: void lambda$onModified$5$ConversationActivity(org.thoughtcrime.securesms.recipients.Recipient)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.cfg.BaseSettings withClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.annotation.Annotation _findAnnotation(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: boolean _hasAnnotation(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.media.TtmlRenderingWidget: void setActiveCues(java.util.Vector)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<org.thoughtcrime.securesms.ConversationActivity: void onAttachmentDrawerStateChanged(org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$DrawerState)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findEnumValue(java.lang.Enum)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setTitle(int)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.support.v4.view.ViewPager: void addOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener)>
<android.support.v4.view.ViewPager: void addOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog$Builder setView(android.view.View)>
<org.thoughtcrime.securesms.ConversationActivity: void onMediaSelected(android.net.Uri,java.lang.String)>
<android.graphics.drawable.StateListDrawable$StateListState: int addStateSet(int[],android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.ConversationActivity: void onModified(org.thoughtcrime.securesms.recipients.Recipient)>
<android.graphics.drawable.StateListDrawable$StateListState: int indexOfStateSet(int[])>
<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)>
<android.support.v4.view.ViewPager: boolean canScroll(android.view.View,boolean,int,int,int)>
<android.text.PackedObjectVector: java.lang.Object getValue(int,int)>
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)>
<android.text.PackedObjectVector: void insertAt(int,java.lang.Object[])>
<android.text.PackedObjectVector: void deleteAt(int,int)>
<org.thoughtcrime.securesms.ConversationActivity: void setThreadId(long)>
<android.support.v4.view.ViewPager: float distanceInfluenceForSnapDuration(float)>
<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>
<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>
<java.util.zip.ZipCoder: byte[] getBytesUTF8(java.lang.String)>
<java.util.zip.ZipCoder: java.lang.String toStringUTF8(byte[],int)>
<android.support.v4.view.ViewPager: void fakeDragBy(float)>
<android.content.res.Resources$ThemeKey: void append(int,boolean)>
<android.content.IntentFilter: void setPriority(int)>
<android.content.res.Resources$ThemeKey: void setTo(android.content.res.Resources$ThemeKey)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable: void setLoadPosition(long,long)>
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View)>
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View)>
<java.lang.reflect.Proxy$KeyFactory: java.lang.Object apply(java.lang.ClassLoader,java.lang.Class[])>
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$ItemInfo infoForPosition(int)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: void add(java.lang.Object)>
<android.content.IntentFilter: void addAction(java.lang.String)>
<com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring handleUnresolvedReference(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference)>
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)>
<android.support.v4.widget.CircleImageView: void setAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)>
<android.widget.Switch: void setTrackDrawable(android.graphics.drawable.Drawable)>
<android.widget.Switch: void setThumbDrawable(android.graphics.drawable.Drawable)>
<android.support.v7.widget.GridLayout$Axis$1: void walk(int)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat alpha(float)>
<org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout: void addOnKeyboardShownListener(org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout$OnKeyboardShownListener)>
<org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout: void onKeyboardOpen(int)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat setDuration(long)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat setListener(android.support.v4.view.ViewPropertyAnimatorListener)>
<java.lang.reflect.Proxy$1: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat setStartDelay(long)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat setUpdateListener(android.support.v4.view.ViewPropertyAnimatorUpdateListener)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat translationY(float)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder setConnected(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder)>
<android.support.v4.view.ViewPropertyAnimatorCompat: android.support.v4.view.ViewPropertyAnimatorCompat withEndAction(java.lang.Runnable)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder setHangup(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder setVideoStreamingStatus(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder)>
<com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer: com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer withResolved(com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)>
<android.support.v4.view.ViewPager: void onPageScrolled(int,float,int)>
<android.app.ProgressDialog: void setProgress(int)>
<android.app.ProgressDialog: void setSecondaryProgress(int)>
<android.app.ProgressDialog: void setMax(int)>
<android.app.ProgressDialog: void incrementProgressBy(int)>
<android.graphics.Paint: void setCompatibilityScaling(float)>
<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.graphics.Paint: void setFlags(int)>
<com.bumptech.glide.manager.SupportRequestManagerFragment: void setParentFragmentHint(android.support.v4.app.Fragment)>
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<com.bumptech.glide.manager.SupportRequestManagerFragment: void setRequestManager(com.bumptech.glide.RequestManager)>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.util.SparseBooleanArray: void removeAt(int)>
<android.graphics.Paint: void setDither(boolean)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.graphics.Paint: void setLinearText(boolean)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.graphics.Paint: void setSubpixelText(boolean)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder: boolean onResourceReady(android.graphics.drawable.Drawable,java.lang.Object,com.bumptech.glide.request.target.Target,com.bumptech.glide.load.DataSource,boolean)>
<com.bumptech.glide.load.Options: java.lang.Object get(com.bumptech.glide.load.Option)>
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
<android.graphics.Paint: void setColor(int)>
<com.bumptech.glide.load.Options: void putAll(com.bumptech.glide.load.Options)>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.graphics.Paint: void setStrokeMiter(float)>
<android.icu.impl.ICUResourceBundleReader$Array: boolean getValue(int,android.icu.impl.UResource$Value)>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.support.v4.view.ViewPager: void populate(int)>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<android.support.v7.util.DiffUtil$DiffResult$1: void onChanged(int,int,java.lang.Object)>
<android.support.v7.util.DiffUtil$DiffResult$1: void onInserted(int,int)>
<android.support.v7.util.DiffUtil$DiffResult$1: void onMoved(int,int)>
<android.support.v7.util.DiffUtil$DiffResult$1: void onRemoved(int,int)>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<java.util.regex.Matcher: int end(int)>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>
<java.util.regex.Matcher: java.lang.String group(int)>
<java.util.regex.Matcher: java.lang.String group(java.lang.String)>
<android.graphics.Paint: void setTextLocale(java.util.Locale)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment$6: java.lang.Void doInBackground(org.thoughtcrime.securesms.recipients.Recipient[])>
<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>
<android.graphics.Paint: void setElegantTextHeight(boolean)>
<java.lang.Character: int compareTo(java.lang.Character)>
<android.graphics.Paint: void setTextSize(float)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.graphics.Paint: void setTextSkewX(float)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<android.graphics.Paint: void setLetterSpacing(float)>
<android.support.design.widget.CollapsingToolbarLayout: int getMaxOffsetForPinChild(android.view.View)>
<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>
<android.graphics.Paint: void setHyphenEdit(int)>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>
<android.icu.text.TransliteratorParser$RuleHalf: int parse(java.lang.String,int,int,android.icu.text.TransliteratorParser)>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<android.graphics.Paint: float measureText(char[],int,int)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>
<android.support.design.widget.BottomNavigationView$SavedState$1: android.support.design.widget.BottomNavigationView$SavedState createFromParcel(android.os.Parcel)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.support.design.widget.BottomNavigationView$SavedState$1: android.support.design.widget.BottomNavigationView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>
<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>
<android.support.design.widget.BottomNavigationView$SavedState$1: android.support.design.widget.BottomNavigationView$SavedState[] newArray(int)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>
<android.support.v4.view.ViewPager: void removeOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener)>
<android.support.v4.view.ViewPager: void removeOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)>
<android.support.v4.view.ViewPager: void setAdapter(android.support.v4.view.PagerAdapter)>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.support.v4.view.ViewPager: void setCurrentItem(int)>
<android.support.design.widget.CollapsingToolbarLayout: android.support.v4.view.WindowInsetsCompat onWindowInsetChanged(android.support.v4.view.WindowInsetsCompat)>
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>
<dalvik.system.profiler.SamplingProfiler: void start(int)>
<android.support.design.widget.CollapsingToolbarLayout: void setCollapsedTitleTextColor(android.content.res.ColorStateList)>
<android.support.design.widget.CollapsingToolbarLayout: void setContentScrim(android.graphics.drawable.Drawable)>
<android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>
<android.support.v4.view.ViewPager: void setOffscreenPageLimit(int)>
<android.support.v4.view.ViewPager: void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>
<android.media.SoundPool: int load(android.content.Context,int,int)>
<android.support.v4.view.ViewPager: void setPageMarginDrawable(android.graphics.drawable.Drawable)>
<android.support.v4.view.ViewPager: void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer,int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>
<dagger.internal.Loader$1$1: java.lang.Class create(java.lang.String)>
<com.fasterxml.jackson.databind.util.EnumResolver: java.lang.Enum findEnum(java.lang.String)>
<android.support.design.widget.CollapsingToolbarLayout: void setExpandedTitleTextColor(android.content.res.ColorStateList)>
<android.icu.util.IslamicCalendar: void setCalculationType(android.icu.util.IslamicCalendar$CalculationType)>
<android.support.v4.view.ViewPager: void setScrollState(int)>
<com.fasterxml.jackson.databind.util.EnumResolver: java.lang.Enum getEnum(int)>
<android.support.design.widget.CollapsingToolbarLayout: void setScrimAlpha(int)>
<android.support.v4.view.ViewPager: void smoothScrollTo(int,int,int)>
<android.support.design.widget.CollapsingToolbarLayout: void setScrimsShown(boolean)>
<android.support.design.widget.CollapsingToolbarLayout: void setScrimsShown(boolean,boolean)>
<android.support.design.widget.CollapsingToolbarLayout: void setStatusBarScrim(android.graphics.drawable.Drawable)>
<android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.os.CancellationSignal,android.database.sqlite.SQLiteStatementInfo)>
<android.support.design.widget.CollapsingToolbarLayout: void setTitle(java.lang.CharSequence)>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)>
<android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,int,int,int)>
<android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)>
<android.icu.text.TransliteratorParser$RuleHalf: boolean isValidOutput(android.icu.text.TransliteratorParser)>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.icu.text.TransliteratorParser$RuleHalf: boolean isValidInput(android.icu.text.TransliteratorParser)>
<android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<com.annimon.stream.Stream: java.lang.Object collect(com.annimon.stream.Collector)>
<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>
<android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>
<android.database.sqlite.SQLiteSession: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,int,android.os.CancellationSignal)>
<com.google.android.gms.dynamic.zza: void onCreate(android.os.Bundle)>
<com.annimon.stream.Stream: com.annimon.stream.Stream filter(com.annimon.stream.function.Predicate)>
<com.google.android.gms.dynamic.zza: void onSaveInstanceState(android.os.Bundle)>
<com.annimon.stream.Stream: void forEach(com.annimon.stream.function.Consumer)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: boolean addIfNotPresent(java.lang.annotation.Annotation)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: boolean addOrOverride(java.lang.annotation.Annotation)>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<android.icu.impl.Trie$DefaultGetFoldingOffset: int getFoldingOffset(int)>
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>
<com.annimon.stream.Stream: com.annimon.stream.Stream map(com.annimon.stream.function.Function)>
<com.annimon.stream.Stream: com.annimon.stream.LongStream mapToLong(com.annimon.stream.function.ToLongFunction)>
<com.annimon.stream.Stream: com.annimon.stream.Stream onClose(java.lang.Runnable)>
<com.google.android.mms.pdu_alt.NotifyRespInd: void setTransactionId(byte[])>
<sun.net.www.ParseUtil: java.lang.String canonizeString(java.lang.String)>
<android.animation.ObjectAnimator: void setIntValues(int[])>
<android.animation.ObjectAnimator: void setFloatValues(float[])>
<android.animation.ObjectAnimator: void setAutoCancel(boolean)>
<android.animation.ObjectAnimator: boolean shouldAutoCancel(android.animation.AnimationHandler$AnimationFrameCallback)>
<com.soundcloud.android.crop.ImageViewTouchBase: void center(boolean,boolean)>
<com.soundcloud.android.crop.ImageViewTouchBase: float getScale(android.graphics.Matrix)>
<com.soundcloud.android.crop.ImageViewTouchBase: float getValue(android.graphics.Matrix,int)>
<android.support.v4.util.SimpleArrayMap: boolean containsKey(java.lang.Object)>
<android.support.v4.util.SimpleArrayMap: void ensureCapacity(int)>
<com.soundcloud.android.crop.ImageViewTouchBase: void panBy(float,float)>
<android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<org.thoughtcrime.securesms.recipients.RecipientProvider: org.thoughtcrime.securesms.recipients.Recipient getRecipient(android.content.Context,org.thoughtcrime.securesms.database.Address,org.whispersystems.libsignal.util.guava.Optional,org.whispersystems.libsignal.util.guava.Optional,boolean)>
<android.support.v4.view.PagerAdapter: void finishUpdate(android.view.View)>
<android.support.v4.view.PagerAdapter: void finishUpdate(android.view.ViewGroup)>
<com.soundcloud.android.crop.ImageViewTouchBase: void zoomTo(float)>
<android.support.v4.view.PagerAdapter: int getItemPosition(java.lang.Object)>
<android.support.v4.view.PagerAdapter: java.lang.CharSequence getPageTitle(int)>
<android.support.v4.view.PagerAdapter: float getPageWidth(int)>
<com.soundcloud.android.crop.ImageViewTouchBase: void zoomTo(float,float,float,float)>
<android.support.v4.view.PagerAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.support.v4.view.PagerAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)>
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.View,int,java.lang.Object)>
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
<android.support.v4.view.PagerAdapter: void setViewPagerObserver(android.database.DataSetObserver)>
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.View)>
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.ViewGroup)>
<android.support.v4.view.PagerAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.support.v4.app.LoaderManagerImpl: android.support.v4.content.Loader getLoader(int)>
<android.support.v4.util.SimpleArrayMap: int indexOf(java.lang.Object,int)>
<android.support.v4.app.LoaderManagerImpl: android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)>
<android.support.v4.util.SimpleArrayMap: int indexOfKey(java.lang.Object)>
<android.support.v4.app.LoaderManagerImpl: void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat setDomesticCarrierCodeFormattingRule(java.lang.String)>
<android.support.v4.app.LoaderManagerImpl: android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixOptionalWhenFormatting(boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: com.google.i18n.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String)>
<android.support.v4.util.SimpleArrayMap: int indexOfValue(java.lang.Object)>
<android.transition.ChangeBounds: void setResizeClip(boolean)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object keyAt(int)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.app.Service: void stopSelf(int)>
<android.support.v4.util.SimpleArrayMap: void putAll(android.support.v4.util.SimpleArrayMap)>
<android.widget.SpellChecker: void spellCheck(int,int)>
<android.app.Service: void startForeground(int,android.app.Notification)>
<android.app.Service: void stopForeground(boolean)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>
<android.app.Service: void stopForeground(int)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)>
<android.support.v4.util.SimpleArrayMap: java.lang.Object valueAt(int)>
<com.bumptech.glide.load.model.ModelLoaderRegistry: void append(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>
<android.support.v4.util.Pools$SimplePool: boolean release(java.lang.Object)>
<android.content.res.ComplexColor: void setBaseChangingConfigurations(int)>
<com.google.android.gms.iid.zzd: java.lang.String get(java.lang.String)>
<com.google.android.gms.iid.zzd: java.lang.String get(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader: boolean isValidReferencePropertyName(java.lang.String,com.fasterxml.jackson.core.JsonParser)>
<com.google.android.gms.iid.zzd: void zza(android.content.SharedPreferences$Editor,java.lang.String,java.lang.String,java.lang.String)>
<com.google.android.gms.iid.zzd: void zza(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.google.android.gms.iid.zzd: java.security.KeyPair zze(java.lang.String,long)>
<org.thoughtcrime.securesms.giph.model.GiphyPaddedUrl: boolean equals(java.lang.Object)>
<com.google.android.gms.iid.zzd: java.lang.String zzh(java.lang.String,java.lang.String,java.lang.String)>
<com.google.android.gms.iid.zzd: void zzi(java.lang.String,java.lang.String,java.lang.String)>
<com.google.android.gms.iid.zzd: void zzkr(java.lang.String)>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder setId(int)>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder setPrivateKey(com.google.protobuf.ByteString)>
<com.google.android.gms.iid.zzd: java.security.KeyPair zzks(java.lang.String)>
<com.google.android.gms.iid.zzd: void zzkt(java.lang.String)>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder setPublicKey(com.google.protobuf.ByteString)>
<com.google.android.gms.iid.zzd: java.security.KeyPair zzkv(java.lang.String)>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder setSignature(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder setTimestamp(long)>
<com.google.zxing.qrcode.decoder.Mode: int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version)>
<org.thoughtcrime.securesms.components.InputPanel: void onRecordCanceled(float)>
<org.thoughtcrime.securesms.components.InputPanel: void onRecordMoved(float,float)>
<org.thoughtcrime.securesms.components.InputPanel: void onRecordPressed(float)>
<org.thoughtcrime.securesms.components.InputPanel: void onRecordReleased(float)>
<android.view.ViewGroup$ViewLocationHolder: int compareTo(android.view.ViewGroup$ViewLocationHolder)>
<java.lang.reflect.Method$1: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder: com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder mergeFrom(com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange)>
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.lang.reflect.Method$1: int compare(java.lang.Object,java.lang.Object)>
<libcore.reflect.ListOfVariables: void add(java.lang.reflect.TypeVariable)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder: com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder setEnd(int)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder: com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange$Builder setStart(int)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.security.Timestamp: boolean equals(java.lang.Object)>
<com.google.android.exoplayer2.audio.AudioCapabilities: boolean supportsEncoding(int)>
<org.thoughtcrime.securesms.ContactSelectionActivity$RefreshDirectoryTask: java.lang.Void doInBackground(android.content.Context[])>
<android.os.LocaleList: java.util.Locale get(int)>
<org.thoughtcrime.securesms.ContactSelectionActivity$RefreshDirectoryTask: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.ConversationActivity$10: java.lang.Void doInBackground(java.lang.Void[])>
<android.os.LocaleList: boolean equals(java.lang.Object)>
<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: boolean _isStdKeyDeser(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.KeyDeserializer)>
<com.dd.CircularProgressButton$SavedState$1: com.dd.CircularProgressButton$SavedState createFromParcel(android.os.Parcel)>
<com.dd.CircularProgressButton$SavedState$1: com.dd.CircularProgressButton$SavedState[] newArray(int)>
<android.os.LocaleList: java.util.Locale getFirstMatchWithEnglishSupported(java.lang.String[])>
<android.util.PathParser$PathData: void setPathData(android.util.PathParser$PathData)>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: void setIgnorableProperties(java.lang.String[])>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: com.fasterxml.jackson.databind.deser.std.MapDeserializer withResolved(com.fasterxml.jackson.databind.KeyDeserializer,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer,java.util.HashSet)>
<android.view.HandlerActionQueue$HandlerAction: boolean matches(java.lang.Runnable)>
<java.net.DefaultFileNameMap: java.lang.String getContentTypeFor(java.lang.String)>
<com.doomonafireball.betterpickers.radialtimepicker.RadialTextsView: void setTheme(android.content.Context,boolean)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment: void setClickListener(android.view.View$OnClickListener)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyDisplayFragment: void setScannedFingerprint(java.lang.String)>
<org.thoughtcrime.securesms.DeviceAddFragment: void setScanListener(org.thoughtcrime.securesms.qr.ScanListener)>
<android.widget.ProgressBar$1: void setValue(android.widget.ProgressBar,float)>
<android.widget.ProgressBar$1: java.lang.Float get(android.widget.ProgressBar)>
<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>
<com.bumptech.glide.load.engine.bitmap_recycle.IntegerArrayAdapter: int getArrayLength(int[])>
<android.widget.ActionMenuPresenter: void onConfigurationChanged(android.content.res.Configuration)>
<org.thoughtcrime.securesms.ConversationActivity$5$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.widget.ActionMenuPresenter: void setWidthLimit(int,boolean)>
<android.widget.ActionMenuPresenter: void setReserveOverflow(boolean)>
<android.widget.ActionMenuPresenter: void setItemLimit(int)>
<android.widget.ActionMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<android.widget.ActionMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<android.widget.ActionMenuPresenter: void bindItemView(com.android.internal.view.menu.MenuItemImpl,com.android.internal.view.menu.MenuView$ItemView)>
<android.widget.ActionMenuPresenter: boolean shouldIncludeItem(int,com.android.internal.view.menu.MenuItemImpl)>
<com.google.android.gms.iid.zzc: void zzb(android.content.Intent,java.lang.String)>
<android.view.accessibility.CaptioningManager$CaptionStyle: android.view.accessibility.CaptioningManager$CaptionStyle applyStyle(android.view.accessibility.CaptioningManager$CaptionStyle)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)>
<com.google.android.gms.iid.zzc: void zzs(android.content.Intent)>
<android.widget.ActionMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.provider.Settings$NameValueCache: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int,int)>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int,int)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$FileOptions)>
<com.fasterxml.jackson.core.util.BufferRecycler: byte[] balloc(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: int byteBufferLength(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: char[] calloc(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: int charBufferLength(int)>
<com.fasterxml.jackson.core.util.BufferRecycler: void releaseByteBuffer(int,byte[])>
<com.fasterxml.jackson.core.util.BufferRecycler: void releaseCharBuffer(int,char[])>
<org.thoughtcrime.securesms.attachments.AttachmentId: boolean equals(java.lang.Object)>
<java.io.ObjectStreamClass$FieldReflector: void getPrimFieldValues(java.lang.Object,byte[])>
<java.io.ObjectStreamClass$FieldReflector: void setPrimFieldValues(java.lang.Object,byte[])>
<java.io.ObjectStreamClass$FieldReflector: void getObjFieldValues(java.lang.Object,java.lang.Object[])>
<java.io.ObjectStreamClass$FieldReflector: void setObjFieldValues(java.lang.Object,java.lang.Object[])>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setCcGenericServices(boolean)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setJavaGenerateEqualsAndHash(boolean)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setJavaGenericServices(boolean)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setJavaMultipleFiles(boolean)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setOptimizeFor(com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode)>
<com.google.protobuf.DescriptorProtos$FileOptions$Builder: com.google.protobuf.DescriptorProtos$FileOptions$Builder setPyGenericServices(boolean)>
<com.google.i18n.phonenumbers.internal.RegexCache$LRUCache: java.lang.Object get(java.lang.Object)>
<com.google.i18n.phonenumbers.internal.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)>
<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: void encode(int[],int)>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: com.fasterxml.jackson.databind.deser.SettableAnyProperty withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)>
<android.icu.text.MessageFormat: void applyPattern(java.lang.String)>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.thoughtcrime.securesms.components.InputPanel$2: void onSuccess(java.lang.Void)>
<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<org.thoughtcrime.securesms.components.RecentPhotoViewRail$RecentPhotoAdapter: void onBindItemViewHolder(org.thoughtcrime.securesms.components.RecentPhotoViewRail$RecentPhotoAdapter$RecentPhotoViewHolder,android.database.Cursor)>
<android.widget.Editor$SuggestionInfo: void setSpanInfo(android.text.style.SuggestionSpan,int,int)>
<org.thoughtcrime.securesms.components.RecentPhotoViewRail$RecentPhotoAdapter: void setListener(org.thoughtcrime.securesms.components.RecentPhotoViewRail$OnItemClickedListener)>
<android.support.v4.content.AsyncTaskLoader$LoadTask: java.lang.Object doInBackground(java.lang.Object[])>
<android.support.v4.content.AsyncTaskLoader$LoadTask: java.lang.Object doInBackground(java.lang.Void[])>
<android.support.v4.content.AsyncTaskLoader$LoadTask: void onCancelled(java.lang.Object)>
<android.support.v4.content.AsyncTaskLoader$LoadTask: void onPostExecute(java.lang.Object)>
<com.google.android.gms.dynamic.zza$1: void zza(com.google.android.gms.dynamic.LifecycleDelegate)>
<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: boolean isRunningOrShutdown(boolean)>
<java.util.concurrent.ThreadPoolExecutor: void runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioSessionId(int)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void audioTrackUnderrun(int,long,long)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>
<org.webrtc.Histogram: void addSample(int)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void disabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<android.support.design.widget.AppBarLayout: void addOnOffsetChangedListener(android.support.design.widget.AppBarLayout$OnOffsetChangedListener)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void enabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<com.google.android.exoplayer2.audio.AudioRendererEventListener$EventDispatcher: void inputFormatChanged(com.google.android.exoplayer2.Format)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapLoadTask: java.lang.Integer doInBackground(java.lang.Void[])>
<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$BitmapLoadTask: void onPostExecute(java.lang.Integer)>
<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<com.android.internal.policy.DecorView: void setBackgroundFallback(int)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque: boolean offerFirst(java.lang.Object)>
<android.support.design.widget.AppBarLayout: android.support.v4.view.WindowInsetsCompat onWindowInsetChanged(android.support.v4.view.WindowInsetsCompat)>
<com.android.internal.policy.DecorView: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<android.support.design.widget.AppBarLayout: void removeOnOffsetChangedListener(android.support.design.widget.AppBarLayout$OnOffsetChangedListener)>
<com.android.internal.policy.DecorView: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>
<android.content.ContextWrapper: void startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)>
<org.webrtc.CameraEnumerationAndroid$2: int diff(org.webrtc.Size)>
<android.support.design.widget.AppBarLayout: void setExpanded(boolean,boolean)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque: boolean removeFirstOccurrence(java.lang.Object)>
<android.media.MediaPlayer$TimeProvider: void onPaused(boolean)>
<android.media.MediaPlayer$TimeProvider: void onBuffering(boolean)>
<org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque: void unlink(org.thoughtcrime.securesms.util.deque.LinkedBlockingDeque$Node)>
<android.media.MediaPlayer$TimeProvider: void onSeekComplete(android.media.MediaPlayer)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<com.google.android.gms.common.SupportErrorDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<java.util.WeakHashMap: int hash(java.lang.Object)>
<android.media.MediaPlayer$TimeProvider: void notifyAt(long,android.media.MediaTimeProvider$OnMediaTimeListener)>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.media.MediaPlayer$TimeProvider: void scheduleUpdate(android.media.MediaTimeProvider$OnMediaTimeListener)>
<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>
<org.thoughtcrime.securesms.components.emoji.EmojiEditText: void insertEmoji(java.lang.String)>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.media.MediaPlayer$TimeProvider: void cancelNotifications(android.media.MediaTimeProvider$OnMediaTimeListener)>
<android.support.design.widget.CircularBorderDrawable: void setBorderTint(android.content.res.ColorStateList)>
<org.thoughtcrime.securesms.database.Address$ExternalAddressFormatter: java.lang.String format(java.lang.String)>
<android.support.design.widget.CircularBorderDrawable: void setBorderWidth(float)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.support.design.widget.CircularBorderDrawable: void setGradientColors(int,int,int,int)>
<android.support.design.widget.CircularBorderDrawable: void setRotation(float)>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<java.util.WeakHashMap: void resize(int)>
<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
<android.graphics.drawable.VectorDrawable$VFullPath$9: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$9: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<com.android.internal.policy.DecorView: void setWindowFrame(android.graphics.drawable.Drawable)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setYear(int)>
<sun.util.calendar.CalendarDate: void setLeapYear(boolean)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>
<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<sun.util.calendar.CalendarDate: void setTimeOfDay(long)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.util.calendar.CalendarDate: void setDayOfWeek(int)>
<sun.util.calendar.CalendarDate: void setNormalized(boolean)>
<sun.util.calendar.CalendarDate: void setZoneOffset(int)>
<sun.util.calendar.CalendarDate: void setDaylightSaving(int)>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector,java.util.HashMap)>
<android.widget.HorizontalScrollView: void setFillViewport(boolean)>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: java.util.Collection collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector)>
<com.tomergoldst.tooltips.ToolTipsManager: boolean dismiss(android.view.View,boolean)>
<com.tomergoldst.tooltips.ToolTipsManager: android.view.View find(java.lang.Integer)>
<com.tomergoldst.tooltips.ToolTipsManager: boolean findAndDismiss(android.view.View)>
<com.tomergoldst.tooltips.ToolTipsManager: boolean isVisible(android.view.View)>
<com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver: java.util.Collection collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedMember,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.AnnotationIntrospector,com.fasterxml.jackson.databind.JavaType)>
<com.tomergoldst.tooltips.ToolTipsManager: android.view.View show(com.tomergoldst.tooltips.ToolTip)>
<android.media.WebVttParser$3: android.media.TextTrackRegion parseRegion(java.lang.String)>
<android.text.Layout$TabStops: void reset(int,java.lang.Object[])>
<android.text.Layout$TabStops: float nextTab(float)>
<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>
<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addExtras(android.os.Bundle)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addRemoteInput(android.app.RemoteInput)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAllowGeneratedReplies(boolean)>
<com.bumptech.glide.provider.EncoderRegistry: void append(java.lang.Class,com.bumptech.glide.load.Encoder)>
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>
<android.widget.HorizontalScrollView: boolean fullScroll(int)>
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger shiftRight(int)>
<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>
<java.math.BigInteger: boolean testBit(int)>
<com.android.internal.policy.DecorView: void enableCaption(boolean)>
<java.math.BigInteger: java.math.BigInteger setBit(int)>
<com.android.internal.policy.DecorView: void setWindow(com.android.internal.policy.PhoneWindow)>
<com.android.internal.policy.DecorView: void onResourcesLoaded(android.view.LayoutInflater,int)>
<android.widget.HorizontalScrollView: void smoothScrollBy(int,int)>
<java.math.BigInteger: int compareTo(java.math.BigInteger)>
<org.thoughtcrime.securesms.TransportOptions: void addOnTransportChangedListener(org.thoughtcrime.securesms.TransportOptions$OnTransportChangedListener)>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalInfo$PatternInfo getIntervalPattern(java.lang.String,int)>
<java.math.BigInteger: java.lang.String toString(int)>
<android.icu.text.DateIntervalInfo: void setFallbackIntervalPattern(java.lang.String)>
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger pow(int)>
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalFormat$BestMatchInfo getBestSkeleton(java.lang.String)>
<org.thoughtcrime.securesms.TransportOptions: void setDefaultSubscriptionId(org.whispersystems.libsignal.util.guava.Optional)>
<org.thoughtcrime.securesms.TransportOptions: void setDefaultTransport(org.thoughtcrime.securesms.TransportOption$Type)>
<org.thoughtcrime.securesms.TransportOptions: void setSelectedTransport(org.thoughtcrime.securesms.TransportOption)>
<android.widget.HorizontalScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.HorizontalScrollView: void fling(int)>
<android.icu.util.RuleBasedTimeZone: void addTransitionRule(android.icu.util.TimeZoneRule)>
<com.android.internal.policy.DecorView: void updateLogTag(android.view.WindowManager$LayoutParams)>
<android.support.v7.widget.helper.ItemTouchHelper: void attachToRecyclerView(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.helper.ItemTouchHelper: boolean checkSelectForSwipe(int,android.view.MotionEvent,int)>
<android.support.v7.widget.helper.ItemTouchHelper: int endRecoverAnimation(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.support.v7.widget.helper.ItemTouchHelper: android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation findAnimation(android.view.MotionEvent)>
<android.support.v7.widget.helper.ItemTouchHelper: android.view.View findChildView(android.view.MotionEvent)>
<org.thoughtcrime.securesms.components.emoji.EmojiDrawer: void setDrawerListener(org.thoughtcrime.securesms.components.emoji.EmojiDrawer$EmojiDrawerListener)>
<android.support.v7.widget.helper.ItemTouchHelper: void moveIfNecessary(android.support.v7.widget.RecyclerView$ViewHolder)>
<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>
<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
<android.support.v7.widget.helper.ItemTouchHelper: void onChildViewAttachedToWindow(android.view.View)>
<android.support.v7.widget.helper.ItemTouchHelper: void onChildViewDetachedFromWindow(android.view.View)>
<okhttp3.CipherSuite$1: int compare(java.lang.String,java.lang.String)>
<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>
<android.widget.RelativeLayout$TopToBottomLeftToRightComparator: int compare(android.view.View,android.view.View)>
<android.support.v7.widget.helper.ItemTouchHelper: void postDispatchSwipe(android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation,int)>
<android.support.v7.widget.helper.ItemTouchHelper: void removeChildDrawingOrderCallbackIfNecessary(android.view.View)>
<android.support.v4.provider.FontsContractCompat$5: int compare(byte[],byte[])>
<java.util.HashMap: void treeifyBin(java.util.HashMap$Node[],int)>
<android.support.v7.widget.helper.ItemTouchHelper: void select(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>
<android.support.v7.app.ToolbarActionBar$ToolbarCallbackWrapper: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.support.v7.widget.helper.ItemTouchHelper: void updateDxDy(android.view.MotionEvent,int,int)>
<com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer: java.lang.Object convertValue(java.lang.Object)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>
<com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer: com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer withDelegate(com.fasterxml.jackson.databind.util.Converter,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonDeserializer)>
<com.android.internal.view.FloatingActionMode: void setFloatingToolbar(com.android.internal.widget.FloatingToolbar)>
<android.telephony.TelephonyManager: int getCurrentPhoneType(int)>
<android.telephony.TelephonyManager: int getCurrentPhoneTypeForSlot(int)>
<sun.util.locale.BaseLocale$Key: int compareTo(sun.util.locale.BaseLocale$Key)>
<android.support.v4.widget.ViewDragHelper$Callback: int clampViewPositionHorizontal(android.view.View,int,int)>
<android.support.v4.widget.ViewDragHelper$Callback: int getOrderedChildIndex(int)>
<android.support.v4.widget.ViewDragHelper$Callback: int getViewHorizontalDragRange(android.view.View)>
<android.support.v7.widget.ChildHelper: void addView(android.view.View,int,boolean)>
<android.support.v4.widget.ViewDragHelper$Callback: void onEdgeDragStarted(int,int)>
<android.support.v4.widget.ViewDragHelper$Callback: boolean onEdgeLock(int)>
<android.support.v4.widget.ViewDragHelper$Callback: void onEdgeTouched(int,int)>
<android.support.v7.widget.ChildHelper: void addView(android.view.View,boolean)>
<android.support.v7.widget.ChildHelper: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
<java.util.Date: void setTime(long)>
<android.support.v7.widget.ChildHelper: void detachViewFromParent(int)>
<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>
<java.util.Date: boolean before(java.util.Date)>
<android.support.v7.widget.ChildHelper: android.view.View findHiddenNonRemovedView(int)>
<java.util.Date: boolean after(java.util.Date)>
<android.support.v7.widget.ChildHelper: android.view.View getChildAt(int)>
<java.util.Date: int compareTo(java.util.Date)>
<android.support.v7.widget.ChildHelper: android.view.View getUnfilteredChildAt(int)>
<android.support.v7.widget.ChildHelper: void hide(android.view.View)>
<android.support.v7.widget.ChildHelper: int indexOfChild(android.view.View)>
<android.support.v7.widget.ChildHelper: boolean isHidden(android.view.View)>
<android.icu.text.NumberingSystem$1: android.icu.text.NumberingSystem createInstance(java.lang.String,android.icu.text.NumberingSystem$LocaleLookupData)>
<android.support.v7.widget.ChildHelper: void removeView(android.view.View)>
<android.support.v7.widget.ChildHelper: void removeViewAt(int)>
<android.support.v7.widget.ChildHelper: boolean removeViewIfHidden(android.view.View)>
<android.support.v7.widget.ChildHelper: void unhide(android.view.View)>
<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>
<org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector: void updateStateByEvent(android.view.MotionEvent)>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>
<android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)>
<android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)>
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<com.google.android.exoplayer2.metadata.MetadataDecoderFactory$1: com.google.android.exoplayer2.metadata.MetadataDecoder createDecoder(com.google.android.exoplayer2.Format)>
<android.widget.AdapterView: void setFocusable(boolean)>
<android.widget.AdapterView: void setFocusableInTouchMode(boolean)>
<com.google.android.exoplayer2.metadata.MetadataDecoderFactory$1: boolean supportsFormat(com.google.android.exoplayer2.Format)>
<android.widget.AdapterView: long getItemIdAtPosition(int)>
<org.thoughtcrime.securesms.service.SmsListener: boolean isChallenge(android.content.Context,java.lang.String)>
<org.thoughtcrime.securesms.service.SmsListener: java.lang.String parseChallenge(java.lang.String)>
<android.widget.AdapterView: int lookForSelectablePosition(int,boolean)>
<android.widget.AdapterView: void setSelectedPositionInt(int)>
<android.widget.AdapterView: void setNextSelectedPositionInt(int)>
<android.app.LoadedApk: android.content.res.AssetManager getAssets(android.app.ActivityThread)>
<android.app.LoadedApk: android.content.res.Resources getResources(android.app.ActivityThread)>
<android.app.LoadedApk: android.app.Application makeApplication(boolean,android.app.Instrumentation)>
<android.net.Uri: int compareTo(android.net.Uri)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: android.database.Cursor getConversation(long)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: android.database.Cursor getConversation(long,long)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: int getConversationCount(long)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: android.database.Cursor getConversationSnippet(long)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: android.database.Cursor getIdentityConflictMessagesForThread(long)>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.media.WebVttRenderingWidget$RegionLayout: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle,float)>
<com.bumptech.glide.util.LruCache: void trimToSize(int)>
<android.media.WebVttRenderingWidget$RegionLayout: void measureForParent(int,int)>
<org.thoughtcrime.securesms.profiles.GroupShareProfileView: void lambda$initialize$1$GroupShareProfileView(android.view.View)>
<android.media.WebVttRenderingWidget$RegionLayout: void put(android.media.TextTrackCue)>
<org.thoughtcrime.securesms.profiles.GroupShareProfileView: void lambda$null$0$GroupShareProfileView(android.content.DialogInterface,int)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: org.thoughtcrime.securesms.database.MmsSmsDatabase$Reader readerFor(android.database.Cursor)>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: org.thoughtcrime.securesms.database.MmsSmsDatabase$Reader readerFor(android.database.Cursor,org.thoughtcrime.securesms.crypto.MasterSecret)>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: org.thoughtcrime.securesms.IntroPagerAdapter$IntroPage getPage(int)>
<android.net.Uri: void checkFileUriExposed(java.lang.String)>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStoragePublicDirs(java.lang.String)>
<org.jraf.android.backport.switchwidget.Switch: void setSwitchTextAppearance(android.content.Context,int)>
<org.thoughtcrime.securesms.sms.IncomingTextMessage$1: org.thoughtcrime.securesms.sms.IncomingTextMessage createFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.sms.IncomingTextMessage$1: org.thoughtcrime.securesms.sms.IncomingTextMessage[] newArray(int)>
<org.jraf.android.backport.switchwidget.Switch: void setSwitchTypeface(android.graphics.Typeface)>
<org.jraf.android.backport.switchwidget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.icu.impl.SimpleCache: java.lang.Object get(java.lang.Object)>
<android.icu.impl.SimpleCache: void put(java.lang.Object,java.lang.Object)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder mergeFrom(com.google.protobuf.DescriptorProtos$UninterpretedOption)>
<android.support.v4.widget.NestedScrollView: boolean arrowScroll(int)>
<org.greenrobot.eventbus.EventBus: java.lang.Object getStickyEvent(java.lang.Class)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder setDoubleValue(double)>
<org.greenrobot.eventbus.EventBus: void invokeSubscriber(org.greenrobot.eventbus.PendingPost)>
<org.greenrobot.eventbus.EventBus: void invokeSubscriber(org.greenrobot.eventbus.Subscription,java.lang.Object)>
<org.thoughtcrime.securesms.providers.PersistentBlobProvider: android.net.Uri create(org.thoughtcrime.securesms.crypto.MasterSecret,java.io.InputStream,java.lang.String,java.lang.String,java.lang.Long)>
<org.greenrobot.eventbus.EventBus: boolean isRegistered(java.lang.Object)>
<org.greenrobot.eventbus.EventBus: void post(java.lang.Object)>
<org.thoughtcrime.securesms.providers.PersistentBlobProvider: android.net.Uri create(org.thoughtcrime.securesms.crypto.MasterSecret,byte[],java.lang.String,java.lang.String)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder setNegativeIntValue(long)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder setPositiveIntValue(long)>
<android.support.v4.widget.NestedScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<org.greenrobot.eventbus.EventBus: void postSticky(java.lang.Object)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder: com.google.protobuf.DescriptorProtos$UninterpretedOption$Builder setStringValue(com.google.protobuf.ByteString)>
<org.greenrobot.eventbus.EventBus: void register(java.lang.Object)>
<org.thoughtcrime.securesms.providers.PersistentBlobProvider: boolean delete(android.net.Uri)>
<org.greenrobot.eventbus.EventBus: java.lang.Object removeStickyEvent(java.lang.Class)>
<org.thoughtcrime.securesms.ConversationActivity$25: java.lang.Void doInBackground(java.lang.Long[])>
<com.klinker.android.send_message.MmsReceivedReceiver$NotifyRespTask: java.lang.Void doInBackground(java.lang.Void[])>
<org.greenrobot.eventbus.EventBus: void unregister(java.lang.Object)>
<com.android.internal.policy.PhoneWindow$RotationWatcher: void removeWindow(com.android.internal.policy.PhoneWindow)>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedFling(float,float,boolean)>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedPreFling(float,float)>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedPreScroll(int,int,int[],int[])>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedPreScroll(int,int,int[],int[],int)>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedScroll(int,int,int,int,int[])>
<android.support.v4.widget.NestedScrollView: boolean dispatchNestedScroll(int,int,int,int,int[],int)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription _findStdJdkCollectionDesc(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.BasicBeanDescription _findStdTypeDesc(com.fasterxml.jackson.databind.JavaType)>
<android.support.v4.widget.NestedScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: boolean _isStdJDKCollection(com.fasterxml.jackson.databind.JavaType)>
<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<android.animation.StateListAnimator: void setTarget(android.view.View)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector collectProperties(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,boolean,java.lang.String)>
<android.support.v4.widget.NestedScrollView: void fling(int)>
<android.support.v4.widget.NestedScrollView: boolean fullScroll(int)>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector collectPropertiesWithBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,boolean)>
<android.animation.StateListAnimator: void setState(int[])>
<com.fasterxml.jackson.databind.introspect.BasicClassIntrospector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector constructPropertyCollector(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType,boolean,java.lang.String)>
<android.support.v4.widget.NestedScrollView: boolean hasNestedScrollingParent(int)>
<android.animation.StateListAnimator: void setChangingConfigurations(int)>
<android.animation.StateListAnimator: void appendChangingConfigurations(int)>
<android.icu.util.TimeArrayTimeZoneRule: java.util.Date getNextStart(long,int,int,boolean)>
<android.support.v4.widget.NestedScrollView: void onOverScrolled(int,int,boolean,boolean)>
<android.support.v7.widget.helper.ItemTouchHelper$Callback$1: float getInterpolation(float)>
<android.os.StrictMode$AndroidBlockGuardPolicy: void onResourceMismatch(java.lang.Object)>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$FieldDescriptorProto)>
<android.os.StrictMode$AndroidBlockGuardPolicy: void setPolicyMask(int)>
<android.os.StrictMode$AndroidBlockGuardPolicy: void startHandlingViolationException(dalvik.system.BlockGuard$BlockGuardPolicyException)>
<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolationWithTimingAttempt(android.os.StrictMode$ViolationInfo)>
<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolation(android.os.StrictMode$ViolationInfo)>
<android.support.v4.widget.CursorAdapter: void changeCursor(android.database.Cursor)>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$FieldOptions)>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder setLabel(com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label)>
<android.support.v4.widget.NestedScrollView: boolean overScrollByCompat(int,int,int,int,int,int,int,int,boolean)>
<android.support.v4.widget.CursorAdapter: void init(android.content.Context,android.database.Cursor,int)>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder setNumber(int)>
<org.thoughtcrime.securesms.ConversationAdapter$HeaderViewHolder: void setText(java.lang.CharSequence)>
<org.thoughtcrime.securesms.components.AnimatingToggle: void display(android.view.View)>
<org.thoughtcrime.securesms.components.AnimatingToggle: void displayQuick(android.view.View)>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Builder setType(com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type)>
<org.thoughtcrime.securesms.profiles.UnknownSenderView$2: java.lang.Void doInBackground(java.lang.Void[])>
<android.support.v4.widget.NestedScrollView: boolean pageScroll(int)>
<android.animation.Keyframe: void setValueWasSetOnStart(boolean)>
<android.animation.Keyframe: void setFraction(float)>
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>
<android.media.TtmlNode: boolean isActive(long,long)>
<android.support.v4.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<android.support.v4.widget.NestedScrollView: void setFillViewport(boolean)>
<android.support.v4.widget.NestedScrollView: void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView$OnScrollChangeListener)>
<android.support.v4.widget.NestedScrollView: void smoothScrollBy(int,int)>
<android.support.v4.widget.NestedScrollView: boolean startNestedScroll(int)>
<android.support.v4.widget.NestedScrollView: boolean startNestedScroll(int,int)>
<android.support.v4.widget.NestedScrollView: void stopNestedScroll(int)>
<com.google.protobuf.Descriptors$FieldDescriptor: int compareTo(com.google.protobuf.Descriptors$FieldDescriptor)>
<com.fasterxml.jackson.databind.ext.OptionalHandlerFactory: com.fasterxml.jackson.databind.JsonSerializer findSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: void assignIndex(int)>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.MessageLite$Builder internalMergeFrom(com.google.protobuf.MessageLite$Builder,com.google.protobuf.MessageLite)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: void setManagedReferenceName(java.lang.String)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: void setObjectIdInfo(com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: void setViews(java.lang.Class[])>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: boolean visibleInView(java.lang.Class)>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty withSimpleName(java.lang.String)>
<android.icu.text.UFormat: android.icu.util.ULocale getLocale(android.icu.util.ULocale$Type)>
<android.icu.text.UFormat: void setLocale(android.icu.util.ULocale,android.icu.util.ULocale)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: int clampViewPositionVertical(android.view.View,int,int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: int getViewVerticalDragRange(android.view.View)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: void onViewCaptured(android.view.View,int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: void onViewDragStateChanged(int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: void onViewPositionChanged(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: void onViewReleased(android.view.View,float,float)>
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>
<android.drm.DrmManagerClient: int openConvertSession(java.lang.String)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus closeConvertSession(int)>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$ViewDragHelperCallback: boolean tryCaptureView(android.view.View,int)>
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>
<com.nineoldandroids.animation.PropertyValuesHolder: void setProperty(com.nineoldandroids.util.Property)>
<com.nineoldandroids.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<android.view.ViewGroup: void clearChildFocus(android.view.View)>
<com.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>
<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>
<android.icu.text.PluralFormat$PluralSelectorAdapter: java.lang.String select(java.lang.Object,double)>
<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int,int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setDensity(int)>
<org.thoughtcrime.securesms.database.GroupDatabase: void create(java.lang.String,java.lang.String,java.util.List,org.whispersystems.signalservice.api.messages.SignalServiceAttachmentPointer,java.lang.String)>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<org.thoughtcrime.securesms.database.GroupDatabase: org.whispersystems.libsignal.util.guava.Optional getGroup(android.database.Cursor)>
<org.thoughtcrime.securesms.database.GroupDatabase: org.whispersystems.libsignal.util.guava.Optional getGroup(java.lang.String)>
<org.thoughtcrime.securesms.database.GroupDatabase: java.util.List getGroupMembers(java.lang.String,boolean)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.core.SerializableString compileString(java.lang.String)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>
<org.thoughtcrime.securesms.database.GroupDatabase: org.thoughtcrime.securesms.database.GroupDatabase$Reader getGroupsFilteredByTitle(java.lang.String)>
<android.view.ViewGroup: boolean notifyChildOfDragStart(android.view.View)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getDefaultTyper(com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.database.GroupDatabase: java.lang.String getOrCreateGroupForMembers(java.util.List,boolean)>
<android.graphics.drawable.GradientDrawable$GradientState: void setShape(int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientColors(int[])>
<android.graphics.drawable.GradientDrawable$GradientState: void setSolidColors(android.content.res.ColorStateList)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(java.lang.Class)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>
<android.graphics.drawable.GradientDrawable$GradientState: void setStroke(int,android.content.res.ColorStateList,float,float)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeIdResolver typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<org.thoughtcrime.securesms.database.GroupDatabase: void remove(java.lang.String,org.thoughtcrime.securesms.database.Address)>
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadius(float)>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadii(float[])>
<org.thoughtcrime.securesms.database.GroupDatabase: void setActive(java.lang.String,boolean)>
<org.thoughtcrime.securesms.database.GroupDatabase: void updateAvatar(java.lang.String,byte[])>
<org.thoughtcrime.securesms.database.GroupDatabase: void updateMembers(java.lang.String,java.util.List)>
<org.thoughtcrime.securesms.InviteActivity$SendSmsInvitesAsyncTask: java.lang.Void doInBackground(java.lang.String[])>
<org.thoughtcrime.securesms.database.GroupDatabase: void updateTitle(java.lang.String,java.lang.String)>
<org.thoughtcrime.securesms.InviteActivity$SendSmsInvitesAsyncTask: void onPostExecute(java.lang.Void)>
<android.support.v7.widget.AbsActionBarView: int measureChildView(android.view.View,int,int,int)>
<sun.security.x509.AlgorithmId: boolean equals(sun.security.x509.AlgorithmId)>
<android.support.v7.widget.AbsActionBarView: int positionChild(android.view.View,int,int,int,boolean)>
<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>
<android.view.ViewGroup: void transformPointToViewLocal(float[],android.view.View)>
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>
<android.view.ViewGroup: void setTransitionGroup(boolean)>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions decode(java.lang.Class)>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy)>
<android.support.v4.view.AccessibilityDelegateCompat: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.support.v4.view.AccessibilityDelegateCompat: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)>
<android.support.v4.view.AccessibilityDelegateCompat: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEvent(android.view.View,int)>
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient setConnectTimeout(int)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient setReadTimeout(int)>
<org.thoughtcrime.securesms.components.RecentPhotoViewRail: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpClient setProxy(java.net.Proxy)>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions error(int)>
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
<android.view.ViewGroup: void onDebugDrawMargins(android.graphics.Canvas,android.graphics.Paint)>
<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: boolean assignParameter(int,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: void bufferAnyProperty(com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.lang.String,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: void bufferMapProperty(java.lang.Object,java.lang.Object)>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions priority(com.bumptech.glide.Priority)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: void bufferProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty,java.lang.Object)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: java.lang.Object[] getParameters(java.lang.Object[])>
<android.support.v4.print.PrintHelper$PrintHelperApi19$3$1: android.graphics.Bitmap doInBackground(android.net.Uri[])>
<android.support.v4.print.PrintHelper$PrintHelperApi19$3$1: void onCancelled(android.graphics.Bitmap)>
<android.support.v4.print.PrintHelper$PrintHelperApi19$3$1: void onPostExecute(android.graphics.Bitmap)>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions skipMemoryCache(boolean)>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: void inject(com.fasterxml.jackson.databind.deser.SettableBeanProperty[])>
<org.thoughtcrime.securesms.webrtc.locks.AccelerometerListener: void enable(boolean)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<com.google.android.exoplayer2.Timeline$Period: com.google.android.exoplayer2.Timeline$Period set(java.lang.Object,java.lang.Object,int,long,long)>
<android.widget.Editor$SuggestionHelper: int getSuggestionInfo(android.widget.Editor$SuggestionInfo[],android.widget.Editor$SuggestionSpanInfo)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<org.thoughtcrime.securesms.ConversationActivity$28: java.lang.Void doInBackground(java.lang.Void[])>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean isNaturalTypeWithStdHandling(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void dispatchViewAdded(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioDecoderInitialized(java.lang.String,long,long)>
<android.view.ViewGroup: void onViewAdded(android.view.View)>
<android.view.ViewGroup: void dispatchViewRemoved(android.view.View)>
<android.view.ViewGroup: void onViewRemoved(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioDisabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<android.transition.VisibilityPropagation: void captureValues(android.transition.TransitionValues)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioEnabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioInputFormatChanged(com.google.android.exoplayer2.Format)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioSessionId(int)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onAudioTrackUnderrun(int,long,long)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onCues(java.util.List)>
<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onDroppedFrames(int,long)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onMetadata(com.google.android.exoplayer2.metadata.Metadata)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onRenderedFirstFrame(android.view.Surface)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onVideoDecoderInitialized(java.lang.String,long,long)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onVideoDisabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onVideoEnabled(com.google.android.exoplayer2.decoder.DecoderCounters)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onVideoInputFormatChanged(com.google.android.exoplayer2.Format)>
<com.google.android.exoplayer2.SimpleExoPlayer$ComponentListener: void onVideoSizeChanged(int,int,int,float)>
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>
<java.util.concurrent.TimeUnit$6: long toSeconds(long)>
<java.util.concurrent.TimeUnit$6: long toMinutes(long)>
<org.thoughtcrime.securesms.util.Trimmer$TrimmingProgressTask: java.lang.Void doInBackground(java.lang.Integer[])>
<org.thoughtcrime.securesms.util.Trimmer$TrimmingProgressTask: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.util.Trimmer$TrimmingProgressTask: void onProgress(int,int)>
<android.net.Uri$PathSegmentsBuilder: void add(java.lang.String)>
<org.thoughtcrime.securesms.util.Trimmer$TrimmingProgressTask: void onProgressUpdate(java.lang.Integer[])>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: void detachViewFromParent(int)>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<org.webrtc.EglRenderer: void createEglSurface(android.view.Surface)>
<com.fasterxml.jackson.databind.jsontype.NamedType: void setName(java.lang.String)>
<android.transition.Transition: void setMatchOrder(int[])>
<org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)>
<com.google.android.exoplayer2.SimpleExoPlayer: void addListener(com.google.android.exoplayer2.ExoPlayer$EventListener)>
<com.google.android.exoplayer2.SimpleExoPlayer: void buildAudioRenderers(android.content.Context,android.os.Handler,com.google.android.exoplayer2.drm.DrmSessionManager,int,com.google.android.exoplayer2.audio.AudioRendererEventListener,com.google.android.exoplayer2.audio.AudioProcessor[],java.util.ArrayList)>
<android.icu.text.CurrencyMetaInfo: java.util.List currencies(android.icu.text.CurrencyMetaInfo$CurrencyFilter)>
<android.icu.text.CurrencyMetaInfo: android.icu.text.CurrencyMetaInfo$CurrencyDigits currencyDigits(java.lang.String,android.icu.util.Currency$CurrencyUsage)>
<org.webrtc.EglRenderer: void lambda$init$0$EglRenderer(org.webrtc.EglBase$Context,int[])>
<org.webrtc.EglRenderer: void lambda$release$1$EglRenderer(java.util.concurrent.CountDownLatch)>
<org.webrtc.EglRenderer: void lambda$release$2$EglRenderer(android.os.Looper)>
<org.webrtc.EglRenderer: void lambda$releaseEglSurface$5$EglRenderer(java.lang.Runnable)>
<com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog getErrorDialog(android.app.Activity,int,int)>
<org.webrtc.EglRenderer: void onFrame(org.webrtc.VideoFrame)>
<com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog getErrorDialog(android.app.Activity,int,int,android.content.DialogInterface$OnCancelListener)>
<android.view.ViewGroup: boolean damageChildDeferred(android.view.View)>
<com.google.android.gms.common.GoogleApiAvailability: int isGooglePlayServicesAvailable(android.content.Context)>
<com.google.android.gms.common.GoogleApiAvailability: boolean showErrorDialogFragment(android.app.Activity,int,int,android.content.DialogInterface$OnCancelListener)>
<org.webrtc.EglRenderer: void releaseEglSurface(java.lang.Runnable)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>
<com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog zza(android.content.Context,int,com.google.android.gms.common.internal.zzj,android.content.DialogInterface$OnCancelListener)>
<org.webrtc.EglRenderer: void setFpsReduction(float)>
<org.webrtc.EglRenderer: void setLayoutAspectRatio(float)>
<org.webrtc.EglRenderer: void setMirror(boolean)>
<android.view.ViewGroup: void offsetChildrenTopAndBottom(int)>
<com.google.android.gms.common.GoogleApiAvailability: android.content.Intent zza(android.content.Context,int,java.lang.String)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.support.design.widget.VisibilityAwareImageButton: void internalSetVisibility(int,boolean)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point,boolean)>
<java.io.FileDescriptor: void setInt$(int)>
<com.google.android.gms.common.GoogleApiAvailability: void zza(android.app.Activity,android.app.Dialog,java.lang.String,android.content.DialogInterface$OnCancelListener)>
<android.view.inputmethod.InputMethodManager: void onReportFullscreenMode(boolean,boolean,java.lang.String)>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker$SavedState$1: com.doomonafireball.betterpickers.numberpicker.NumberPicker$SavedState createFromParcel(android.os.Parcel)>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker$SavedState$1: com.doomonafireball.betterpickers.numberpicker.NumberPicker$SavedState[] newArray(int)>
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>
<android.view.inputmethod.InputMethodManager: void setInputChannelLocked(android.view.InputChannel)>
<android.transition.Transition: boolean isValidTarget(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer: void buildMetadataRenderers(android.content.Context,android.os.Handler,int,com.google.android.exoplayer2.metadata.MetadataRenderer$Output,java.util.ArrayList)>
<com.google.android.exoplayer2.SimpleExoPlayer: void buildMiscellaneousRenderers(android.content.Context,android.os.Handler,int,java.util.ArrayList)>
<com.google.android.exoplayer2.SimpleExoPlayer: void buildTextRenderers(android.content.Context,android.os.Handler,int,com.google.android.exoplayer2.text.TextRenderer$Output,java.util.ArrayList)>
<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>
<org.webrtc.GlRectDrawer: void drawOes(int,float[],int,int,int,int,int,int)>
<com.google.android.exoplayer2.SimpleExoPlayer: void buildVideoRenderers(android.content.Context,android.os.Handler,com.google.android.exoplayer2.drm.DrmSessionManager,int,com.google.android.exoplayer2.video.VideoRendererEventListener,long,java.util.ArrayList)>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<org.webrtc.GlRectDrawer: void drawRgb(int,float[],int,int,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>
<org.webrtc.GlRectDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class findMixInClassFor(java.lang.Class)>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>
<android.view.ViewGroup: void setLayoutMode(int)>
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.view.inputmethod.InputMethodManager: boolean startInputInner(int,android.os.IBinder,int,int,int)>
<android.transition.Transition: void captureValues(android.view.ViewGroup,boolean)>
<com.google.android.exoplayer2.SimpleExoPlayer: int getRendererType(int)>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<com.google.protobuf.Descriptors$Descriptor: com.google.protobuf.Descriptors$FieldDescriptor findFieldByNumber(int)>
<com.google.android.exoplayer2.SimpleExoPlayer: void prepare(com.google.android.exoplayer2.source.MediaSource)>
<com.google.android.exoplayer2.SimpleExoPlayer: void removeListener(com.google.android.exoplayer2.ExoPlayer$EventListener)>
<com.google.android.exoplayer2.SimpleExoPlayer: void seekTo(int,long)>
<com.google.protobuf.Descriptors$Descriptor: boolean isExtensionNumber(int)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setPlayWhenReady(boolean)>
<android.view.ViewGroup: void finishAnimatingView(android.view.View,android.view.animation.Animation)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setTextOutput(com.google.android.exoplayer2.text.TextRenderer$Output)>
<android.transition.Transition: void clearValues(boolean)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setVideoListener(com.google.android.exoplayer2.SimpleExoPlayer$VideoListener)>
<java.util.concurrent.CountDownLatch$Sync: int tryAcquireShared(int)>
<android.view.ViewGroup: boolean isViewTransitioning(android.view.View)>
<android.util.MapCollections: java.lang.Object[] toArrayHelper(int)>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setVideoSurface(android.view.Surface)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setVideoSurfaceHolder(android.view.SurfaceHolder)>
<android.view.ViewGroup: void endViewTransition(android.view.View)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setVideoSurfaceView(android.view.SurfaceView)>
<com.google.android.exoplayer2.SimpleExoPlayer: void setVideoTextureView(android.view.TextureView)>
<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>
<android.view.inputmethod.InputMethodManager: void focusInLocked(android.view.View)>
<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>
<android.view.inputmethod.InputMethodManager: void onViewDetachedFromWindow(android.view.View)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>
<android.view.ViewGroup: void requestTransitionStart(android.animation.LayoutTransition)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.icu.impl.ICUResourceBundleReader$Container: int getContainer16Resource(android.icu.impl.ICUResourceBundleReader,int)>
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>
<android.database.AbstractCursor: boolean moveToPosition(int)>
<android.icu.impl.ICUResourceBundleReader$Container: int getContainer32Resource(android.icu.impl.ICUResourceBundleReader,int)>
<android.database.AbstractCursor: boolean move(int)>
<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.AbstractCursor: java.lang.String getColumnName(int)>
<android.view.ViewGroup: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.content.ContentProvider: boolean matchesOurAuthorities(java.lang.String)>
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri,int)>
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>
<android.transition.Transition: void setNameOverrides(android.util.ArrayMap)>
<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>
<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>
<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>
<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>
<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>
<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$2: void onSuccess(org.whispersystems.libsignal.util.guava.Optional)>
<com.nineoldandroids.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<android.view.inputmethod.InputMethodManager: void sendInputEventAndReportResultOnMainLooper(android.view.inputmethod.InputMethodManager$PendingEvent)>
<android.view.Choreographer: void doFrame(long,int)>
<android.view.inputmethod.InputMethodManager: int sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager$PendingEvent)>
<com.takisoft.colorpicker.HsvColorComparator: int compare(java.lang.Integer,java.lang.Integer)>
<android.view.Choreographer: void doCallbacks(int,long)>
<android.view.inputmethod.InputMethodManager: void finishedInputEvent(int,boolean,boolean)>
<android.view.inputmethod.InputMethodManager: void invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager$PendingEvent,boolean)>
<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>
<libcore.io.IoTracker: void trackIo(int)>
<android.view.Choreographer: void doScheduleCallback(int)>
<libcore.io.IoTracker: void trackIo(int,libcore.io.IoTracker$Mode)>
<android.database.sqlite.SQLiteConnection: void setOnlyAllowReadOnlyOperations(boolean)>
<android.database.sqlite.SQLiteConnection: boolean isPreparedStatementInCache(java.lang.String)>
<android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,android.database.sqlite.SQLiteStatementInfo)>
<com.fasterxml.jackson.databind.ser.impl.StringArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.String[])>
<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.support.v7.app.ToolbarActionBar: void setCustomView(android.view.View)>
<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.support.v7.app.ToolbarActionBar: void setCustomView(android.view.View,android.support.v7.app.ActionBar$LayoutParams)>
<java.text.DecimalFormatSymbols: void setZeroDigit(char)>
<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>
<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>
<android.support.v7.app.ToolbarActionBar: void setDisplayOptions(int,int)>
<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)>
<org.thoughtcrime.securesms.components.AudioView: void setTint(int,int)>
<java.text.DecimalFormatSymbols: void setPerMill(char)>
<java.text.DecimalFormatSymbols: void setPercent(char)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setLabel(java.lang.CharSequence)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])>
<java.text.DecimalFormatSymbols: void setDigit(char)>
<java.text.DecimalFormatSymbols: void setPatternSeparator(char)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowFreeFormInput(boolean)>
<java.text.DecimalFormatSymbols: void setInfinity(java.lang.String)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder addExtras(android.os.Bundle)>
<java.text.DecimalFormatSymbols: void setNaN(java.lang.String)>
<java.text.DecimalFormatSymbols: void setMinusSign(char)>
<java.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>
<java.text.DecimalFormatSymbols: void setCurrency(java.util.Currency)>
<org.thoughtcrime.securesms.notifications.MessageNotifier$CancelableExecutor: void execute(org.thoughtcrime.securesms.notifications.MessageNotifier$DelayedNotification)>
<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)>
<android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<java.text.DecimalFormatSymbols: void setExponentSeparator(java.lang.String)>
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.text.TextPaint: void set(android.text.TextPaint)>
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>
<dalvik.system.DexPathList$Element: java.lang.Class findClass(java.lang.String,java.lang.ClassLoader,java.util.List)>
<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<dalvik.system.DexPathList$Element: java.net.URL findResource(java.lang.String)>
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)>
<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>
<android.widget.Editor$UndoInputFilter: void saveInstanceState(android.os.Parcel)>
<android.widget.Editor$UndoInputFilter: void restoreInstanceState(android.os.Parcel)>
<android.widget.Editor$UndoInputFilter: void setForceMerge(boolean)>
<sun.net.www.URLConnection: void setProperties(sun.net.www.MessageHeader)>
<com.doomonafireball.betterpickers.timepicker.TimePicker: void doOnClick(android.view.View)>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: void doOnClick(android.view.View)>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View)>
<android.os.AsyncTask: void onCancelled(java.lang.Object)>
<android.os.AsyncTask: boolean cancel(boolean)>
<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>
<org.thoughtcrime.securesms.notifications.AndroidAutoReplyReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: void setLeftRightEnabled(boolean)>
<android.os.AsyncTask: void publishProgress(java.lang.Object[])>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: float getTranslationZ(android.view.View)>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: boolean hasAccessibilityDelegate(android.view.View)>
<com.doomonafireball.betterpickers.timepicker.TimePicker: void setLeftRightEnabled(boolean)>
<org.thoughtcrime.securesms.components.MicrophoneRecorderView$FloatingRecordButton: void display(float)>
<android.view.FocusFinder$SequentialFocusComparator: void setRoot(android.view.ViewGroup)>
<android.view.FocusFinder$SequentialFocusComparator: void setIsLayoutRtl(boolean)>
<android.view.FocusFinder$SequentialFocusComparator: void setFocusables(java.util.ArrayList)>
<org.thoughtcrime.securesms.components.MicrophoneRecorderView$FloatingRecordButton: void hide(float)>
<org.thoughtcrime.securesms.components.MicrophoneRecorderView$FloatingRecordButton: void moveTo(float)>
<android.view.FocusFinder$SequentialFocusComparator: int compare(android.view.View,android.view.View)>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setChildrenDrawingOrderEnabled(android.view.ViewGroup,boolean)>
<android.transition.Slide: void setSlideEdge(int)>
<com.fasterxml.jackson.databind.node.POJONode: boolean _pojoEquals(com.fasterxml.jackson.databind.node.POJONode)>
<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>
<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>
<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>
<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>
<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<org.thoughtcrime.securesms.service.KeyCachingService$2: java.lang.Void doInBackground(java.lang.Void[])>
<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>
<com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder: com.google.protobuf.DescriptorProtos$EnumValueOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$EnumValueOptions)>
<java.util.TreeMap$NavigableSubMap: java.util.SortedMap tailMap(java.lang.Object)>
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder mergeFrom(org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder setCipherKey(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder setIndex(int)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder setIv(com.google.protobuf.ByteString)>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey$Builder setMacKey(com.google.protobuf.ByteString)>
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)>
<android.icu.util.TimeZone: int getOffset(long)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.icu.util.TimeZone: void setID(java.lang.String)>
<android.media.MediaPlayer: void setLooping(boolean)>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.media.MediaPlayer: void setVolume(float)>
<java.util.AbstractSet: boolean removeAll(java.util.Collection)>
<android.media.MediaPlayer: void setSubtitleAnchor(android.media.SubtitleController,android.media.SubtitleController$Anchor)>
<android.media.MediaPlayer: void onSubtitleTrackSelected(android.media.SubtitleTrack)>
<android.graphics.drawable.VectorDrawable$VFullPath: int getPropertyIndex(java.lang.String)>
<android.graphics.drawable.VectorDrawable$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>
<java.util.Vector: void copyInto(java.lang.Object[])>
<com.fasterxml.jackson.databind.ser.SerializerCache: void addTypedSerializer(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>
<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>
<java.util.Vector: void setSize(int)>
<android.icu.util.TimeZone: boolean equals(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)>
<java.util.Vector: boolean contains(java.lang.Object)>
<android.media.ExifInterface$ExifAttribute: double getDoubleValue(java.nio.ByteOrder)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)>
<java.util.Vector: int indexOf(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)>
<android.media.ExifInterface$ExifAttribute: int getIntValue(java.nio.ByteOrder)>
<java.util.Vector: java.lang.Object elementAt(int)>
<android.media.ExifInterface$ExifAttribute: java.lang.String getStringValue(java.nio.ByteOrder)>
<java.util.Vector: void removeElementAt(int)>
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setStrokeColor(int)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>
<java.util.Vector: void addElement(java.lang.Object)>
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setStrokeWidth(float)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<java.util.Vector: boolean removeElement(java.lang.Object)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setStrokeAlpha(float)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setFillColor(int)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setFillAlpha(float)>
<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>
<android.graphics.drawable.VectorDrawable$VFullPath: void setTrimPathStart(float)>
<java.util.Vector: java.lang.Object elementData(int)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setTrimPathEnd(float)>
<android.icu.impl.ResourceBundleWrapper$1: android.icu.impl.ResourceBundleWrapper createInstance(java.lang.String,android.icu.impl.ResourceBundleWrapper$Loader)>
<java.util.Vector: java.lang.Object get(int)>
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<java.util.Vector: boolean add(java.lang.Object)>
<android.graphics.drawable.VectorDrawable$VFullPath: void setTrimPathOffset(float)>
<java.util.Vector: boolean remove(java.lang.Object)>
<java.util.Vector: void add(int,java.lang.Object)>
<java.util.Vector: java.lang.Object remove(int)>
<android.content.ClipData$Item: void toShortString(java.lang.StringBuilder)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$SampleStreamImpl: int readData(com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,boolean)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$SampleStreamImpl: void skipToKeyframeBefore(long)>
<android.graphics.drawable.VectorDrawable$VPath: void setPathData(android.util.PathParser$PathData)>
<android.view.InputChannel: void readFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void invalidateGlobalRegion(org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable)>
<android.support.v7.widget.AppCompatProgressBarHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<android.view.InputEventSender: boolean sendInputEvent(int,android.view.InputEvent)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void reset(boolean)>
<com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext createInstance(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.InjectableValues)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void setDirectionDescriptionsResourceId(int)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void setOnTriggerListener(org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView$OnTriggerListener)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void setTargetDescriptionsResourceId(int)>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void setVibrateEnabled(boolean)>
<org.thoughtcrime.securesms.components.PushRecipientsPanel$FocusChangedListener: void onFocusChange(android.view.View,boolean)>
<org.kxml2.io.KXmlParser: int getNamespaceCount(int)>
<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)>
<com.google.android.exoplayer2.upstream.DefaultAllocator: void setTargetBufferSize(int)>
<com.google.protobuf.DescriptorProtos$MethodOptions$Builder: com.google.protobuf.DescriptorProtos$MethodOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$MethodOptions)>
<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.icu.impl.DayPeriodRules: android.icu.impl.DayPeriodRules$DayPeriod getDayPeriodForHour(int)>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: boolean hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>
<com.fasterxml.jackson.databind.ser.ContainerSerializer: com.fasterxml.jackson.databind.ser.ContainerSerializer withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)>
<android.widget.MenuPopupWindow: void setEnterTransition(android.transition.Transition)>
<android.widget.MenuPopupWindow: void setExitTransition(android.transition.Transition)>
<android.widget.MenuPopupWindow: void setHoverListener(android.widget.MenuItemHoverListener)>
<android.widget.MenuPopupWindow: void setTouchModal(boolean)>
<android.widget.MenuPopupWindow: void onItemHoverEnter(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)>
<android.widget.MenuPopupWindow: void onItemHoverExit(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)>
<android.icu.impl.TextTrieMap: android.icu.impl.TextTrieMap put(java.lang.CharSequence,java.lang.Object)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean dependsOn(android.support.design.widget.CoordinatorLayout,android.view.View,android.view.View)>
<android.icu.impl.TextTrieMap: void find(java.lang.CharSequence,int,android.icu.impl.TextTrieMap$ResultHandler)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: android.view.View findAnchorView(android.support.design.widget.CoordinatorLayout,android.view.View)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean isBlockingInteractionBelow(android.support.design.widget.CoordinatorLayout,android.view.View)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean isNestedScrollAccepted(int)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void resetNestedScroll(int)>
<com.fasterxml.jackson.databind.ser.std.BeanSerializerBase: java.lang.String _customTypeId(java.lang.Object)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void setBehavior(android.support.design.widget.CoordinatorLayout$Behavior)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void setChangedAfterNestedScroll(boolean)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void setLastChildRect(android.graphics.Rect)>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void setNestedScrollAccepted(int,boolean)>
<android.support.v4.provider.FontsContractCompat$3: void onReply(android.graphics.Typeface)>
<android.support.v4.provider.FontsContractCompat$3: void onReply(java.lang.Object)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: void setExpiration(java.lang.String,int)>
<org.thoughtcrime.securesms.ConversationPopupActivity$1: void onSuccess(java.lang.Long)>
<android.icu.util.SimpleTimeZone: void setID(java.lang.String)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: void setOnClick(android.view.View$OnClickListener)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>
<android.icu.util.SimpleTimeZone: void setStartYear(int)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: void setTheme(int)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: void setUnderlinePage(com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean setLayoutDirection(int,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void updateDensity(android.content.res.Resources)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void applyTheme(android.content.res.Resources$Theme)>
<android.icu.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setVariablePadding(boolean)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setConstantSize(boolean)>
<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>
<java.util.Scanner: java.util.Scanner useLocale(java.util.Locale)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setEnterFadeDuration(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setExitFadeDuration(int)>
<android.support.v7.app.AlertController$2: void onScrollChange(android.support.v4.widget.NestedScrollView,int,int,int,int)>
<org.thoughtcrime.securesms.notifications.RemoteReplyReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: boolean fieldIsNumeric(int)>
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>
<android.app.AlertDialog: void setView(android.view.View)>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: android.icu.text.DateTimePatternGenerator$DateTimeMatcher set(java.lang.String,android.icu.text.DateTimePatternGenerator$FormatParser,boolean)>
<com.fasterxml.jackson.databind.ser.std.StringSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.String)>
<com.doomonafireball.betterpickers.radialtimepicker.RadialSelectorView: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>
<android.content.UndoManager$UndoState: void writeToParcel(android.os.Parcel)>
<android.support.v7.widget.SearchView$UpdatableTouchDelegate: void setBounds(android.graphics.Rect,android.graphics.Rect)>
<android.content.UndoManager$UndoState: void updateLabel(java.lang.CharSequence)>
<android.content.UndoManager$UndoState: boolean setCanMerge(boolean)>
<com.google.protobuf.DescriptorProtos$FileOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: int getDistance(android.icu.text.DateTimePatternGenerator$DateTimeMatcher,int,android.icu.text.DateTimePatternGenerator$DistanceInfo)>
<org.thoughtcrime.securesms.VerifyIdentityActivity$VerifyScanFragment: void setScanListener(org.thoughtcrime.securesms.qr.ScanListener)>
<android.content.UndoManager$UndoState: void addOperation(android.content.UndoOperation)>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: void addExternal(com.fasterxml.jackson.databind.deser.SettableBeanProperty,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)>
<android.content.UndoManager$UndoState: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner)>
<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledIn(int)>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: int compareTo(android.icu.text.DateTimePatternGenerator$DateTimeMatcher)>
<android.content.UndoManager$UndoState: boolean matchOwner(android.content.UndoOwner)>
<android.app.Notification$Style: void internalSetBigContentTitle(java.lang.CharSequence)>
<com.fasterxml.jackson.databind.util.LinkedNode: void linkNext(com.fasterxml.jackson.databind.util.LinkedNode)>
<android.app.Notification$Style: void internalSetSummaryText(java.lang.CharSequence)>
<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)>
<com.android.internal.view.menu.MenuItemImpl: void setSubMenu(com.android.internal.view.menu.SubMenuBuilder)>
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)>
<android.support.v7.widget.ContentFrameLayout: void dispatchFitSystemWindows(android.graphics.Rect)>
<com.google.zxing.qrcode.encoder.ByteMatrix: void clear(byte)>
<com.google.zxing.qrcode.encoder.ByteMatrix: byte get(int,int)>
<android.app.Notification$Style: android.app.Notification buildStyled(android.app.Notification)>
<com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,int)>
<com.google.zxing.qrcode.encoder.ByteMatrix: void set(int,int,boolean)>
<android.support.v7.widget.RecyclerView: void absorbGlows(int,int)>
<com.android.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>
<android.support.v7.widget.RecyclerView: void addItemDecoration(android.support.v7.widget.RecyclerView$ItemDecoration)>
<android.support.v7.widget.RecyclerView: void addItemDecoration(android.support.v7.widget.RecyclerView$ItemDecoration,int)>
<android.support.v7.widget.RecyclerView: void addOnChildAttachStateChangeListener(android.support.v7.widget.RecyclerView$OnChildAttachStateChangeListener)>
<com.android.internal.view.menu.MenuItemImpl: void setCheckedInt(boolean)>
<android.support.v7.widget.RecyclerView: void addOnItemTouchListener(android.support.v7.widget.RecyclerView$OnItemTouchListener)>
<android.support.v7.widget.RecyclerView: void addOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener)>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.support.v7.widget.RecyclerView: void animateAppearance(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder mergeFrom(org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus)>
<com.android.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>
<android.support.v7.widget.RecyclerView: void animateDisappearance(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder setEnabled(boolean)>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder setId(long)>
<com.android.internal.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<android.support.v7.widget.RecyclerView: void assertNotInLayoutOrScroll(java.lang.String)>
<android.content.ClipDescription: boolean toShortString(java.lang.StringBuilder)>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void addActions(org.thoughtcrime.securesms.crypto.MasterSecret,android.app.PendingIntent,android.app.PendingIntent,android.app.PendingIntent)>
<android.support.v7.app.TwilightCalculator: void calculateTwilight(long,double,double)>
<android.support.v7.widget.RecyclerView: boolean canReuseUpdatedViewHolder(android.support.v7.widget.RecyclerView$ViewHolder)>
<com.android.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)>
<android.content.ClipDescription: boolean toShortStringTypesOnly(java.lang.StringBuilder)>
<android.support.v4.app.NotificationCompat$BigPictureStyle: android.support.v4.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>
<android.support.v4.app.NotificationCompat$BigPictureStyle: android.support.v4.app.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<com.doomonafireball.betterpickers.radialtimepicker.RadialSelectorView: void setSelection(int,boolean,boolean)>
<com.doomonafireball.betterpickers.radialtimepicker.RadialSelectorView: void setTheme(android.content.Context,boolean)>
<android.support.v7.widget.RecyclerView: void considerReleasingGlowsOnScroll(int,int)>
<com.google.android.mms.pdu_alt.AcknowledgeInd: void setTransactionId(byte[])>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void addAndroidAutoAction(android.app.PendingIntent,android.app.PendingIntent,long)>
<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void addMessageBody(org.thoughtcrime.securesms.recipients.Recipient,org.thoughtcrime.securesms.recipients.Recipient,java.lang.CharSequence)>
<android.support.v7.widget.RecyclerView: void defaultOnMeasure(int,int)>
<android.support.v7.widget.RecyclerView: void dispatchChildAttached(android.view.View)>
<com.bumptech.glide.manager.RequestTracker: boolean clearRemoveAndRecycle(com.bumptech.glide.request.Request)>
<android.widget.ViewAnimator: void setDisplayedChild(int)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: void setMaxLength(int)>
<android.support.v7.widget.RecyclerView: void dispatchChildDetached(android.view.View)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: void shift(int)>
<android.widget.ViewAnimator: void showOnly(int,boolean)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: void addOffset(int)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: void addOffsetAndCount(int,int)>
<android.widget.ViewAnimator: void showOnly(int)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: boolean containsOffset(int)>
<android.app.LoaderManagerImpl: void updateHostController(android.app.FragmentHostCallback)>
<android.support.v7.widget.RecyclerView: boolean dispatchNestedPreScroll(int,int,int[],int[],int)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: boolean hasCountAtOffset(int,int)>
<android.support.v7.widget.RecyclerView: boolean dispatchNestedScroll(int,int,int,int,int[],int)>
<org.whispersystems.signalservice.internal.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: int popMinimum(android.icu.util.OutputInt)>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void setMessageCount(int)>
<android.support.v7.widget.RecyclerView: void dispatchOnScrollStateChanged(int)>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void setPrimaryMessageBody(org.thoughtcrime.securesms.recipients.Recipient,org.thoughtcrime.securesms.recipients.Recipient,java.lang.CharSequence,org.thoughtcrime.securesms.mms.SlideDeck)>
<android.support.v7.widget.RecyclerView: void dispatchOnScrolled(int,int)>
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: void setThread(org.thoughtcrime.securesms.recipients.Recipient)>
<android.widget.RadioGroup$CheckedStateTracker: void onCheckedChanged(android.widget.CompoundButton,boolean)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setColorContentDescriptions(java.lang.CharSequence[])>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setColors(int[])>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setColumns(int)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setSelectedColor(int)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setSize(int)>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params$Builder setSortColors(boolean)>
<android.support.v7.widget.RecyclerView: void fillRemainingScrollValues(android.support.v7.widget.RecyclerView$State)>
<android.support.v7.widget.RecyclerView: android.view.View findChildViewUnder(float,float)>
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.support.v7.widget.RecyclerView: android.view.View findContainingItemView(android.view.View)>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ViewHolder findContainingViewHolder(android.view.View)>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ViewHolder findViewHolderForItemId(long)>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ViewHolder findViewHolderForPosition(int,boolean)>
<android.support.v7.widget.RecyclerView: boolean fling(int,int)>
<android.media.WebVttRenderingWidget$CueLayout: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle,float)>
<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>
<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff$Mode)>
<android.media.WebVttRenderingWidget$CueLayout: void measureForParent(int,int)>
<android.media.WebVttRenderingWidget$CueLayout: void setOrder(int)>
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
<android.support.v7.widget.RecyclerView: int getAdapterPositionFor(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView: long getChangedHolderKey(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView: int getChildAdapterPosition(android.view.View)>
<android.support.v7.widget.RecyclerView: int getChildLayoutPosition(android.view.View)>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ViewHolder getChildViewHolder(android.view.View)>
<android.support.v7.widget.RecyclerView: android.graphics.Rect getItemDecorInsetsForChild(android.view.View)>
<android.support.v7.widget.RecyclerView: boolean hasNestedScrollingParent(int)>
<android.widget.RemoteViews: void setRemoteInputs(int,android.app.RemoteInput[])>
<android.support.v7.widget.RecyclerView: void initFastScroller(android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable,android.graphics.drawable.StateListDrawable,android.graphics.drawable.Drawable)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _append(com.fasterxml.jackson.core.JsonToken)>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _append(com.fasterxml.jackson.core.JsonToken,java.lang.Object)>
<org.thoughtcrime.securesms.scribbles.ScribbleToolbar: void setStickerSelected(boolean)>
<android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<android.support.v7.widget.RecyclerView: void jumpToPositionForSmoothScroller(int)>
<org.thoughtcrime.securesms.scribbles.ScribbleToolbar: void setTextSelected(boolean)>
<android.icu.text.TransliterationRule: boolean matchesIndexValue(int)>
<android.icu.text.TransliterationRule: boolean masks(android.icu.text.TransliterationRule)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.JsonParser)>
<android.support.v7.widget.RecyclerView: void offsetChildrenHorizontal(int)>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.ObjectCodec)>
<android.support.v7.widget.AppCompatBackgroundHelper: void onSetBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.support.v7.widget.RecyclerView: void offsetChildrenVertical(int)>
<android.media.ExifInterface$ByteOrderAwarenessDataOutputStream: void setByteOrder(java.nio.ByteOrder)>
<org.thoughtcrime.securesms.util.concurrent.SettableFuture: void addListener(org.thoughtcrime.securesms.util.concurrent.ListenableFuture$Listener)>
<android.support.v7.widget.AppCompatBackgroundHelper: void onSetBackgroundResource(int)>
<android.support.v7.widget.RecyclerView: void offsetPositionRecordsForInsert(int,int)>
<android.support.v7.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)>
<android.support.v7.widget.RecyclerView: void offsetPositionRecordsForMove(int,int)>
<android.support.v7.widget.AppCompatBackgroundHelper: void setSupportBackgroundTintList(android.content.res.ColorStateList)>
<android.support.v7.widget.AppCompatBackgroundHelper: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)>
<android.icu.text.TransliterationRule: int matchAndReplace(android.icu.text.Replaceable,android.icu.text.Transliterator$Position,boolean)>
<android.support.v7.widget.RecyclerView: void offsetPositionRecordsForRemove(int,int,boolean)>
<org.thoughtcrime.securesms.CreateProfileActivity$4: byte[] doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.CreateProfileActivity$4: void onPostExecute(byte[])>
<org.thoughtcrime.securesms.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)>
<android.widget.ImageView: void setColorFilter(int)>
<org.thoughtcrime.securesms.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>
<android.support.v7.widget.GridLayout$Spec: android.support.v7.widget.GridLayout$Spec copyWriteSpan(android.support.v7.widget.GridLayout$Interval)>
<android.support.v7.widget.RecyclerView: void onChildAttachedToWindow(android.view.View)>
<android.widget.ImageView: void setImageAlpha(int)>
<android.support.v7.widget.RecyclerView: void onChildDetachedFromWindow(android.view.View)>
<android.widget.ImageView: void setAlpha(int)>
<android.view.AccessibilityIterators$CharacterTextSegmentIterator: void initialize(java.lang.String)>
<android.support.v7.widget.GridLayout$Spec: android.support.v7.widget.GridLayout$Alignment getAbsoluteAlignment(boolean)>
<android.icu.text.TransliterationRule: java.lang.String toRule(boolean)>
<android.support.v7.widget.RecyclerView: void onExitLayoutOrScroll(boolean)>
<org.thoughtcrime.securesms.ConversationFragment$ConversationFragmentItemClickListener: void onItemClick(org.thoughtcrime.securesms.database.model.MessageRecord)>
<org.thoughtcrime.securesms.ConversationFragment$ConversationFragmentItemClickListener: void onItemLongClick(org.thoughtcrime.securesms.database.model.MessageRecord)>
<java.io.ObjectStreamClass$EntryFuture: boolean set(java.lang.Object)>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.support.v7.widget.RecyclerView: void onScrollStateChanged(int)>
<android.support.v7.widget.RecyclerView: void onScrolled(int,int)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>
<com.google.android.mms.pdu_alt.PduComposer: void append(int)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<com.google.android.mms.pdu_alt.PduComposer: void appendDateValue(long)>
<com.google.android.mms.pdu_alt.PduComposer: void appendEncodedString(com.google.android.mms.pdu_alt.EncodedStringValue)>
<android.os.Parcel: void setDataPosition(int)>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>
<android.os.Parcel: boolean pushAllowFds(boolean)>
<android.os.Parcel: void restoreAllowFds(boolean)>
<com.google.android.mms.pdu_alt.PduComposer: void appendLongInteger(long)>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.widget.RemoteViews: void setDrawableParameters(int,boolean,int,int,android.graphics.PorterDuff$Mode,int)>
<com.google.android.mms.pdu_alt.PduComposer: void appendOctet(int)>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<com.google.android.mms.pdu_alt.PduComposer: void appendQuotedString(java.lang.String)>
<com.google.android.mms.pdu_alt.PduComposer: void appendQuotedString(byte[])>
<android.widget.RemoteViews: void setProgressTintList(int,android.content.res.ColorStateList)>
<android.os.Parcel: void writeByteArray(byte[])>
<com.google.android.mms.pdu_alt.PduComposer: void appendShortInteger(int)>
<android.widget.RemoteViews: void setProgressBackgroundTintList(int,android.content.res.ColorStateList)>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<com.google.android.mms.pdu_alt.PduComposer: void appendShortLength(int)>
<com.google.android.mms.pdu_alt.PduComposer: void appendTextString(java.lang.String)>
<android.widget.RemoteViews: void setProgressIndeterminateTintList(int,android.content.res.ColorStateList)>
<com.google.android.mms.pdu_alt.PduComposer: void appendTextString(byte[])>
<android.os.Parcel: void writeBlob(byte[],int,int)>
<com.google.android.mms.pdu_alt.PduComposer: void appendUintvarInteger(long)>
<android.widget.RemoteViews: void setTextColor(int,int)>
<android.os.Parcel: void writeInt(int)>
<android.widget.RemoteViews: void setTextColor(int,android.content.res.ColorStateList)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void writeDouble(double)>
<com.google.android.mms.pdu_alt.PduComposer: void appendValueLength(long)>
<android.os.Parcel: void writeString(java.lang.String)>
<com.google.android.mms.pdu_alt.PduComposer: void arraycopy(byte[],int,int)>
<android.os.Parcel: void writeCharSequence(java.lang.CharSequence)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>
<android.widget.RemoteViews: void setViewLayoutMarginEndDimen(int,int)>
<android.support.v7.widget.RecyclerView: void recordAnimationInfoIfBouncedHiddenView(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.widget.RemoteViews: void setViewLayoutMarginBottomDimen(int,int)>
<android.widget.RemoteViews: void setViewLayoutWidth(int,int)>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeMapInternal(java.util.Map)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.os.Parcel: void writeArrayMapInternal(android.util.ArrayMap)>
<android.support.v7.widget.RecyclerView: boolean removeAnimatingView(android.view.View)>
<android.os.Parcel: void writeArraySet(android.util.ArraySet)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.support.v7.widget.RecyclerView: void removeDetachedView(android.view.View,boolean)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<com.android.mms.transaction.DownloadManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,boolean)>
<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>
<android.os.Parcel: void writeSize(android.util.Size)>
<android.support.v7.widget.RecyclerView: void removeItemDecoration(android.support.v7.widget.RecyclerView$ItemDecoration)>
<android.os.Parcel: void writeSizeF(android.util.SizeF)>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.support.v7.widget.RecyclerView: void removeOnChildAttachStateChangeListener(android.support.v7.widget.RecyclerView$OnChildAttachStateChangeListener)>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.support.v7.widget.RecyclerView: void removeOnItemTouchListener(android.support.v7.widget.RecyclerView$OnItemTouchListener)>
<android.support.v7.widget.RecyclerView: void removeOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener)>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>
<java.nio.HeapCharBuffer: int ix(int)>
<android.media.WebVttRenderingWidget$SpanLayout: void setCaptionStyle(android.view.accessibility.CaptioningManager$CaptionStyle,float)>
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>
<android.support.v7.widget.RecyclerView: void resumeRequestLayout(boolean)>
<android.os.Parcel: void writeIntArray(int[])>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(char)>
<android.support.v7.widget.RecyclerView: void scrollBy(int,int)>
<android.support.v7.widget.RecyclerView: boolean scrollByInternal(int,int,android.view.MotionEvent)>
<android.os.Parcel: void writeLongArray(long[])>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(char[],int,int)>
<java.nio.HeapCharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.icu.impl.CurrencyData$DefaultInfo: java.lang.String getName(java.lang.String)>
<android.icu.impl.CurrencyData$DefaultInfo: java.lang.String getPluralName(java.lang.String,java.lang.String)>
<android.icu.impl.CurrencyData$DefaultInfo: java.lang.String getSymbol(java.lang.String)>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.icu.impl.CurrencyData$DefaultInfo: android.icu.impl.CurrencyData$CurrencyFormatInfo getFormatInfo(java.lang.String)>
<android.support.v7.widget.RecyclerView: void scrollToPosition(int)>
<android.support.v7.widget.RecyclerView: void setAccessibilityDelegateCompat(android.support.v7.widget.RecyclerViewAccessibilityDelegate)>
<android.support.v7.widget.RecyclerView: void setAdapter(android.support.v7.widget.RecyclerView$Adapter)>
<android.os.Parcel: void writeCharSequenceArray(java.lang.CharSequence[])>
<android.support.v7.widget.RecyclerView: void setChildDrawingOrderCallback(android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback)>
<android.support.v7.widget.RecyclerView: boolean setChildImportantForAccessibilityInternal(android.support.v7.widget.RecyclerView$ViewHolder,int)>
<android.support.v7.widget.RecyclerView: void setHasFixedSize(boolean)>
<android.support.v7.widget.RecyclerView: void setItemAnimator(android.support.v7.widget.RecyclerView$ItemAnimator)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.support.v7.widget.RecyclerView: void setLayoutFrozen(boolean)>
<android.support.v7.widget.RecyclerView: void setLayoutManager(android.support.v7.widget.RecyclerView$LayoutManager)>
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>
<org.thoughtcrime.securesms.crypto.AsymmetricMasterCipher: java.lang.String encryptBody(java.lang.String)>
<org.thoughtcrime.securesms.crypto.AsymmetricMasterCipher: byte[] encryptBytes(byte[])>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesCount(int)>
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesDuration(int)>
<org.whispersystems.libsignal.ecc.DjbECPublicKey: boolean equals(java.lang.Object)>
<android.support.v7.widget.RecyclerView: void setScrollState(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked append(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.support.v7.widget.RecyclerView: boolean shouldDeferAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.support.v7.widget.RecyclerView: void smoothScrollBy(int,int)>
<android.support.v7.widget.RecyclerView: void smoothScrollBy(int,int,android.view.animation.Interpolator)>
<android.support.v7.widget.RecyclerView: void smoothScrollToPosition(int)>
<android.support.v7.widget.RecyclerView: boolean startNestedScroll(int,int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withNext(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked)>
<android.support.v7.widget.RecyclerView: void stopNestedScroll(int)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.support.v7.widget.RecyclerView: void viewRangeUpdate(int,int,java.lang.Object)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withValue(java.lang.Object)>
<android.os.Parcel: void writeException(java.lang.Exception)>
<com.doomonafireball.betterpickers.hmspicker.HmsPickerDialogFragment: void setHmsPickerDialogHandlers(java.util.Vector)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getBestPattern(java.lang.String)>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.support.v7.widget.ListViewCompat$GateKeeperDrawable: void setEnabled(boolean)>
<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>
<com.bumptech.glide.load.data.DataRewinderRegistry: void register(com.bumptech.glide.load.data.DataRewinder$Factory)>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator addPattern(java.lang.String,boolean,android.icu.text.DateTimePatternGenerator$PatternInfo)>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator addPatternWithSkeleton(java.lang.String,java.lang.String,boolean,android.icu.text.DateTimePatternGenerator$PatternInfo)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>
<android.os.Parcel: void readByteArray(byte[])>
<android.icu.text.DateTimePatternGenerator: java.lang.String getSkeleton(java.lang.String)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.widget.VideoView$6: void onBufferingUpdate(android.media.MediaPlayer,int)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.icu.text.DateTimePatternGenerator: void setDateTimeFormat(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: void setDecimal(java.lang.String)>
<android.icu.text.DateTimePatternGenerator: void setAppendItemFormat(int,java.lang.String)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemFormat(int)>
<android.icu.text.DateTimePatternGenerator: void setAppendItemName(int,java.lang.String)>
<android.icu.text.DateTimePatternGenerator: java.lang.String getAppendItemName(int)>
<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.support.v7.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)>
<com.nineoldandroids.animation.PreHoneycombCompat$12: java.lang.Integer get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$12: void setValue(android.view.View,int)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>
<dagger.internal.FailoverLoader$1: dagger.internal.ModuleAdapter create(java.lang.Class)>
<android.support.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: android.support.v4.graphics.PathParser$PathDataNode[] evaluate(float,android.support.v4.graphics.PathParser$PathDataNode[],android.support.v4.graphics.PathParser$PathDataNode[])>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: void readMapInternal(java.util.Map,int,java.lang.ClassLoader)>
<java.text.IcuIteratorWrapper: void setText(java.lang.String)>
<android.os.Parcel: void readArrayMapInternal(android.util.ArrayMap,int,java.lang.ClassLoader)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: java.lang.String getTraceName(android.os.Message)>
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.os.Handler: android.os.Message obtainMessage(int)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<android.widget.GridView: boolean pageScroll(int)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.widget.GridView: boolean fullScroll(int)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.widget.GridView: boolean arrowScroll(int)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<com.nineoldandroids.animation.AnimatorSet: com.nineoldandroids.animation.AnimatorSet$Builder play(com.nineoldandroids.animation.Animator)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Class _classIfExplicit(java.lang.Class)>
<com.tomergoldst.tooltips.ToolTip: void setPosition(int)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Class _classIfExplicit(java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend$Attr,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)>
<com.nineoldandroids.animation.AnimatorSet: void playTogether(com.nineoldandroids.animation.Animator[])>
<android.widget.GridView: void setGravity(int)>
<android.widget.GridView: void setHorizontalSpacing(int)>
<android.widget.GridView: void setVerticalSpacing(int)>
<android.widget.GridView: void setStretchMode(int)>
<android.widget.GridView: void setColumnWidth(int)>
<android.widget.GridView: void setNumColumns(int)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend$Prop,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: java.lang.Object _findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)>
<android.animation.LayoutTransition: void enableTransitionType(int)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder _findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: boolean _isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated)>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.PropertyName _propertyName(java.lang.String,java.lang.String)>
<org.thoughtcrime.securesms.DeviceActivity$2: java.lang.Integer doInBackground(java.lang.Void[])>
<com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<org.thoughtcrime.securesms.DeviceActivity$2: void onPostExecute(java.lang.Integer)>
<android.database.sqlite.SQLiteDirectCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>
<android.animation.LayoutTransition: void cancel(int)>
<android.graphics.drawable.RippleBackground$1: void setValue(android.graphics.drawable.RippleBackground,float)>
<android.graphics.drawable.RippleBackground$1: java.lang.Float get(android.graphics.drawable.RippleBackground)>
<com.google.protobuf.SmallSortedMap$Entry: int compareTo(com.google.protobuf.SmallSortedMap$Entry)>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorRequeried(android.database.Cursor)>
<android.support.v7.widget.RecyclerView$SmoothScroller: android.view.View findViewByPosition(int)>
<android.support.v7.widget.RecyclerView$SmoothScroller: int getChildPosition(android.view.View)>
<com.google.protobuf.SmallSortedMap$Entry: java.lang.Object setValue(java.lang.Object)>
<android.support.v7.widget.RecyclerView$SmoothScroller: void normalize(android.graphics.PointF)>
<android.support.v7.widget.RecyclerView$SmoothScroller: void onChildAttachedToWindow(android.view.View)>
<android.support.v7.widget.RecyclerView$SmoothScroller: void setTargetPosition(int)>
<android.support.v7.widget.RecyclerView$SmoothScroller: void start(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$LayoutManager)>
<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>
<java.lang.reflect.WeakCache: java.lang.Object get(java.lang.Object,java.lang.Object)>
<android.animation.LayoutTransition: void layoutChange(android.view.ViewGroup)>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>
<java.lang.reflect.WeakCache: boolean containsValue(java.lang.Object)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.icu.text.LocaleDisplayNames$LastResortLocaleDisplayNames: java.lang.String localeDisplayName(android.icu.util.ULocale)>
<java.io.ExpiringCache$Entry: void setTimestamp(long)>
<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>
<android.icu.text.LocaleDisplayNames$LastResortLocaleDisplayNames: java.lang.String regionDisplayName(java.lang.String)>
<com.google.android.exoplayer2.Timeline: com.google.android.exoplayer2.Timeline$Period getPeriod(int,com.google.android.exoplayer2.Timeline$Period)>
<com.google.android.exoplayer2.Timeline: com.google.android.exoplayer2.Timeline$Window getWindow(int,com.google.android.exoplayer2.Timeline$Window)>
<com.google.android.exoplayer2.Timeline: com.google.android.exoplayer2.Timeline$Window getWindow(int,com.google.android.exoplayer2.Timeline$Window,boolean)>
<com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer: com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer withResolved(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<android.animation.PathKeyframes: java.lang.Object getValue(float)>
<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)>
<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)>
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)>
<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)>
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)>
<android.content.res.AssetManager: boolean getThemeValue(long,int,android.util.TypedValue,boolean)>
<android.content.res.AssetManager: void makeStringBlocks(android.content.res.StringBlock[])>
<org.thoughtcrime.securesms.util.task.SnackbarAsyncTask: void onPostExecute(java.lang.Void)>
<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal add(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.content.res.AssetManager: void xmlBlockGone(int)>
<android.content.res.AssetManager: int addAssetPath(java.lang.String)>
<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(java.lang.String)>
<android.support.v7.widget.ActivityChooserModel$PersistHistoryAsyncTask: java.lang.Void doInBackground(java.lang.Object[])>
<android.content.res.AssetManager: int addOverlayPath(java.lang.String)>
<android.content.res.AssetManager: int addOverlayPathNative(java.lang.String)>
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>
<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.content.res.AssetManager: int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.AssetManager: java.lang.String getResourceName(int)>
<android.content.res.AssetManager: java.lang.String getResourcePackageName(int)>
<android.content.res.AssetManager: java.lang.String getResourceTypeName(int)>
<android.content.res.AssetManager: java.lang.String getResourceEntryName(int)>
<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>
<android.content.res.AssetManager: boolean retrieveAttributes(long,int[],int[],int[])>
<android.content.res.AssetManager: int getArraySize(int)>
<android.content.res.AssetManager: int retrieveArray(int,int[])>
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>
<android.icu.math.BigDecimal: int compareTo(android.icu.math.BigDecimal)>
<android.icu.math.BigDecimal: int compareTo(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<android.content.res.AssetManager: int[] getArrayIntResource(int)>
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,int,int)>
<android.icu.impl.ICUResourceBundleReader$ReaderCache: android.icu.impl.ICUResourceBundleReader createInstance(android.icu.impl.ICUResourceBundleReader$ReaderCacheKey,java.lang.ClassLoader)>
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal divide(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer: com.fasterxml.jackson.databind.util.TokenBuffer createBufferInstance(com.fasterxml.jackson.core.JsonParser)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal,android.icu.math.MathContext)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.util.Pair copyMessageInbox(long)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: void add(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: com.fasterxml.jackson.databind.introspect.AnnotatedMethod find(java.lang.String,java.lang.Class[])>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: com.fasterxml.jackson.databind.introspect.AnnotatedMethod find(java.lang.reflect.Method)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.database.sqlite.SQLiteStatement createInsertStatement(android.database.sqlite.SQLiteDatabase)>
<org.thoughtcrime.securesms.database.SmsDatabase: boolean deleteMessage(long)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: com.fasterxml.jackson.databind.introspect.AnnotatedMethod remove(java.lang.reflect.Method)>
<org.thoughtcrime.securesms.database.SmsDatabase: void deleteMessagesInThreadBeforeDate(long,long)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal plus(android.icu.math.MathContext)>
<android.widget.CursorFilter: java.lang.CharSequence convertResultToString(java.lang.Object)>
<org.thoughtcrime.securesms.database.SmsDatabase: void deleteThreads(java.util.Set)>
<org.thoughtcrime.securesms.database.SmsDatabase: void endTransaction(android.database.sqlite.SQLiteDatabase)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.Property getProperty(java.lang.String)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.database.Cursor getMessage(long)>
<org.thoughtcrime.securesms.contacts.ContactAccessor$NumberData$1: org.thoughtcrime.securesms.contacts.ContactAccessor$NumberData createFromParcel(android.os.Parcel)>
<org.thoughtcrime.securesms.database.SmsDatabase: int getMessageCountForThread(long)>
<org.thoughtcrime.securesms.contacts.ContactAccessor$NumberData$1: org.thoughtcrime.securesms.contacts.ContactAccessor$NumberData[] newArray(int)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: void applyTheme(android.content.res.Resources$Theme)>
<org.thoughtcrime.securesms.database.SmsDatabase: long getThreadIdForMessage(long)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: void setViewportSize(float,float)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setDensity(int)>
<android.support.v4.app.TaskStackBuilder: android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent)>
<android.support.v4.app.TaskStackBuilder: android.support.v4.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>
<android.support.v4.app.TaskStackBuilder: android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity)>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean onStateChange(int[])>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setAlpha(float)>
<android.support.v4.app.TaskStackBuilder: android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)>
<android.text.SpanSet: void init(android.text.Spanned,int,int)>
<org.thoughtcrime.securesms.util.SaveAttachmentTask: org.whispersystems.libsignal.util.Pair doInBackground(org.thoughtcrime.securesms.util.SaveAttachmentTask$Attachment[])>
<android.view.Surface: void transferFrom(android.view.Surface)>
<android.text.SpanSet: boolean hasSpansIntersecting(int,int)>
<android.text.SpanSet: int getNextTransition(int,int)>
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<android.support.v4.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
<org.thoughtcrime.securesms.database.SmsDatabase: org.whispersystems.libsignal.util.guava.Optional insertMessageInbox(org.thoughtcrime.securesms.sms.IncomingTextMessage)>
<org.thoughtcrime.securesms.database.SmsDatabase: org.whispersystems.libsignal.util.guava.Optional insertMessageInbox(org.thoughtcrime.securesms.sms.IncomingTextMessage,long)>
<android.view.ViewOverlay$OverlayViewGroup: void add(android.view.View)>
<android.app.SearchDialog: boolean show(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle)>
<org.thoughtcrime.securesms.util.SaveAttachmentTask: void onPostExecute(org.whispersystems.libsignal.util.Pair)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal movePointLeft(int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal movePointRight(int)>
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int)>
<android.icu.math.BigDecimal: android.icu.math.BigDecimal setScale(int,int)>
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>
<android.app.SearchDialog: void setWorking(boolean)>
<java.util.jar.Attributes: void putAll(java.util.Map)>
<android.support.v7.widget.Toolbar$SavedState$1: android.support.v7.widget.Toolbar$SavedState createFromParcel(android.os.Parcel)>
<android.support.v7.widget.Toolbar$SavedState$1: android.support.v7.widget.Toolbar$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.v7.widget.Toolbar$SavedState$1: android.support.v7.widget.Toolbar$SavedState[] newArray(int)>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable build(java.lang.String,int)>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable buildRound(java.lang.String,int)>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IConfigBuilder height(int)>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder: android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder addMessage(java.lang.String)>
<org.thoughtcrime.securesms.database.SmsDatabase: long insertMessageOutbox(long,org.thoughtcrime.securesms.sms.OutgoingTextMessage,long,boolean,long,org.thoughtcrime.securesms.database.SmsDatabase$InsertListener)>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IConfigBuilder textColor(int)>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder: android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setLatestTimestamp(long)>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IConfigBuilder width(int)>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder: android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReadPendingIntent(android.app.PendingIntent)>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder: android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReplyAction(android.app.PendingIntent,android.support.v4.app.RemoteInput)>
<android.widget.Filter: void filter(java.lang.CharSequence)>
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>
<dalvik.system.VMRuntime: java.lang.Object newNonMovableArray(java.lang.Class,int)>
<dalvik.system.VMRuntime: long addressOf(java.lang.Object)>
<dalvik.system.VMRuntime: void registerNativeAllocation(int)>
<dalvik.system.VMRuntime: void registerNativeFree(int)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.util.Pair insertMissedCall(org.thoughtcrime.securesms.database.Address)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.util.Pair insertOutgoingCall(org.thoughtcrime.securesms.database.Address)>
<org.thoughtcrime.securesms.database.SmsDatabase: android.util.Pair insertReceivedCall(org.thoughtcrime.securesms.database.Address)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsForcedSms(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsInsecure(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsNotified(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsOutbox(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsPush(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsSent(long,boolean)>
<com.google.protobuf.GeneratedMessage$FieldAccessorTable$RepeatedFieldAccessor: void clear(com.google.protobuf.GeneratedMessage$Builder)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markAsSentFailed(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markExpireStarted(long)>
<org.thoughtcrime.securesms.database.SmsDatabase: void markExpireStarted(long,long)>
<org.thoughtcrime.securesms.color.MaterialColor: boolean represents(android.content.Context,int)>
<org.thoughtcrime.securesms.database.SmsDatabase: org.thoughtcrime.securesms.database.SmsDatabase$OutgoingMessageReader readerFor(org.thoughtcrime.securesms.sms.OutgoingTextMessage,long)>
<org.thoughtcrime.securesms.database.SmsDatabase: org.thoughtcrime.securesms.database.SmsDatabase$Reader readerFor(android.database.Cursor)>
<org.thoughtcrime.securesms.color.MaterialColor: int toActionBarColor(android.content.Context)>
<org.thoughtcrime.securesms.database.SmsDatabase: java.util.List setMessagesRead(long)>
<org.thoughtcrime.securesms.color.MaterialColor: int toConversationColor(android.content.Context)>
<org.thoughtcrime.securesms.color.MaterialColor: int toStatusBarColor(android.content.Context)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl: boolean isRtl(char[],int,int)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl: boolean isRtl(java.lang.CharSequence,int,int)>
<android.support.v7.text.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(char[],int,int)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>
<android.support.v4.app.NotificationCompat$InboxStyle: android.support.v4.app.NotificationCompat$InboxStyle addLine(java.lang.CharSequence)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer makeChild(int)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void reportTooManyCollisions(int)>
<org.thoughtcrime.securesms.preferences.AppProtectionPreferenceFragment$PassphraseIntervalClickListener: void onDialogHmsSet(int,int,int,int)>
<com.google.android.exoplayer2.video.MediaCodecVideoRenderer: boolean shouldDropOutputBuffer(long,long)>
<android.support.v7.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(android.support.v7.widget.MenuItemHoverListener)>
<java.lang.ThreadGroup: void add(java.lang.Thread)>
<java.lang.ThreadGroup: void threadStartFailed(java.lang.Thread)>
<android.widget.Editor$ErrorPopup: void fixDirection(boolean)>
<android.icu.text.ReplaceableContextIterator: void setText(android.icu.text.Replaceable)>
<android.icu.text.ReplaceableContextIterator: void setIndex(int)>
<android.icu.text.ReplaceableContextIterator: void setLimit(int)>
<android.icu.text.ReplaceableContextIterator: void setContextLimits(int,int)>
<android.icu.text.ReplaceableContextIterator: int replace(java.lang.String)>
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)>
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>
<android.widget.LinearLayout: void drawDividersVertical(android.graphics.Canvas)>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)>
<org.thoughtcrime.securesms.GroupMembersDialog$GroupMembers: org.thoughtcrime.securesms.recipients.Recipient get(int)>
<android.widget.LinearLayout: void drawDividersHorizontal(android.graphics.Canvas)>
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.AutoCompleteTextView: void setAdapter(android.widget.ListAdapter)>
<android.widget.LinearLayout: void drawHorizontalDivider(android.graphics.Canvas,int)>
<com.google.android.exoplayer2.ExoPlayerImplInternal$PlaybackInfo: com.google.android.exoplayer2.ExoPlayerImplInternal$PlaybackInfo copyWithPeriodIndex(int)>
<android.widget.LinearLayout: void drawVerticalDivider(android.graphics.Canvas,int)>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.widget.LinearLayout: android.view.View getVirtualChildAt(int)>
<android.widget.AutoCompleteTextView: java.lang.CharSequence convertSelectionToString(java.lang.Object)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>
<android.widget.LinearLayout: boolean hasDividerBeforeChildAt(int)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.widget.LinearLayout: void measureVertical(int,int)>
<java.util.HashMap$TreeNode: void treeify(java.util.HashMap$Node[])>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<java.util.HashMap$TreeNode: java.util.HashMap$Node untreeify(java.util.HashMap)>
<android.widget.AutoCompleteTextView: void onFilterComplete(int)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.widget.AutoCompleteTextView: void ensureImeVisible(boolean)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<java.util.HashMap$TreeNode: void removeTreeNode(java.util.HashMap,java.util.HashMap$Node[],boolean)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: void toShortString(java.lang.StringBuilder)>
<dagger.internal.Loader$1: dagger.internal.Memoizer create(java.lang.ClassLoader)>
<java.util.HashMap$TreeNode: void split(java.util.HashMap,java.util.HashMap$Node[],int,int)>
<android.media.Ringtone: void setStreamType(int)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object[])>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<com.nineoldandroids.animation.PreHoneycombCompat$9: java.lang.Float get(android.view.View)>
<android.widget.LinearLayout: void measureHorizontal(int,int)>
<com.nineoldandroids.animation.PreHoneycombCompat$9: void setValue(android.view.View,float)>
<org.thoughtcrime.securesms.profiles.SystemProfileUtil$1: byte[] doInBackground(java.lang.Void[])>
<android.media.Ringtone: void setUri(android.net.Uri)>
<org.thoughtcrime.securesms.profiles.SystemProfileUtil$1: void onPostExecute(byte[])>
<com.android.internal.app.WindowDecorActionBar: void setElevation(float)>
<com.android.internal.app.WindowDecorActionBar: void onConfigurationChanged(android.content.res.Configuration)>
<com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer: com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker: void setCurrentItem(int)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker: void setSelectedColor(int)>
<com.android.internal.app.WindowDecorActionBar: void setShowHideAnimationEnabled(boolean)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker: void setTitleView(com.doomonafireball.betterpickers.widget.PickerLinearLayout)>
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker: void setViewPager(android.support.v4.view.ViewPager)>
<com.android.internal.app.WindowDecorActionBar: void dispatchMenuVisibilityChanged(boolean)>
<com.android.internal.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: java.util.Map _orderEntries(java.util.Map)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)>
<com.android.internal.app.WindowDecorActionBar: void setHomeButtonEnabled(boolean)>
<com.android.internal.app.WindowDecorActionBar: void setDisplayOptions(int,int)>
<com.android.internal.app.WindowDecorActionBar: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map)>
<dalvik.system.DexPathList: void addDexPath(java.lang.String,java.io.File)>
<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)>
<android.text.method.WordIterator: int preceding(int)>
<android.text.method.WordIterator: int following(int)>
<android.text.method.WordIterator: boolean isBoundary(int)>
<android.text.method.WordIterator: int nextBoundary(int)>
<com.android.internal.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>
<android.widget.LinearLayout: int getChildrenSkipCount(android.view.View,int)>
<android.text.method.WordIterator: int prevBoundary(int)>
<android.widget.LinearLayout: int measureNullChild(int)>
<android.widget.LinearLayout: void measureChildBeforeLayout(android.view.View,int,int,int,int,int)>
<android.text.method.WordIterator: int getBeginning(int)>
<android.text.method.WordIterator: int getEnd(int)>
<android.text.method.WordIterator: int getPrevWordBeginningOnTwoWordsBoundary(int)>
<android.widget.LinearLayout: int getLocationOffset(android.view.View)>
<android.text.method.WordIterator: int getNextWordEndOnTwoWordBoundary(int)>
<android.widget.LinearLayout: int getNextLocationOffset(android.view.View)>
<com.android.internal.app.WindowDecorActionBar: void doShow(boolean)>
<android.widget.LinearLayout: void layoutVertical(int,int,int,int)>
<java.util.logging.LogManager$LoggerWeakRef: void setNode(java.util.logging.LogManager$LogNode)>
<java.util.logging.LogManager$LoggerWeakRef: void setParentRef(java.lang.ref.WeakReference)>
<android.text.method.WordIterator: int getPunctuationBeginning(int)>
<android.text.method.WordIterator: int getPunctuationEnd(int)>
<android.text.method.WordIterator: boolean isAfterPunctuation(int)>
<android.text.method.WordIterator: boolean isOnPunctuation(int)>
<com.android.internal.app.WindowDecorActionBar: void doHide(boolean)>
<android.widget.LinearLayout: void layoutHorizontal(int,int,int,int)>
<com.android.internal.app.WindowDecorActionBar: void animateToMode(boolean)>
<dalvik.system.DexPathList: java.lang.Class findClass(java.lang.String,java.util.List)>
<dalvik.system.DexPathList: java.net.URL findResource(java.lang.String)>
<dalvik.system.DexPathList: java.util.Enumeration findResources(java.lang.String)>
<android.widget.LinearLayout: void setGravity(int)>
<android.support.v7.widget.LinearLayoutManager$LayoutState: void assignPositionFromScrapList(android.view.View)>
<android.support.v7.widget.LinearLayoutManager$LayoutState: boolean hasMore(android.support.v7.widget.RecyclerView$State)>
<android.support.v7.widget.LinearLayoutManager$LayoutState: android.view.View next(android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.LinearLayoutManager$LayoutState: android.view.View nextViewInLimitedList(android.view.View)>
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>
<com.android.internal.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>
<java.security.KeyPairGenerator: void initialize(int)>
<android.icu.text.TransliteratorParser$ParseData: char[] lookup(java.lang.String)>
<android.icu.text.TransliteratorParser$ParseData: android.icu.text.UnicodeMatcher lookupMatcher(int)>
<android.icu.text.TransliteratorParser$ParseData: java.lang.String parseReference(java.lang.String,java.text.ParsePosition,int)>
<android.icu.text.TransliteratorParser$ParseData: boolean isMatcher(int)>
<android.icu.text.TransliteratorParser$ParseData: boolean isReplacer(int)>
<com.bumptech.glide.load.resource.transcode.TranscoderRegistry: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>
<android.view.View$ScrollabilityCache: void setFadeColor(int)>
<com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer: com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer withDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)>
<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withContentInclusion(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withFilterId(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: com.fasterxml.jackson.databind.ser.std.MapSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer,java.util.HashSet,boolean)>
<android.support.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>
<com.soundcloud.android.crop.Crop: android.content.Intent getIntent(android.content.Context)>
<com.soundcloud.android.crop.Crop: com.soundcloud.android.crop.Crop output(android.net.Uri)>
<com.soundcloud.android.crop.Crop: void start(android.app.Activity)>
<com.android.internal.policy.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>
<com.android.internal.policy.PhoneWindow$PanelFeatureState: void onRestoreInstanceState(android.os.Parcelable)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: android.support.design.widget.CoordinatorLayout$SavedState createFromParcel(android.os.Parcel)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: android.support.design.widget.CoordinatorLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<org.thoughtcrime.securesms.mms.AttachmentManager: void capturePhoto(android.app.Activity,int)>
<android.support.design.widget.CoordinatorLayout$SavedState$1: android.support.design.widget.CoordinatorLayout$SavedState[] newArray(int)>
<org.thoughtcrime.securesms.ConversationActivity$24: java.lang.Void doInBackground(java.lang.Long[])>
<org.thoughtcrime.securesms.mms.AttachmentManager: void clear(org.thoughtcrime.securesms.mms.GlideRequests,boolean)>
<java.lang.ProcessEnvironment$Value: int compareTo(java.lang.ProcessEnvironment$Value)>
<org.thoughtcrime.securesms.mms.AttachmentManager: void setLocation(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.components.location.SignalPlace,org.thoughtcrime.securesms.mms.MediaConstraints)>
<org.thoughtcrime.securesms.mms.AttachmentManager: void setMedia(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.mms.GlideRequests,android.net.Uri,org.thoughtcrime.securesms.mms.AttachmentManager$MediaType,org.thoughtcrime.securesms.mms.MediaConstraints)>
<android.icu.text.CurrencyMetaInfo$CurrencyFilter: android.icu.text.CurrencyMetaInfo$CurrencyFilter withRegion(java.lang.String)>
<org.thoughtcrime.securesms.ConversationAdapter: int findLastSeenPosition(long)>
<org.thoughtcrime.securesms.contacts.ContactSelectionListItem: void lambda$onModified$0$ContactSelectionListItem(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.ConversationAdapter: long getItemId(java.lang.Object)>
<org.thoughtcrime.securesms.ConversationAdapter: long getItemId(org.thoughtcrime.securesms.database.model.MessageRecord)>
<org.thoughtcrime.securesms.ConversationAdapter: int getItemViewType(java.lang.Object)>
<org.thoughtcrime.securesms.ConversationAdapter: int getItemViewType(org.thoughtcrime.securesms.database.model.MessageRecord)>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>
<org.thoughtcrime.securesms.ConversationAdapter: long getReceivedTimestamp(int)>
<org.thoughtcrime.securesms.ConversationAdapter: boolean isRecordForId(java.lang.Object,long)>
<org.thoughtcrime.securesms.ConversationAdapter: boolean isRecordForId(org.thoughtcrime.securesms.database.model.MessageRecord,long)>
<org.thoughtcrime.securesms.ConversationAdapter: void lambda$onCreateItemViewHolder$0$ConversationAdapter(android.view.View,android.view.View)>
<org.thoughtcrime.securesms.ConversationAdapter: boolean lambda$onCreateItemViewHolder$1$ConversationAdapter(android.view.View,android.view.View)>
<org.thoughtcrime.securesms.ConversationAdapter: void onBindHeaderViewHolder(org.thoughtcrime.securesms.ConversationAdapter$HeaderViewHolder,int)>
<org.thoughtcrime.securesms.ConversationAdapter: void onBindItemViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,java.lang.Object)>
<org.thoughtcrime.securesms.ConversationAdapter: void onBindItemViewHolder(org.thoughtcrime.securesms.ConversationAdapter$ViewHolder,org.thoughtcrime.securesms.database.model.MessageRecord)>
<org.thoughtcrime.securesms.ConversationAdapter: void onBindLastSeenViewHolder(org.thoughtcrime.securesms.ConversationAdapter$HeaderViewHolder,int)>
<org.thoughtcrime.securesms.ConversationAdapter: org.thoughtcrime.securesms.ConversationAdapter$HeaderViewHolder onCreateLastSeenViewHolder(android.view.ViewGroup)>
<org.thoughtcrime.securesms.ConversationAdapter: void onItemViewRecycled(org.thoughtcrime.securesms.ConversationAdapter$ViewHolder)>
<org.thoughtcrime.securesms.ConversationAdapter: void toggleSelection(org.thoughtcrime.securesms.database.model.MessageRecord)>
<android.icu.impl.UCharacterProperty: int getProperty(int)>
<android.icu.impl.UCharacterProperty: int getAdditional(int,int)>
<org.thoughtcrime.securesms.providers.SingleUseBlobProvider: android.net.Uri createUri(byte[])>
<android.icu.impl.UCharacterProperty: android.icu.util.VersionInfo getAge(int)>
<com.fasterxml.jackson.databind.SerializationConfig: void initialize(com.fasterxml.jackson.core.JsonGenerator)>
<android.icu.impl.UCharacterProperty: boolean hasBinaryProperty(int,int)>
<android.icu.impl.UCharacterProperty: int getType(int)>
<android.icu.impl.UCharacterProperty: int getIntPropertyValue(int,int)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.BeanDescription introspect(com.fasterxml.jackson.databind.JavaType)>
<android.icu.impl.UCharacterProperty: int getIntPropertyMaxValue(int)>
<android.icu.impl.UCharacterProperty: int getSource(int)>
<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>
<android.icu.impl.UCharacterProperty: int getMaxValues(int)>
<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>
<android.icu.impl.UCharacterProperty: int digit(int)>
<android.graphics.drawable.RippleDrawable: void setPaddingMode(int)>
<android.icu.impl.UCharacterProperty: double getUnicodeNumericValue(int)>
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>
<android.util.SparseIntArray: int get(int)>
<android.util.SparseIntArray: int get(int,int)>
<android.util.SparseIntArray: void put(int,int)>
<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>
<android.util.SparseIntArray: int keyAt(int)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.MapperFeature[])>
<android.util.SparseIntArray: void append(int,int)>
<android.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>
<android.icu.impl.UCharacterProperty: android.icu.text.UnicodeSet addPropertyStarts(android.icu.text.UnicodeSet)>
<android.graphics.drawable.DrawableContainer: void animate(boolean)>
<android.icu.text.DecimalFormat$Unit: void writeSuffix(java.lang.StringBuffer)>
<android.icu.text.DecimalFormat$Unit: void writePrefix(java.lang.StringBuffer)>
<android.icu.impl.UCharacterProperty: void upropsvec_addPropertyStarts(android.icu.text.UnicodeSet)>
<android.graphics.drawable.DrawableContainer: void updateDensity(android.content.res.Resources)>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig without(com.fasterxml.jackson.databind.MapperFeature[])>
<com.google.zxing.qrcode.encoder.QRCode: void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)>
<com.google.zxing.qrcode.encoder.QRCode: void setMaskPattern(int)>
<com.google.zxing.qrcode.encoder.QRCode: void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix)>
<com.google.zxing.qrcode.encoder.QRCode: void setMode(com.google.zxing.qrcode.decoder.Mode)>
<com.google.zxing.qrcode.encoder.QRCode: void setVersion(com.google.zxing.qrcode.decoder.Version)>
<org.thoughtcrime.securesms.service.WebRtcCallService: void onBluetoothStateChanged(boolean)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>
<android.icu.text.RuleBasedNumberFormat: void setDefaultRuleSet(java.lang.String)>
<android.support.v4.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setActivationDelay(int)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setEdgeType(int)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setEnabled(boolean)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setMaximumEdges(float,float)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float,float)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setMinimumVelocity(float,float)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setRampDownDuration(int)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setRampUpDuration(int)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setRelativeEdges(float,float)>
<android.support.v4.widget.AutoScrollHelper: android.support.v4.widget.AutoScrollHelper setRelativeVelocity(float,float)>
<android.icu.text.RuleBasedNumberFormat: android.icu.text.PluralFormat createPluralFormat(android.icu.text.PluralRules$PluralType,java.lang.String)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.DeserializationFeature,boolean)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.MapperFeature,boolean)>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext createDeserializationContext(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationConfig)>
<com.fasterxml.jackson.databind.SerializationFeature: boolean enabledIn(int)>
<sun.security.x509.AVAComparator: int compare(sun.security.x509.AVA,sun.security.x509.AVA)>
<com.google.android.gms.location.places.internal.zzo: com.google.android.gms.location.places.internal.PlaceLocalization zzoe(android.os.Parcel)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,java.util.logging.LogManager)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean,java.util.logging.LogManager)>
<com.google.android.gms.location.places.internal.zzo: com.google.android.gms.location.places.internal.PlaceLocalization[] zzvi(int)>
<java.util.logging.LogManager$LoggerContext: void removeLoggerRef(java.lang.String,java.util.logging.LogManager$LoggerWeakRef)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>
<android.database.Observable: void registerObserver(java.lang.Object)>
<android.database.Observable: void unregisterObserver(java.lang.Object)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType narrowKey(java.lang.Class)>
<com.fasterxml.jackson.databind.type.MapType: com.fasterxml.jackson.databind.JavaType widenKey(java.lang.Class)>
<org.whispersystems.jobqueue.Job: void setPersistentId(long)>
<android.support.v4.print.PrintHelper$PrintHelperApi19$2: java.lang.Throwable doInBackground(java.lang.Void[])>
<org.whispersystems.jobqueue.Job: void setWakeLock(android.os.PowerManager$WakeLock)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,short[])>
<android.support.v4.print.PrintHelper$PrintHelperApi19$2: void onPostExecute(java.lang.Throwable)>
<android.support.v4.widget.CircularProgressDrawable: void setArrowEnabled(boolean)>
<android.support.v4.widget.CircularProgressDrawable: void setArrowScale(float)>
<android.support.v4.widget.CircularProgressDrawable: void setColorSchemeColors(int[])>
<android.support.v4.widget.CircularProgressDrawable: void setProgressRotation(float)>
<android.support.v4.widget.CircularProgressDrawable: void setStartEndTrim(float,float)>
<android.support.v4.widget.CircularProgressDrawable: void setStrokeWidth(float)>
<android.support.v4.widget.CircularProgressDrawable: void setStyle(int)>
<android.support.design.widget.TabLayout$SlidingTabStrip: void animateIndicatorToPosition(int,int)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker$SavedState$1: com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker$SavedState createFromParcel(android.os.Parcel)>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker$SavedState$1: com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker$SavedState[] newArray(int)>
<android.support.v7.widget.ActionBarContextView: void initForMode(android.support.v7.view.ActionMode)>
<com.takisoft.colorpicker.ColorPickerSwatch: void setChecked(boolean)>
<com.takisoft.colorpicker.ColorPickerSwatch: void setColor(int)>
<com.takisoft.colorpicker.ColorPickerSwatch: void setOnColorSelectedListener(com.takisoft.colorpicker.OnColorSelectedListener)>
<android.support.design.widget.TabLayout$SlidingTabStrip: void setIndicatorPosition(int,int)>
<android.icu.impl.Normalizer2Impl: android.icu.impl.Normalizer2Impl load(java.nio.ByteBuffer)>
<android.support.design.widget.TabLayout$SlidingTabStrip: void setIndicatorPositionFromTabPosition(int,float)>
<org.thoughtcrime.securesms.contacts.ContactAccessor$ContactData$1: org.thoughtcrime.securesms.contacts.ContactAccessor$ContactData createFromParcel(android.os.Parcel)>
<android.support.design.widget.TabLayout$SlidingTabStrip: void setSelectedIndicatorColor(int)>
<org.thoughtcrime.securesms.contacts.ContactAccessor$ContactData$1: org.thoughtcrime.securesms.contacts.ContactAccessor$ContactData[] newArray(int)>
<android.support.design.widget.TabLayout$SlidingTabStrip: void setSelectedIndicatorHeight(int)>
<android.widget.TextView$Marquee: void start(int)>
<android.icu.impl.Normalizer2Impl: android.icu.impl.Normalizer2Impl load(java.lang.String)>
<android.support.v7.app.AppCompatDelegateImplBase: void setTitle(java.lang.CharSequence)>
<android.icu.impl.Normalizer2Impl: void addPropertyStarts(android.icu.text.UnicodeSet)>
<android.widget.AbsSpinner$RecycleBin: void put(int,android.view.View)>
<android.widget.AbsSpinner$RecycleBin: android.view.View get(int)>
<android.icu.impl.Normalizer2Impl: void addCanonIterPropertyStarts(android.icu.text.UnicodeSet)>
<android.content.res.Resources$Theme: void setImpl(android.content.res.ResourcesImpl$ThemeImpl)>
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>
<android.widget.Editor$CorrectionHighlighter: void highlight(android.view.inputmethod.CorrectionInfo)>
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.widget.Editor$CorrectionHighlighter: void draw(android.graphics.Canvas,int)>
<android.support.v7.widget.ActionBarContextView: void setContentHeight(int)>
<android.support.v4.app.NotificationCompat$CarExtender: android.support.v4.app.NotificationCompat$CarExtender setUnreadConversation(android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation)>
<android.icu.impl.Normalizer2Impl: int getNorm16(int)>
<android.icu.impl.Normalizer2Impl: int getCompQuickCheck(int)>
<android.support.v7.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)>
<android.icu.impl.Normalizer2Impl: boolean isAlgorithmicNoNo(int)>
<android.support.v7.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)>
<android.support.v7.widget.ActionBarContextView: void setTitleOptional(boolean)>
<android.icu.impl.Normalizer2Impl: boolean isCompNo(int)>
<android.support.v7.widget.ActionBarContextView: android.support.v4.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long)>
<android.icu.impl.Normalizer2Impl: boolean isDecompYes(int)>
<android.icu.impl.Normalizer2Impl: int getCC(int)>
<android.icu.impl.Normalizer2Impl: int getFCD16(int)>
<android.icu.impl.Normalizer2Impl: boolean singleLeadMightHaveNonZeroFCD16(int)>
<android.icu.impl.Normalizer2Impl: int getFCD16FromNormData(int)>
<android.icu.impl.Normalizer2Impl: java.lang.String getDecomposition(int)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<android.icu.impl.Normalizer2Impl: boolean isCanonSegmentStarter(int)>
<android.icu.impl.Normalizer2Impl: int decompose(java.lang.CharSequence,int,int,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<com.google.protobuf.DescriptorProtos$EnumValueOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.icu.impl.Normalizer2Impl: void decomposeAndAppend(java.lang.CharSequence,boolean,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<android.icu.impl.Normalizer2Impl: boolean compose(java.lang.CharSequence,int,int,boolean,boolean,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)>
<sun.security.util.DerInputStream: void mark(int)>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder mergeFrom(com.google.protobuf.DescriptorProtos$ServiceDescriptorProto)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addClassMixIns(com.fasterxml.jackson.databind.introspect.AnnotationMap,java.lang.Class)>
<android.icu.impl.Normalizer2Impl: int composeQuickCheck(java.lang.CharSequence,int,int,boolean,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addClassMixIns(com.fasterxml.jackson.databind.introspect.AnnotationMap,java.lang.Class,java.lang.Class)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addConstructorMixIns(java.lang.Class)>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder: com.google.protobuf.DescriptorProtos$ServiceDescriptorProto$Builder mergeOptions(com.google.protobuf.DescriptorProtos$ServiceOptions)>
<android.icu.impl.Normalizer2Impl: void composeAndAppend(java.lang.CharSequence,boolean,boolean,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addFactoryMixIns(java.lang.Class)>
<android.icu.impl.Normalizer2Impl: int makeFCD(java.lang.CharSequence,int,int,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<android.icu.impl.ICUResourceBundleReader$ResourceCache: java.lang.Object get(int)>
<android.icu.impl.ICUResourceBundleReader$ResourceCache: java.lang.Object putIfAbsent(int,java.lang.Object,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addMemberMethods(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap,java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap)>
<android.icu.impl.ZoneMeta$SystemTimeZoneCache: android.icu.impl.OlsonTimeZone createInstance(java.lang.String,java.lang.String)>
<android.icu.util.VersionInfo: int compareTo(android.icu.util.VersionInfo)>
<android.icu.impl.Normalizer2Impl: boolean hasDecompBoundary(int,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addMethodMixIns(java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap,java.lang.Class,com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap)>
<android.icu.impl.Normalizer2Impl: boolean isDecompInert(int)>
<android.icu.impl.Normalizer2Impl: boolean hasCompBoundaryBefore(int)>
<android.icu.impl.Normalizer2Impl: boolean hasCompBoundaryAfter(int,boolean,boolean)>
<android.icu.impl.Normalizer2Impl: boolean hasFCDBoundaryBefore(int)>
<org.thoughtcrime.securesms.giph.ui.GiphyActivityToolbar$5: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>
<android.icu.impl.Normalizer2Impl: boolean hasFCDBoundaryAfter(int)>
<android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation: void setDuration(long)>
<android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation: void setFraction(float)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Constructor,com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,boolean)>
<org.thoughtcrime.securesms.mms.AttachmentManager$1: void onSuccess(java.lang.Boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,com.fasterxml.jackson.databind.introspect.AnnotatedMethod,boolean)>
<android.support.v4.content.AsyncTaskLoader: void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object)>
<android.icu.impl.Normalizer2Impl: int getTrailCCFromCompYesAndZeroCC(java.lang.CharSequence,int,int)>
<android.support.v4.content.AsyncTaskLoader: void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object)>
<android.widget.AbsSpinner: int getChildHeight(android.view.View)>
<android.widget.AbsSpinner: int getChildWidth(android.view.View)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: void _addMixUnders(java.lang.reflect.Method,com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<android.widget.AbsSpinner: void setSelection(int,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.annotation.Annotation[])>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.annotation.Annotation[][])>
<android.widget.AbsSpinner: void setSelection(int)>
<android.icu.impl.Normalizer2Impl: void decomposeShort(java.lang.CharSequence,int,int,android.icu.impl.Normalizer2Impl$ReorderingBuffer)>
<android.widget.AbsSpinner: void setSelectionInt(int,boolean)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor,boolean)>
<android.view.WindowManagerGlobal: java.util.ArrayList getRootViews(android.os.IBinder)>
<com.google.android.exoplayer2.ui.SimpleExoPlayerView$ComponentListener: void onCues(java.util.List)>
<android.widget.VideoView$4: boolean onInfo(android.media.MediaPlayer,int,int)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedMethod _constructCreatorMethod(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedField _constructField(java.lang.reflect.Field)>
<com.google.android.exoplayer2.ui.SimpleExoPlayerView$ComponentListener: void onVideoSizeChanged(int,int,int,float)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.Map _findFields(java.lang.Class,java.util.Map)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean _isIncludableMemberMethod(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedMethod findMethod(java.lang.String,java.lang.Class[])>
<android.support.v7.view.menu.BaseMenuPresenter: void addItemView(android.view.View,int)>
<android.support.v7.view.menu.BaseMenuPresenter: android.support.v7.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<android.support.v7.view.menu.BaseMenuPresenter: void setCallback(android.support.v7.view.menu.MenuPresenter$Callback)>
<android.support.v7.view.menu.BaseMenuPresenter: void setId(int)>
<android.support.design.internal.BottomNavigationItemView: void setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.widget.GridLayoutManager: void setSpanCount(int)>
<org.thoughtcrime.securesms.ClearProfileAvatarActivity: void lambda$onResume$0$ClearProfileAvatarActivity(android.content.DialogInterface,int)>
<org.thoughtcrime.securesms.ClearProfileAvatarActivity: void lambda$onResume$1$ClearProfileAvatarActivity(android.content.DialogInterface,int)>
<android.support.v7.view.menu.MenuBuilder: android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<android.support.v7.view.menu.MenuBuilder: void addMenuPresenter(android.support.v7.view.menu.MenuPresenter)>
<android.support.v7.view.menu.MenuBuilder: void addMenuPresenter(android.support.v7.view.menu.MenuPresenter,android.content.Context)>
<android.support.v7.view.menu.MenuBuilder: void close(boolean)>
<android.view.WindowManagerGlobal: void setStoppedState(android.os.IBinder,boolean)>
<android.graphics.drawable.AnimatedVectorDrawable$AnimatedVectorDrawableState: void addPendingAnimator(int,float,java.lang.String)>
<android.graphics.drawable.AnimatedVectorDrawable$AnimatedVectorDrawableState: void addTargetAnimator(java.lang.String,android.animation.Animator)>
<android.graphics.drawable.AnimatedVectorDrawable$AnimatedVectorDrawableState: void prepareLocalAnimators(android.animation.AnimatorSet,android.content.res.Resources)>
<android.view.WindowManagerGlobal: void changeCanvasOpacity(android.os.IBinder,boolean)>
<android.icu.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<android.icu.util.Currency: java.lang.String getSymbol(android.icu.util.ULocale)>
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,boolean[])>
<android.media.MediaCodec$BufferMap: void remove(int)>
<android.graphics.drawable.AnimatedVectorDrawable$AnimatedVectorDrawableState: void inflatePendingAnimators(android.content.res.Resources,android.content.res.Resources$Theme)>
<android.support.v7.view.menu.MenuBuilder: int findItemIndex(int)>
<android.support.v7.app.WindowDecorActionBar$3: void onAnimationUpdate(android.view.View)>
<android.support.v7.view.menu.MenuBuilder: android.support.v7.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>
<android.icu.util.Currency: java.lang.String getName(android.icu.util.ULocale,int,java.lang.String,boolean[])>
<android.support.v7.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>
<android.icu.util.Currency: int getDefaultFractionDigits(android.icu.util.Currency$CurrencyUsage)>
<android.icu.util.Currency: double getRoundingIncrement(android.icu.util.Currency$CurrencyUsage)>
<android.transition.SidePropagation: void setSide(int)>
<android.support.v7.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.JavaType findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated,boolean,com.fasterxml.jackson.databind.JavaType)>
<android.support.v7.view.menu.MenuBuilder: void onItemActionRequestChanged(android.support.v7.view.menu.MenuItemImpl)>
<android.support.v7.view.menu.MenuBuilder: void onItemVisibleChanged(android.support.v7.view.menu.MenuItemImpl)>
<android.support.v7.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<android.support.v7.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,int)>
<android.support.v7.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,android.support.v7.view.menu.MenuPresenter,int)>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object getDefaultValue(java.lang.String,com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<android.support.v7.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>
<dagger.internal.Linker: void installBindings(dagger.internal.BindingsGroup)>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.util.SparseArray: void delete(int)>
<android.support.v7.view.menu.MenuBuilder: void removeMenuPresenter(android.support.v7.view.menu.MenuPresenter)>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: void removeAt(int)>
<android.support.v7.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>
<com.tomergoldst.tooltips.ToolTipsManager$3: void onAnimationEnd(android.animation.Animator)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.support.v7.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: java.lang.Object valueAt(int)>
<android.util.SparseArray: void setValueAt(int,java.lang.Object)>
<android.support.v7.view.menu.MenuBuilder: void setCallback(android.support.v7.view.menu.MenuBuilder$Callback)>
<android.util.SparseArray: int indexOfKey(int)>
<android.support.v7.view.menu.MenuBuilder: android.support.v7.view.menu.MenuBuilder setDefaultShowAsAction(int)>
<android.support.v7.view.menu.MenuBuilder: void setExclusiveItemChecked(android.view.MenuItem)>
<android.util.SparseArray: void append(int,java.lang.Object)>
<android.support.v4.app.FragmentActivity$HostCallbacks: void onAttachFragment(android.support.v4.app.Fragment)>
<android.support.v4.app.FragmentActivity$HostCallbacks: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<dagger.internal.Linker: dagger.internal.Binding requestBinding(java.lang.String,java.lang.Object,java.lang.ClassLoader)>
<dagger.internal.Linker: dagger.internal.Binding requestBinding(java.lang.String,java.lang.Object,java.lang.ClassLoader,boolean,boolean)>
<android.support.v4.app.FragmentActivity$HostCallbacks: boolean onShouldSaveFragmentState(android.support.v4.app.Fragment)>
<android.support.v7.view.menu.MenuBuilder: void setOverrideVisibleItems(boolean)>
<android.support.v7.view.menu.MenuBuilder: void setQwertyMode(boolean)>
<android.support.v4.app.FragmentActivity$HostCallbacks: void onStartActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<com.fasterxml.jackson.databind.util.RootNameLookup: com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.cfg.MapperConfig)>
<com.fasterxml.jackson.databind.util.RootNameLookup: com.fasterxml.jackson.databind.PropertyName findRootName(java.lang.Class,com.fasterxml.jackson.databind.cfg.MapperConfig)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parse(java.lang.String)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern parsePluralStyle(java.lang.String)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern$Part getPart(int)>
<android.icu.text.MessagePattern: android.icu.text.MessagePattern$Part$Type getPartType(int)>
<android.icu.text.MessagePattern: java.lang.String getSubstring(android.icu.text.MessagePattern$Part)>
<android.icu.text.MessagePattern: boolean partSubstringMatches(android.icu.text.MessagePattern$Part,java.lang.String)>
<android.icu.text.MessagePattern: double getNumericValue(android.icu.text.MessagePattern$Part)>
<android.icu.text.MessagePattern: double getPluralOffset(int)>
<android.icu.text.MessagePattern: int getLimitPartIndex(int)>
<java.util.zip.ZipEntry: void setTime(long)>
<java.util.zip.ZipEntry: void setExtra0(byte[],boolean)>
<org.thoughtcrime.securesms.util.ListenableFutureTask: void addListener(org.thoughtcrime.securesms.util.FutureTaskListener)>
<sun.security.x509.X509CRLImpl$X509IssuerSerial: int compareTo(sun.security.x509.X509CRLImpl$X509IssuerSerial)>
<android.widget.Spinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void jumpToCurrentState(android.graphics.drawable.Drawable)>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void loadFromAttributes(android.util.AttributeSet,int)>
<com.android.internal.app.AlertController$AlertParams: void apply(com.android.internal.app.AlertController)>
<com.soundcloud.android.crop.MonitoredActivity$LifeCycleAdapter: void onActivityCreated(com.soundcloud.android.crop.MonitoredActivity)>
<android.icu.impl.CurrencyData$1: android.icu.impl.CurrencyData$CurrencyDisplayInfo getInstance(android.icu.util.ULocale,boolean)>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void setAutoSizeTextTypeWithDefaults(int)>
<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void setTextSizeInternal(int,float)>
<android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl: void addPosition(int,int)>
<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Collection)>
<android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl: void collectPrefetchPositionsFromView(android.support.v7.widget.RecyclerView,boolean)>
<android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl: boolean lastPrefetchIncludedPosition(int)>
<android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl: void setPrefetchVector(int,int)>
<com.google.zxing.common.BitMatrix: boolean get(int,int)>
<com.fasterxml.jackson.databind.ser.std.DateSerializer: long _timestamp(java.util.Date)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map$Entry)>
<com.google.zxing.common.BitMatrix: void setRegion(int,int,int,int)>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.databind.BeanProperty$Std withType(com.fasterxml.jackson.databind.JavaType)>
<dalvik.system.CloseGuard$DefaultReporter: void report(java.lang.String,java.lang.Throwable)>
<android.text.method.AllCapsTransformationMethod: void setLengthChangesAllowed(boolean)>
<com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer: com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.JsonSerializer)>
<android.support.v4.view.ViewCompat$ViewCompatApi21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>
<android.support.v7.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<org.thoughtcrime.securesms.webrtc.UncaughtExceptionHandlerManager: void registerHandler(java.lang.Thread$UncaughtExceptionHandler)>
<org.thoughtcrime.securesms.ConversationActivity$UnverifiedDismissedListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>
<com.takisoft.colorpicker.ColorPickerPaletteFlex$ColorAdapter: void onBindViewHolder(com.takisoft.colorpicker.ColorPickerPaletteFlex$ColorHolder,int)>
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>
<com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback: void setShowDialogForSubmenu(boolean)>
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>
<android.hardware.Camera$Parameters: void setPreviewFormat(int)>
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>
<android.graphics.drawable.VectorDrawable$VFullPath$8: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$8: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>
<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>
<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>
<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>
<sun.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>
<sun.misc.Unsafe: int getInt(java.lang.Object,long)>
<com.annimon.stream.Collectors$11: java.lang.String apply(java.lang.StringBuilder)>
<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>
<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>
<sun.misc.Unsafe: long getLong(java.lang.Object,long)>
<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>
<sun.misc.Unsafe: boolean getBoolean(java.lang.Object,long)>
<sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>
<sun.misc.Unsafe: byte getByte(java.lang.Object,long)>
<sun.misc.Unsafe: void putByte(java.lang.Object,long,byte)>
<sun.misc.Unsafe: char getChar(java.lang.Object,long)>
<sun.misc.Unsafe: void putChar(java.lang.Object,long,char)>
<sun.misc.Unsafe: short getShort(java.lang.Object,long)>
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>
<sun.misc.Unsafe: void putShort(java.lang.Object,long,short)>
<sun.misc.Unsafe: float getFloat(java.lang.Object,long)>
<sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>
<sun.misc.Unsafe: double getDouble(java.lang.Object,long)>
<sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>
<sun.misc.Unsafe: void park(boolean,long)>
<sun.misc.Unsafe: void unpark(java.lang.Object)>
<sun.misc.Unsafe: int getAndAddInt(java.lang.Object,long,int)>
<sun.misc.Unsafe: long getAndAddLong(java.lang.Object,long,long)>
<com.fasterxml.jackson.databind.type.TypeBindings: void _addPlaceholder(java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>
<org.thoughtcrime.securesms.database.MediaDatabase: android.database.Cursor getDocumentMediaForThread(long)>
<org.thoughtcrime.securesms.database.MediaDatabase: android.database.Cursor getGalleryMediaForThread(long)>
<android.support.v7.widget.ActionMenuView$ActionMenuPresenterCallback: void onCloseMenu(android.support.v7.view.menu.MenuBuilder,boolean)>
<android.support.v7.widget.ActionMenuView$ActionMenuPresenterCallback: boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder)>
<com.fasterxml.jackson.databind.type.TypeBindings: void addBinding(java.lang.String,com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType findType(java.lang.String)>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>
<android.support.design.widget.BaseTransientBottomBar$3: void dismiss(int)>
<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.icu.impl.UnicodeSetStringSpan: boolean contains(int)>
<android.icu.impl.UnicodeSetStringSpan: int span(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>
<android.widget.ProgressBar: void setIndeterminateDrawableTiled(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>
<android.widget.VideoView$1: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>
<android.icu.impl.UnicodeSetStringSpan: int spanAndCount(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition,android.icu.util.OutputInt)>
<android.widget.ProgressBar: void setProgressDrawableTiled(android.graphics.drawable.Drawable)>
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>
<android.icu.impl.UnicodeSetStringSpan: int spanBack(java.lang.CharSequence,int,android.icu.text.UnicodeSet$SpanCondition)>
<android.widget.ProgressBar: void setProgress(int)>
<android.widget.ProgressBar: boolean setProgressInternal(int,boolean,boolean)>
<android.widget.ProgressBar: void setSecondaryProgress(int)>
<android.support.design.widget.CoordinatorLayout: void getChildRect(android.view.View,boolean,android.graphics.Rect)>
<android.support.design.widget.CoordinatorLayout: void getDescendantRect(android.view.View,android.graphics.Rect)>
<android.support.design.widget.CoordinatorLayout: void getDesiredAnchoredChildRect(android.view.View,int,android.graphics.Rect,android.graphics.Rect)>
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)>
<android.support.design.widget.CoordinatorLayout: void getLastChildRect(android.view.View,android.graphics.Rect)>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.support.design.widget.CoordinatorLayout: android.support.design.widget.CoordinatorLayout$LayoutParams getResolvedLayoutParams(android.view.View)>
<android.graphics.drawable.VectorDrawable: java.lang.Object getTargetByName(java.lang.String)>
<android.support.design.widget.CoordinatorLayout: void offsetChildToAnchor(android.view.View,int)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>
<android.support.design.widget.CoordinatorLayout: void onChildViewsChanged(int)>
<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>
<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>
<android.media.TtmlTrack: void onTtmlNodeParsed(android.media.TtmlNode)>
<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>
<android.media.TtmlTrack: void onRootNodeParsed(android.media.TtmlNode)>
<android.transition.Visibility: void setSuppressLayout(boolean)>
<android.transition.Visibility: void setMode(int)>
<org.thoughtcrime.securesms.ConversationActivity$7$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>
<android.support.design.widget.CoordinatorLayout: void onLayoutChild(android.view.View,int)>
<android.icu.impl.ZoneMeta$CustomTimeZoneCache: android.icu.util.SimpleTimeZone createInstance(java.lang.Integer,int[])>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getRawParameterType(int)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setAnyGetter(com.fasterxml.jackson.databind.ser.AnyGetterWriter)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setConfig(com.fasterxml.jackson.databind.SerializationConfig)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setFilterId(java.lang.Object)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setFilteredProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)>
<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(java.lang.String)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setProperties(java.util.List)>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: void setTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.bumptech.glide.load.engine.ResourceRecycler: void recycle(com.bumptech.glide.load.engine.Resource)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: com.fasterxml.jackson.databind.introspect.AnnotatedMethod withMethod(java.lang.reflect.Method)>
<android.support.design.widget.CoordinatorLayout: void onMeasureChild(android.view.View,int,int,int,int)>
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<com.google.protobuf.LazyStringArrayList: void add(int,java.lang.String)>
<com.google.protobuf.LazyStringArrayList: boolean addAll(int,java.util.Collection)>
<org.thoughtcrime.securesms.components.AccessibleToggleButton: void setChecked(boolean,boolean)>
<android.support.design.widget.CoordinatorLayout: void onNestedPreScroll(android.view.View,int,int,int[],int)>
<org.thoughtcrime.securesms.components.AccessibleToggleButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<android.graphics.drawable.VectorDrawable: void setAllowCaching(boolean)>
<android.support.design.widget.CoordinatorLayout: void onNestedScroll(android.view.View,int,int,int,int,int)>
<android.support.design.widget.CoordinatorLayout: void onNestedScrollAccepted(android.view.View,android.view.View,int,int)>
<java.util.Random: int nextInt(int)>
<android.support.design.widget.CoordinatorLayout: boolean onStartNestedScroll(android.view.View,android.view.View,int,int)>
<android.support.design.widget.CoordinatorLayout: void onStopNestedScroll(android.view.View,int)>
<android.icu.util.AnnualTimeZoneRule: java.util.Date getStartInYear(int,int,int)>
<com.nineoldandroids.animation.PreHoneycombCompat$4: java.lang.Float get(android.view.View)>
<com.nineoldandroids.animation.PreHoneycombCompat$4: void setValue(android.view.View,float)>
<android.support.design.widget.CoordinatorLayout: void recordLastChildRect(android.view.View,android.graphics.Rect)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setFastForwardIncrementMs(int)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setPlayer(com.google.android.exoplayer2.ExoPlayer)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setRewindIncrementMs(int)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setSeekDispatcher(com.google.android.exoplayer2.ui.PlaybackControlView$SeekDispatcher)>
<android.icu.util.AnnualTimeZoneRule: java.util.Date getFirstStart(int,int)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setShowTimeoutMs(int)>
<android.icu.util.AnnualTimeZoneRule: java.util.Date getFinalStart(int,int)>
<android.support.design.widget.CoordinatorLayout: void setStatusBarBackground(android.graphics.drawable.Drawable)>
<com.google.android.exoplayer2.ui.PlaybackControlView: void setVisibilityListener(com.google.android.exoplayer2.ui.PlaybackControlView$VisibilityListener)>
<android.icu.util.AnnualTimeZoneRule: java.util.Date getNextStart(long,int,int,boolean)>
<java.nio.Buffer: java.nio.Buffer position(int)>
<android.graphics.drawable.RippleForeground$3: void setValue(android.graphics.drawable.RippleForeground,float)>
<android.icu.util.AnnualTimeZoneRule: java.util.Date getPreviousStart(long,int,int,boolean)>
<android.graphics.drawable.RippleForeground$3: java.lang.Float get(android.graphics.drawable.RippleForeground)>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<android.support.design.widget.CoordinatorLayout: android.support.v4.view.WindowInsetsCompat setWindowInsets(android.support.v4.view.WindowInsetsCompat)>
<java.nio.Buffer: int nextGetIndex(int)>
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.widget.PopupWindow$PopupDecorView: void requestEnterTransition(android.transition.Transition)>
<java.nio.Buffer: int nextPutIndex(int)>
<java.nio.Buffer: int checkIndex(int)>
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)>
<java.nio.Buffer: int checkIndex(int,int)>
<android.widget.PopupWindow$PopupDecorView: void startExitTransition(android.transition.Transition,android.view.View,android.transition.Transition$TransitionListener)>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
<android.icu.text.RuleBasedTransliterator$Data: android.icu.text.UnicodeMatcher lookupMatcher(int)>
<android.icu.text.RuleBasedTransliterator$Data: android.icu.text.UnicodeReplacer lookupReplacer(int)>
<java.util.concurrent.TimeUnit$1: long toMicros(long)>
<java.util.concurrent.TimeUnit$1: long toMillis(long)>
<java.util.concurrent.TimeUnit$1: long convert(long,java.util.concurrent.TimeUnit)>
<org.thoughtcrime.securesms.scribbles.widget.MotionView$MoveListener: boolean onMove(org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)>
<android.graphics.drawable.ShapeDrawable: void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager$Builder withConsumerThreads(int)>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager$Builder withDependencyInjector(org.whispersystems.jobqueue.dependencies.DependencyInjector)>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager$Builder withJobSerializer(org.whispersystems.jobqueue.persistence.JobSerializer)>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager$Builder withName(java.lang.String)>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager$Builder withRequirementProviders(org.whispersystems.jobqueue.requirements.RequirementProvider[])>
<android.icu.util.Calendar: void setTime(java.util.Date)>
<android.icu.util.Calendar: void setTimeInMillis(long)>
<android.icu.util.Calendar: int get(int)>
<android.icu.util.Calendar: int internalGet(int)>
<android.icu.util.Calendar: int internalGet(int,int)>
<android.icu.util.Calendar: void set(int,int)>
<com.fasterxml.jackson.databind.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>
<com.bumptech.glide.manager.RequestManagerRetriever$1: com.bumptech.glide.RequestManager build(com.bumptech.glide.Glide,com.bumptech.glide.manager.Lifecycle,com.bumptech.glide.manager.RequestManagerTreeNode,android.content.Context)>
<android.icu.text.DateFormatSymbols$1: android.icu.text.DateFormatSymbols createInstance(java.lang.String,android.icu.util.ULocale)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>
<android.icu.util.Calendar: boolean isSet(int)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: boolean hasId(java.lang.Object)>
<android.icu.util.Calendar: void prepareGetActual(int,boolean)>
<com.android.internal.policy.DecorContext: void setPhoneWindow(com.android.internal.policy.PhoneWindow)>
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>
<com.fasterxml.jackson.databind.util.StdDateFormat: void setTimeZone(java.util.TimeZone)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)>
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>
<com.google.protobuf.DescriptorProtos$MessageOptions: com.google.protobuf.DescriptorProtos$UninterpretedOption getUninterpretedOption(int)>
<android.widget.AccessibilityIterators$LineTextSegmentIterator: void initialize(android.text.Spannable,android.text.Layout)>
<android.support.v7.widget.SwitchCompat$1: java.lang.Float get(android.support.v7.widget.SwitchCompat)>
<android.support.v7.widget.SwitchCompat$1: void set(android.support.v7.widget.SwitchCompat,java.lang.Float)>
<android.icu.util.Calendar: void add(int,int)>
<java.lang.Byte: int compareTo(java.lang.Byte)>
<com.bumptech.glide.manager.DefaultConnectivityMonitorFactory: com.bumptech.glide.manager.ConnectivityMonitor build(android.content.Context,com.bumptech.glide.manager.ConnectivityMonitor$ConnectivityListener)>
<android.icu.util.Calendar: android.icu.text.DateFormat getDateTimeFormat(int,int,android.icu.util.ULocale)>
<java.lang.Float: int compareTo(java.lang.Float)>
<com.soundcloud.android.crop.CropUtil$BackgroundJob: void onActivityDestroyed(com.soundcloud.android.crop.MonitoredActivity)>
<android.icu.util.Calendar: void pinField(int)>
<android.icu.util.Calendar: int weekNumber(int,int,int)>
<android.icu.util.Calendar: int weekNumber(int,int)>
<android.icu.util.Calendar: void setTimeZone(android.icu.util.TimeZone)>
<java.util.HashMap$KeySet: boolean contains(java.lang.Object)>
<android.icu.util.Calendar: void setLenient(boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: void addDisappearingView(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: void addDisappearingView(android.view.View,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void addView(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: void addView(android.view.View,int)>
<org.thoughtcrime.securesms.notifications.NotificationItem: android.app.PendingIntent getPendingIntent(android.content.Context)>
<android.icu.util.Calendar: void setFirstDayOfWeek(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void attachView(android.view.View,int)>
<android.icu.util.Calendar: void setMinimalDaysInFirstWeek(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void attachView(android.view.View,int,android.support.v7.widget.RecyclerView$LayoutParams)>
<android.icu.util.Calendar: int getLimit(int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void calculateItemDecorationsForChild(android.view.View,android.graphics.Rect)>
<android.icu.util.Calendar: int getMinimum(int)>
<android.icu.util.Calendar: int getMaximum(int)>
<android.icu.util.Calendar: int getGreatestMinimum(int)>
<android.icu.util.Calendar: int getLeastMaximum(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void detachAndScrapAttachedViews(android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.RecyclerView$LayoutManager: void detachViewAt(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void dispatchAttachedToWindow(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.RecyclerView$LayoutManager: void dispatchDetachedFromWindow(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$Recycler)>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: com.google.protobuf.DescriptorProtos$MethodDescriptorProto getMethod(int)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void attach(android.support.v7.widget.RecyclerView$Adapter)>
<android.support.v7.widget.RecyclerView$LayoutManager: android.support.v7.widget.RecyclerView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.support.v7.widget.AppCompatTextHelper: void applyCompoundDrawableTint(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getBottomDecorationHeight(android.view.View)>
<android.icu.util.Calendar: android.icu.util.Calendar setWeekData(android.icu.util.Calendar$WeekData)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void factorInBindTime(int,long)>
<android.support.v7.widget.RecyclerView$LayoutManager: android.view.View getChildAt(int)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void factorInCreateTime(int,long)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: android.support.v7.widget.RecyclerView$ViewHolder getRecycledView(int)>
<org.whispersystems.jobqueue.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getColumnCountForAccessibility(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void onAdapterChanged(android.support.v7.widget.RecyclerView$Adapter,android.support.v7.widget.RecyclerView$Adapter,boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedBottom(android.view.View)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void putRecycledView(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.RecyclerView$LayoutManager: void getDecoratedBoundsWithMargins(android.view.View,android.graphics.Rect)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedLeft(android.view.View)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: long runningAverage(long,long)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedMeasuredHeight(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedMeasuredWidth(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedRight(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getDecoratedTop(android.view.View)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: boolean willBindInTime(int,long,long)>
<android.support.v7.widget.RecyclerView$RecycledViewPool: boolean willCreateInTime(int,long,long)>
<android.icu.util.Calendar: void computeGregorianFields(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getLeftDecorationWidth(android.view.View)>
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPosition(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getRightDecorationWidth(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getRowCountForAccessibility(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getSelectionModeForAccessibility(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State)>
<android.support.v7.widget.RecyclerView$LayoutManager: int getTopDecorationHeight(android.view.View)>
<android.icu.util.Calendar: int resolveFields(int[][][])>
<android.support.v7.widget.RecyclerView$LayoutManager: void getTransformedBoundingBox(android.view.View,boolean,android.graphics.Rect)>
<android.support.v7.widget.AppCompatTextHelper: void onLayout(boolean,int,int,int,int)>
<android.support.v7.widget.AppCompatTextHelper: void onSetTextAppearance(android.content.Context,int)>
<android.icu.util.Calendar: int newestStamp(int,int,int)>
<android.support.v7.widget.AppCompatTextHelper: void setAllCaps(boolean)>
<android.icu.util.Calendar: int getStamp(int)>
<android.icu.util.Calendar: int newerField(int,int)>
<android.support.v7.widget.AppCompatTextHelper: void setAutoSizeTextTypeWithDefaults(int)>
<android.support.v7.widget.AppCompatTextHelper: void setTextSize(int,float)>
<android.icu.util.Calendar: void validateField(int,int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean isLayoutHierarchical(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$MuteClickedListener: void lambda$handleMute$0$RecipientPreferenceActivity$RecipientPreferenceFragment$MuteClickedListener(long)>
<android.support.v7.widget.RecyclerView$LayoutManager: void layoutDecoratedWithMargins(android.view.View,int,int,int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void measureChildWithMargins(android.view.View,int,int)>
<android.icu.impl.ICUResourceBundleReader: java.lang.String getStringV2(int)>
<android.icu.util.Calendar: int computeZoneOffset(long,int)>
<android.net.Uri$AbstractPart: void writeTo(android.os.Parcel)>
<android.support.v7.widget.RecyclerView$LayoutManager: void moveView(int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean onAddFocusables(android.support.v7.widget.RecyclerView,java.util.ArrayList,int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onDetachedFromWindow(android.support.v7.widget.RecyclerView)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions ambientEnabled(boolean)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions camera(com.google.android.gms.maps.model.CameraPosition)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions compassEnabled(boolean)>
<android.icu.impl.ICUResourceBundleReader: java.lang.String getString(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onInitializeAccessibilityEvent(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,android.view.accessibility.AccessibilityEvent)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions latLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions liteMode(boolean)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions mapToolbarEnabled(boolean)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions mapType(int)>
<android.media.Cea608CCParser$CCLineBuilder: void setCharAt(int,char)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions maxZoomPreference(float)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions minZoomPreference(float)>
<android.media.Cea608CCParser$CCLineBuilder: void setMidRowAt(int,android.media.Cea608CCParser$StyleCode)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions rotateGesturesEnabled(boolean)>
<android.icu.impl.ICUResourceBundleReader: java.lang.String getAlias(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onInitializeAccessibilityNodeInfo(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<android.media.Cea608CCParser$CCLineBuilder: void setPACAt(int,android.media.Cea608CCParser$PAC)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions scrollGesturesEnabled(boolean)>
<android.media.Cea608CCParser$CCLineBuilder: char charAt(int)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions tiltGesturesEnabled(boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onInitializeAccessibilityNodeInfo(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions useViewLifecycleInFragment(boolean)>
<android.media.Cea608CCParser$CCLineBuilder: void applyStyleSpan(android.text.SpannableStringBuilder,android.media.Cea608CCParser$StyleCode,int,int)>
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.ClassLoader)>
<android.icu.impl.ICUResourceBundleReader: byte[] getBinary(int,byte[])>
<com.google.android.gms.maps.GoogleMapOptions: void writeToParcel(android.os.Parcel,int)>
<android.icu.util.Calendar: int computeGregorianMonthStart(int,int)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions zOrderOnTop(boolean)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions zoomControlsEnabled(boolean)>
<android.media.Cea608CCParser$CCLineBuilder: android.text.SpannableStringBuilder getStyledText(android.view.accessibility.CaptioningManager$CaptionStyle)>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions zoomGesturesEnabled(boolean)>
<android.icu.impl.ICUResourceBundleReader: int[] getIntVector(int)>
<android.app.ApplicationLoaders: void addPath(java.lang.ClassLoader,java.lang.String)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onInitializeAccessibilityNodeInfoForItem(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<android.icu.impl.ICUResourceBundleReader: android.icu.impl.ICUResourceBundleReader$Array getArray(int)>
<android.icu.util.Calendar: void internalSet(int,int)>
<android.icu.impl.ICUResourceBundleReader: android.icu.impl.ICUResourceBundleReader$Table getTable(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onInitializeAccessibilityNodeInfoForItem(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
<android.support.v7.widget.RecyclerView$LayoutManager: android.view.View onInterceptFocusSearch(android.view.View,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onItemsChanged(android.support.v7.widget.RecyclerView)>
<java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
<android.support.v4.util.ArrayMap$1: java.lang.Object colGetEntry(int,int)>
<android.icu.util.Calendar: java.lang.String fieldName(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onMeasure(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,int,int)>
<android.support.v4.util.ArrayMap$1: int colIndexOfKey(java.lang.Object)>
<android.support.v4.util.ArrayMap$1: int colIndexOfValue(java.lang.Object)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean onRequestChildFocus(android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$State,android.view.View,android.view.View)>
<android.support.v4.util.ArrayMap$1: void colRemoveAt(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean onRequestChildFocus(android.support.v7.widget.RecyclerView,android.view.View,android.view.View)>
<android.app.ActivityTransitionCoordinator$FixedEpicenterCallback: void setEpicenter(android.graphics.Rect)>
<android.icu.util.Calendar: android.icu.util.ULocale getLocale(android.icu.util.ULocale$Type)>
<android.support.v7.widget.RecyclerView$LayoutManager: void onScrollStateChanged(int)>
<android.icu.util.Calendar: void setLocale(android.icu.util.ULocale,android.icu.util.ULocale)>
<java.text.ParsePosition: void setIndex(int)>
<java.text.ParsePosition: void setErrorIndex(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeAndRecycleAllViews(android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeAndRecycleScrapInt(android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeAndRecycleView(android.view.View,android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeAndRecycleViewAt(int,android.support.v7.widget.RecyclerView$Recycler)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeView(android.view.View)>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeViewAt(int)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean requestChildRectangleOnScreen(android.support.v7.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean requestChildRectangleOnScreen(android.support.v7.widget.RecyclerView,android.view.View,android.graphics.Rect,boolean,boolean)>
<org.thoughtcrime.securesms.scribbles.widget.MotionView$RotateListener: boolean onRotate(org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setAutoMeasureEnabled(boolean)>
<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode _add(com.fasterxml.jackson.databind.JsonNode)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setExactMeasureSpecsFrom(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setMeasureSpecs(int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setMeasuredDimension(int,int)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setMeasuredDimension(android.graphics.Rect,int,int)>
<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)>
<android.support.v7.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(android.support.v7.view.menu.MenuView$ItemView)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setMeasuredDimensionFromChildren(int,int)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void getDisplayMatrix(android.graphics.Matrix)>
<com.android.mms.transaction.TransactionService: void onNewIntent(android.content.Intent,int)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void getSuppMatrix(android.graphics.Matrix)>
<android.support.v7.widget.RecyclerView$LayoutManager: void setRecyclerView(android.support.v7.widget.RecyclerView)>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean shouldMeasureChild(android.view.View,int,int,android.support.v7.widget.RecyclerView$LayoutParams)>
<android.support.v7.view.menu.MenuItemImpl: void setActionViewExpanded(boolean)>
<android.support.v7.widget.RecyclerView$LayoutManager: void startSmoothScroll(android.support.v7.widget.RecyclerView$SmoothScroller)>
<android.appwidget.AppWidgetHostView: void setOnClickHandler(android.widget.RemoteViews$OnClickHandler)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setAllowParentInterceptOnEdge(boolean)>
<android.support.v7.view.menu.MenuItemImpl: void setCheckedInt(boolean)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: boolean setDisplayMatrix(android.graphics.Matrix)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setMaximumScale(float)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setMediumScale(float)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setMinimumScale(float)>
<android.support.v7.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnClickListener(android.view.View$OnClickListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnMatrixChangeListener(com.github.chrisbanes.photoview.OnMatrixChangedListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnOutsidePhotoTapListener(com.github.chrisbanes.photoview.OnOutsidePhotoTapListener)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask: int[] doInBackground(java.lang.Void[])>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnPhotoTapListener(com.github.chrisbanes.photoview.OnPhotoTapListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnScaleChangeListener(com.github.chrisbanes.photoview.OnScaleChangedListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnSingleFlingListener(com.github.chrisbanes.photoview.OnSingleFlingListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnViewDragListener(com.github.chrisbanes.photoview.OnViewDragListener)>
<android.support.v7.view.menu.MenuItemImpl: void setIsActionButton(boolean)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setOnViewTapListener(com.github.chrisbanes.photoview.OnViewTapListener)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setRotationBy(float)>
<android.support.v7.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setRotationTo(float)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setScale(float)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setScale(float,float,float,boolean)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setScale(float,boolean)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setScaleLevels(float,float,float)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setScaleType(android.widget.ImageView$ScaleType)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setZoomTransitionDuration(int)>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void setZoomable(boolean)>
<android.support.v7.view.menu.MenuItemImpl: void setSubMenu(android.support.v7.view.menu.SubMenuBuilder)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$TilesInitTask: void onPostExecute(int[])>
<android.support.v7.view.menu.MenuItemImpl: android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider)>
<org.thoughtcrime.securesms.webrtc.locks.LockManager$1: void orientationChanged(int)>
<android.support.v7.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>
<android.appwidget.AppWidgetHostView: void applyRemoteViews(android.widget.RemoteViews)>
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)>
<android.support.v4.content.CursorLoader: void deliverResult(android.database.Cursor)>
<android.graphics.drawable.VectorDrawable$VFullPath$6: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<android.graphics.drawable.VectorDrawable$VFullPath$6: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<java.lang.Runtime: void exit(int)>
<android.support.v7.widget.StaggeredGridLayoutManager: void assertNotInLayoutOrScroll(java.lang.String)>
<android.support.design.widget.SnackbarManager$SnackbarRecord: boolean isSnackbar(android.support.design.widget.SnackbarManager$Callback)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>
<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>
<android.support.v4.content.CursorLoader: void onCanceled(android.database.Cursor)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void unbind(android.content.Context,int,android.content.Intent)>
<java.util.SimpleTimeZone: boolean hasSameRules(java.util.TimeZone)>
<android.support.v7.widget.DefaultItemAnimator: void animateAddImpl(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.DefaultItemAnimator: boolean animateChange(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ViewHolder,int,int,int,int)>
<android.support.v7.widget.DefaultItemAnimator: void animateChangeImpl(android.support.v7.widget.DefaultItemAnimator$ChangeInfo)>
<java.lang.Runtime: void loadLibrary0(java.lang.ClassLoader,java.lang.String)>
<android.icu.impl.locale.LocaleExtensions: android.icu.impl.locale.Extension getExtension(java.lang.Character)>
<android.icu.impl.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: void toPath(android.graphics.Path)>
<android.support.v7.widget.DefaultItemAnimator: void animateMoveImpl(android.support.v7.widget.RecyclerView$ViewHolder,int,int,int,int)>
<android.support.v7.widget.DefaultItemAnimator: boolean animateRemove(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.DefaultItemAnimator: boolean canReuseUpdatedViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,java.util.List)>
<android.support.v7.widget.DefaultItemAnimator: void cancelAll(java.util.List)>
<android.support.v7.widget.DefaultItemAnimator: void endAnimation(android.support.v7.widget.RecyclerView$ViewHolder)>
<org.thoughtcrime.securesms.service.PersistentAlarmManagerListener: void onReceive(android.content.Context,android.content.Intent)>
<android.view.RenderNodeAnimator$DelayedAnimationHelper: void addDelayedAnimation(android.view.RenderNodeAnimator)>
<android.view.RenderNodeAnimator$DelayedAnimationHelper: void removeDelayedAnimation(android.view.RenderNodeAnimator)>
<com.annimon.stream.Collectors$10: void accept(java.lang.StringBuilder,java.lang.CharSequence)>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: android.support.v4.app.Fragment initFragment(int,android.support.v4.app.Fragment,org.thoughtcrime.securesms.crypto.MasterSecret)>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: android.support.v4.app.Fragment initFragment(int,android.support.v4.app.Fragment,org.thoughtcrime.securesms.crypto.MasterSecret,java.util.Locale)>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: android.support.v4.app.Fragment initFragment(int,android.support.v4.app.Fragment,org.thoughtcrime.securesms.crypto.MasterSecret,java.util.Locale,android.os.Bundle)>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: void onCreate(android.os.Bundle,org.thoughtcrime.securesms.crypto.MasterSecret)>
<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)>
<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)>
<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>
<android.widget.ScrollBarDrawable: void draw(android.graphics.Canvas)>
<com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler: void addProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)>
<com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler: com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler renameAll(com.fasterxml.jackson.databind.util.NameTransformer)>
<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>
<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>
<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>
<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>
<android.widget.ScrollBarDrawable: int getSize(boolean)>
<android.widget.ScrollBarDrawable: void setAlpha(int)>
<android.media.MediaCodec$BufferInfo: void set(int,int,long,int)>
<java.lang.Thread: void blockedOn(sun.nio.ch.Interruptible)>
<android.media.Cea608CCWidget: void onDisplayChanged(android.text.SpannableStringBuilder[])>
<android.widget.ExpandableListConnector: void setExpandableListAdapter(android.widget.ExpandableListAdapter)>
<android.support.v7.widget.StaggeredGridLayoutManager: void setSpanCount(int)>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.Double: int compareTo(java.lang.Double)>
<android.media.TextTrackCue: java.lang.StringBuilder appendStringsToBuilder(java.lang.StringBuilder)>
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
<java.lang.Thread: void setPriority(int)>
<android.graphics.Shader: void init(long)>
<android.media.TextTrackCue: java.lang.StringBuilder appendLinesToBuilder(java.lang.StringBuilder)>
<java.lang.Thread: void setName(java.lang.String)>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<com.nineoldandroids.animation.PreHoneycombCompat$7: java.lang.Float get(android.view.View)>
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)>
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<com.nineoldandroids.animation.PreHoneycombCompat$7: void setValue(android.view.View,float)>
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void onProcessedOutputBuffer(long)>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<com.bumptech.glide.provider.ResourceDecoderRegistry: void append(java.lang.String,com.bumptech.glide.load.ResourceDecoder,java.lang.Class,java.lang.Class)>
<java.lang.Thread: void parkFor$(long)>
<java.lang.Thread: void parkUntil$(long)>
<com.bumptech.glide.provider.ResourceDecoderRegistry: void setBucketPriorityList(java.util.List)>
<org.thoughtcrime.securesms.DeviceListFragment$5: java.lang.Void doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.RecipientPreferenceActivity: void lambda$initializeToolbar$1$RecipientPreferenceActivity(android.view.View)>
<org.thoughtcrime.securesms.DeviceListFragment$5: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity: void lambda$onModified$2$RecipientPreferenceActivity(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.PassphraseActivity: void setMasterSecret(org.thoughtcrime.securesms.crypto.MasterSecret)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity: void onModified(org.thoughtcrime.securesms.recipients.Recipient)>
<android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)>
<com.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)>
<android.support.v4.content.Loader: void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener)>
<org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix,int,int,int,int)>
<android.support.v4.content.Loader: void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)>
<com.google.android.exoplayer2.ui.SimpleExoPlayerView: void setPlayer(com.google.android.exoplayer2.SimpleExoPlayer)>
<com.fasterxml.jackson.databind.type.HierarchicType: void setSubType(com.fasterxml.jackson.databind.type.HierarchicType)>
<com.fasterxml.jackson.databind.type.HierarchicType: void setSuperType(com.fasterxml.jackson.databind.type.HierarchicType)>
<android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)>
<android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)>
<com.google.zxing.qrcode.decoder.Version: com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)>
<android.view.ViewGroupOverlay: void add(android.view.View)>
<com.google.android.exoplayer2.DefaultLoadControl: void onTracksSelected(com.google.android.exoplayer2.Renderer[],com.google.android.exoplayer2.source.TrackGroupArray,com.google.android.exoplayer2.trackselection.TrackSelectionArray)>
<org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector$SimpleOnRotateGestureListener: boolean onRotateBegin(org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector)>
<org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector$SimpleOnRotateGestureListener: void onRotateEnd(org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector)>
<com.google.android.exoplayer2.DefaultLoadControl: boolean shouldContinueLoading(long)>
<com.bumptech.glide.manager.TargetTracker: void untrack(com.bumptech.glide.request.target.Target)>
<com.google.android.exoplayer2.DefaultLoadControl: boolean shouldStartPlayback(long,boolean)>
<com.android.internal.view.menu.ContextMenuBuilder: com.android.internal.view.menu.MenuDialogHelper showDialog(android.view.View,android.os.IBinder)>
<org.thoughtcrime.securesms.database.DraftDatabase$Draft: java.lang.String getSnippet(android.content.Context)>
<com.android.internal.view.menu.ContextMenuBuilder: com.android.internal.view.menu.MenuPopupHelper showPopup(android.content.Context,android.view.View,float,float)>
<android.view.View$4: void setValue(android.view.View,float)>
<android.view.View$4: java.lang.Float get(android.view.View)>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: void notifyItemMoved(int,int)>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: void notifyItemRangeChanged(int,int,java.lang.Object)>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: void notifyItemRangeInserted(int,int)>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: void notifyItemRangeRemoved(int,int)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder mergeFrom(com.google.protobuf.DescriptorProtos$FieldOptions)>
<android.util.Rational: int compareTo(android.util.Rational)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder setCtype(com.google.protobuf.DescriptorProtos$FieldOptions$CType)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder setDeprecated(boolean)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder setLazy(boolean)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder setPacked(boolean)>
<com.google.protobuf.DescriptorProtos$FieldOptions$Builder: com.google.protobuf.DescriptorProtos$FieldOptions$Builder setWeak(boolean)>
<java.io.ObjectInputStream$HandleTable$HandleList: void add(int)>
<java.io.ObjectInputStream$HandleTable$HandleList: int get(int)>
<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>
<java.io.UnixFileSystem: int prefixLength(java.lang.String)>
<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>
<com.github.chrisbanes.photoview.PhotoViewAttacher$FlingRunnable: void fling(int,int,int,int)>
<android.support.v7.widget.RecyclerView$SavedState: void copyFrom(android.support.v7.widget.RecyclerView$SavedState)>
<java.io.UnixFileSystem: boolean isAbsolute(java.io.File)>
<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>
<java.io.UnixFileSystem: int getBooleanAttributes(java.io.File)>
<java.io.UnixFileSystem: boolean checkAccess(java.io.File,int)>
<java.io.UnixFileSystem: long getLastModifiedTime(java.io.File)>
<java.io.UnixFileSystem: long getLength(java.io.File)>
<java.io.UnixFileSystem: boolean setPermission(java.io.File,int,boolean,boolean)>
<android.animation.AnimatorInflater$PathDataEvaluator: android.util.PathParser$PathData evaluate(float,android.util.PathParser$PathData,android.util.PathParser$PathData)>
<java.io.UnixFileSystem: boolean delete(java.io.File)>
<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>
<java.io.UnixFileSystem: boolean createDirectory(java.io.File)>
<java.io.UnixFileSystem: boolean rename(java.io.File,java.io.File)>
<java.io.UnixFileSystem: boolean setReadOnly(java.io.File)>
<org.thoughtcrime.securesms.ConversationActivity$8$1: java.lang.Long doInBackground(org.thoughtcrime.securesms.sms.OutgoingEndSessionMessage[])>
<java.io.UnixFileSystem: int compare(java.io.File,java.io.File)>
<java.io.UnixFileSystem: int hashCode(java.io.File)>
<org.thoughtcrime.securesms.ConversationActivity$8$1: void onPostExecute(java.lang.Long)>
<com.google.android.gms.security.ProviderInstaller$1: java.lang.Integer zzb(java.lang.Void[])>
<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$VibrateChangeListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: boolean continueLoading(long)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void discardBuffer(long)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: boolean isReady(int)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void onLoadCanceled(com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable,long,long,boolean)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void onLoadCanceled(com.google.android.exoplayer2.upstream.Loader$Loadable,long,long,boolean)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void onLoadCompleted(com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable,long,long)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void onLoadCompleted(com.google.android.exoplayer2.upstream.Loader$Loadable,long,long)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: int onLoadError(com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable,long,long,java.io.IOException)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: int onLoadError(com.google.android.exoplayer2.upstream.Loader$Loadable,long,long,java.io.IOException)>
<com.android.internal.view.menu.MenuAdapter: void setForceShowIcon(boolean)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void prepare(com.google.android.exoplayer2.source.MediaPeriod$Callback)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: int readData(int,com.google.android.exoplayer2.FormatHolder,com.google.android.exoplayer2.decoder.DecoderInputBuffer,boolean)>
<android.content.UndoOperation: boolean matchOwner(android.content.UndoOwner)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: long seekToUs(long)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector)>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager)>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: long selectTracks(com.google.android.exoplayer2.trackselection.TrackSelection[],boolean[],com.google.android.exoplayer2.source.SampleStream[],boolean[],long)>
<android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup: int forceInvalidateAfter(int)>
<android.support.v7.widget.RecyclerView$ItemAnimator: void dispatchAnimationFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup: android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem getFirstFullSpanItemInRange(int,int,int,boolean)>
<android.support.v7.widget.RecyclerView$ItemAnimator: boolean isRunning(android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorFinishedListener)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)>
<android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup: android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem getFullSpanItem(int)>
<android.support.v4.app.BackStackRecord: void addOp(android.support.v4.app.BackStackRecord$Op)>
<android.support.v7.widget.RecyclerView$ItemAnimator: void onAnimationFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>
<android.support.v7.widget.RecyclerView$ItemAnimator: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo recordPostLayoutInformation(android.support.v7.widget.RecyclerView$State,android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup: int invalidateAfter(int)>
<android.support.v7.widget.RecyclerView$ItemAnimator: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo recordPreLayoutInformation(android.support.v7.widget.RecyclerView$State,android.support.v7.widget.RecyclerView$ViewHolder,int,java.util.List)>
<android.support.v7.widget.RecyclerView$ItemAnimator: void setListener(android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorListener)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String)>
<android.support.v4.app.BackStackRecord: void bumpBackStackNesting(int)>
<android.support.v4.widget.ScrollerCompat: void fling(int,int,int,int,int,int,int,int)>
<android.support.v4.app.BackStackRecord: int commitInternal(boolean)>
<org.webrtc.GlTextureFrameBuffer: void setSize(int,int)>
<android.support.v4.widget.ScrollerCompat: void startScroll(int,int,int,int,int)>
<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.icu.impl.Norm2AllModes$Normalizer2WithImpl: java.lang.StringBuilder append(java.lang.StringBuilder,java.lang.CharSequence)>
<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)>
<android.icu.impl.Norm2AllModes$Normalizer2WithImpl: java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder,java.lang.CharSequence,boolean)>
<android.icu.impl.Norm2AllModes$Normalizer2WithImpl: int getCombiningClass(int)>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>
<com.fasterxml.jackson.databind.JsonMappingException: void _appendPathDesc(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.StringBuilder getPathReference(java.lang.StringBuilder)>
<com.fasterxml.jackson.databind.JsonMappingException: void prependPath(com.fasterxml.jackson.databind.JsonMappingException$Reference)>
<com.fasterxml.jackson.databind.JsonMappingException: void prependPath(java.lang.Object,java.lang.String)>
<android.print.pdf.PrintedPdfDocument: android.graphics.pdf.PdfDocument$Page startPage(int)>
<org.webrtc.PeerConnection: boolean addIceCandidate(org.webrtc.IceCandidate)>
<org.webrtc.PeerConnection: boolean addStream(org.webrtc.MediaStream)>
<android.os.Message: void setAsynchronous(boolean)>
<org.webrtc.PeerConnection: void createAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)>
<org.webrtc.PeerConnection: org.webrtc.DataChannel createDataChannel(java.lang.String,org.webrtc.DataChannel$Init)>
<org.webrtc.PeerConnection: void createOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)>
<android.os.Message: java.lang.String toString(long)>
<android.support.v4.app.BackStackRecord: void executePopOps(boolean)>
<org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)>
<org.webrtc.PeerConnection: void setRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)>
<android.icu.impl.LocaleIDParser$1: int compare(java.lang.String,java.lang.String)>
<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.Fragment expandOps(java.util.ArrayList,android.support.v4.app.Fragment)>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>
<com.android.internal.policy.PhoneWindow: void setContentView(int)>
<com.android.internal.policy.PhoneWindow: void setContentView(android.view.View)>
<com.android.internal.policy.PhoneWindow: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<android.support.v4.app.NotificationCompat$WearableExtender: android.support.v4.app.NotificationCompat$WearableExtender addAction(android.support.v4.app.NotificationCompat$Action)>
<android.icu.text.DecimalFormat: java.lang.StringBuffer format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>
<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence)>
<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence,boolean)>
<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>
<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>
<android.support.v4.app.BackStackRecord: boolean interactsWith(int)>
<android.support.v4.app.BackStackRecord: boolean interactsWith(java.util.ArrayList,int,int)>
<android.icu.text.DecimalFormat: android.icu.text.PluralRules$FixedDecimal getFixedDecimal(double)>
<android.icu.text.DecimalFormat: android.icu.text.PluralRules$FixedDecimal getFixedDecimal(double,android.icu.text.DigitList)>
<java.net.InetAddress$InetAddressHolder: void init(java.lang.String,int)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>
<org.thoughtcrime.securesms.components.ZoomingImageView$1: android.util.Pair doInBackground(java.lang.Void[])>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)>
<com.fasterxml.jackson.databind.DatabindContext: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>
<org.thoughtcrime.securesms.components.ZoomingImageView$1: void onPostExecute(android.util.Pair)>
<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.annotation.ObjectIdResolver objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int)>
<android.support.v4.app.BackStackRecord: void setOnStartPostponedListener(android.support.v4.app.Fragment$OnStartEnterTransitionListener)>
<android.support.v4.app.BackStackRecord: android.support.v4.app.Fragment trackAddedFragmentsInPop(java.util.ArrayList,android.support.v4.app.Fragment)>
<com.android.internal.policy.PhoneWindow: void closePanel(int)>
<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>
<com.android.internal.policy.PhoneWindow: void checkCloseActionMenu(android.view.Menu)>
<com.android.internal.policy.PhoneWindow: void invalidatePanelMenu(int)>
<com.android.internal.policy.PhoneWindow: void doInvalidatePanelMenu(int)>
<android.icu.text.DateIntervalFormat: java.lang.StringBuffer format(android.icu.util.Calendar,android.icu.util.Calendar,java.lang.StringBuffer,java.text.FieldPosition)>
<android.support.v7.widget.AbsActionBarView$VisibilityAnimListener: android.support.v7.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(android.support.v4.view.ViewPropertyAnimatorCompat,int)>
<android.view.RenderNodeAnimator: void setTarget(android.view.View)>
<android.view.RenderNodeAnimator: void setTarget(android.graphics.Canvas)>
<android.view.RenderNodeAnimator: void setStartValue(float)>
<android.view.RenderNodeAnimator: void setStartDelay(long)>
<android.icu.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>
<com.android.internal.policy.PhoneWindow: boolean initializePanelMenu(com.android.internal.policy.PhoneWindow$PanelFeatureState)>
<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>
<android.app.ActivityTransitionState: int addExitTransitionCoordinator(android.app.ExitTransitionCoordinator)>
<org.thoughtcrime.securesms.mms.AttachmentManager$3: org.thoughtcrime.securesms.mms.Slide doInBackground(java.lang.Void[])>
<com.google.android.gms.common.zzc: int isGooglePlayServicesAvailable(android.content.Context)>
<org.thoughtcrime.securesms.mms.AttachmentManager$3: void onPostExecute(org.thoughtcrime.securesms.mms.Slide)>
<com.google.android.gms.common.zzc: android.content.Intent zza(android.content.Context,int,java.lang.String)>
<org.thoughtcrime.securesms.components.emoji.RecentEmojiPageModel$1: java.lang.Void doInBackground(java.lang.Void[])>
<android.app.ActivityTransitionState: void onResume(android.app.Activity,boolean)>
<android.icu.text.DateIntervalFormat: void setTimeZone(android.icu.util.TimeZone)>
<com.android.internal.policy.PhoneWindow: void setElevation(float)>
<com.android.internal.policy.PhoneWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActivityTransitionState: boolean startExitBackTransition(android.app.Activity)>
<android.text.util.Linkify$4: int compare(android.text.util.LinkSpec,android.text.util.LinkSpec)>
<android.app.ActivityTransitionState: void startExitOutTransition(android.app.Activity,android.os.Bundle)>
<android.graphics.drawable.VectorDrawable$VFullPath$2: void setValue(android.graphics.drawable.VectorDrawable$VFullPath,float)>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.DescriptorProtos$EnumDescriptorProto getEnumType(int)>
<android.graphics.drawable.VectorDrawable$VFullPath$2: java.lang.Float get(android.graphics.drawable.VectorDrawable$VFullPath)>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.DescriptorProtos$FieldDescriptorProto getExtension(int)>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.DescriptorProtos$FieldDescriptorProto getField(int)>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.DescriptorProtos$DescriptorProto getNestedType(int)>
<com.android.internal.policy.PhoneWindow: void setDefaultIcon(int)>
<com.android.internal.policy.PhoneWindow: void setDefaultLogo(int)>
<android.support.v4.app.ListFragment: void setListAdapter(android.widget.ListAdapter)>
<com.android.internal.policy.PhoneWindow: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<com.android.internal.policy.PhoneWindow: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>
<android.widget.OverScroller: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.OverScroller: void forceFinished(boolean)>
<com.android.internal.policy.PhoneWindow: void restoreHierarchyState(android.os.Bundle)>
<android.widget.OverScroller: void startScroll(int,int,int,int)>
<android.widget.OverScroller: void startScroll(int,int,int,int,int)>
<android.widget.OverScroller: boolean springBack(int,int,int,int,int,int)>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int,int,int)>
<java.util.GregorianCalendar: boolean isLeapYear(int)>
<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView generateDecor(int)>
<com.android.internal.policy.PhoneWindow: android.view.ViewGroup generateLayout(com.android.internal.policy.DecorView)>
<java.util.GregorianCalendar: void add(int,int)>
<android.support.v7.widget.SimpleItemAnimator: boolean animateAppearance(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.SimpleItemAnimator: boolean animateChange(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<org.thoughtcrime.securesms.ShareActivity: void onCreateConversation(long,org.thoughtcrime.securesms.recipients.Recipient,int)>
<android.support.v7.widget.SimpleItemAnimator: boolean animateDisappearance(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<java.text.Format: java.lang.String format(java.lang.Object)>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void onItemRangeChanged(int,int,java.lang.Object)>
<android.support.v7.widget.SimpleItemAnimator: boolean animatePersistence(android.support.v7.widget.RecyclerView$ViewHolder,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo,android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo)>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void onItemRangeInserted(int,int)>
<android.app.DialogFragment: void dismissInternal(boolean)>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void onItemRangeMoved(int,int,int)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String)>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void onItemRangeRemoved(int,int)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.text.AttributedCharacterIterator[])>
<android.app.DialogFragment: void setShowsDialog(boolean)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<android.support.v7.widget.SimpleItemAnimator: boolean canReuseUpdatedViewHolder(android.support.v7.widget.RecyclerView$ViewHolder)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchAddFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchAddStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchChangeFinished(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchChangeStarting(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchMoveFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchMoveStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchRemoveFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void dispatchRemoveStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.GridLayout$Assoc: void put(java.lang.Object,java.lang.Object)>
<android.support.v7.widget.SimpleItemAnimator: void onAddFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void onAddStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void onChangeFinished(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.support.v7.widget.SimpleItemAnimator: void onChangeStarting(android.support.v7.widget.RecyclerView$ViewHolder,boolean)>
<android.support.v7.widget.SimpleItemAnimator: void onMoveFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void onMoveStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<java.util.TreeMap: void putAll(java.util.Map)>
<android.support.v7.widget.SimpleItemAnimator: void onRemoveFinished(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.support.v7.widget.SimpleItemAnimator: void onRemoveStarting(android.support.v7.widget.RecyclerView$ViewHolder)>
<android.widget.DropDownListView: boolean onForwardedEvent(android.view.MotionEvent,int)>
<android.support.v7.widget.SimpleItemAnimator: void setSupportsChangeAnimations(boolean)>
<java.util.TreeMap: java.util.TreeMap$TreeMapEntry getEntry(java.lang.Object)>
<java.util.GregorianCalendar: int getMinimum(int)>
<java.util.TreeMap: java.util.TreeMap$TreeMapEntry getEntryUsingComparator(java.lang.Object)>
<java.util.GregorianCalendar: int getMaximum(int)>
<android.widget.DropDownListView: void setListSelectionHidden(boolean)>
<java.util.TreeMap: java.util.TreeMap$TreeMapEntry getCeilingEntry(java.lang.Object)>
<java.util.GregorianCalendar: int getLeastMaximum(int)>
<java.util.GregorianCalendar: int getActualMinimum(int)>
<java.util.GregorianCalendar: int getActualMaximum(int)>
<java.util.TreeMap: java.util.TreeMap$TreeMapEntry getHigherEntry(java.lang.Object)>
<android.support.design.widget.CollapsingTextHelper: void draw(android.graphics.Canvas)>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.content.ClipData: void prepareToLeaveProcess(boolean)>
<com.google.protobuf.CodedInputStream: void popLimit(int)>
<android.content.ClipData: void toShortString(java.lang.StringBuilder)>
<android.content.ClipData: void toShortStringShortItems(java.lang.StringBuilder,boolean)>
<android.support.design.widget.CollapsingTextHelper: void setCollapsedBounds(int,int,int,int)>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<android.support.design.widget.CollapsingTextHelper: void setCollapsedTextAppearance(int)>
<android.support.design.widget.CollapsingTextHelper: void setCollapsedTextColor(android.content.res.ColorStateList)>
<android.support.design.widget.CollapsingTextHelper: void setCollapsedTextGravity(int)>
<android.support.design.widget.CollapsingTextHelper: void setCollapsedTypeface(android.graphics.Typeface)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedBounds(int,int,int,int)>
<android.app.FragmentManagerImpl: void popBackStack(int,int)>
<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedTextAppearance(int)>
<android.icu.text.DecimalFormat: void setRoundingIncrement(android.icu.math.BigDecimal)>
<java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>
<android.icu.text.DecimalFormat: void setRoundingIncrement(double)>
<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>
<android.widget.Editor$SuggestionsPopupWindow: int getVerticalLocalPosition(int)>
<android.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>
<java.util.TreeMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>
<android.widget.Editor$SuggestionsPopupWindow: int clipVertically(int)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedTextColor(android.content.res.ColorStateList)>
<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedTextGravity(int)>
<java.util.TreeMap: java.util.SortedMap tailMap(java.lang.Object)>
<android.app.FragmentManagerImpl: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedTextSize(float)>
<java.util.GregorianCalendar: void setWeekDate(int,int,int)>
<android.support.design.widget.CollapsingTextHelper: void setExpandedTypeface(android.graphics.Typeface)>
<android.support.design.widget.CollapsingTextHelper: void setExpansionFraction(float)>
<android.support.design.widget.CollapsingTextHelper: void setPositionInterpolator(android.view.animation.Interpolator)>
<android.support.design.widget.CollapsingTextHelper: boolean setState(int[])>
<android.support.design.widget.CollapsingTextHelper: void setText(java.lang.CharSequence)>
<android.support.design.widget.CollapsingTextHelper: void setTextSizeInterpolator(android.view.animation.Interpolator)>
<android.support.design.widget.CollapsingTextHelper: void setTypefaces(android.graphics.Typeface)>
<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.icu.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<android.icu.text.DecimalFormat: boolean equals(java.lang.Object)>
<com.android.internal.policy.PhoneWindow: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.support.v4.content.ModernAsyncTask: boolean cancel(boolean)>
<org.thoughtcrime.securesms.MessageDetailsActivity$MessageRecipientAsyncTask: java.util.List doInBackground(java.lang.Void[])>
<com.android.internal.policy.PhoneWindow: void setVolumeControlStream(int)>
<android.support.v4.content.ModernAsyncTask: android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>
<android.support.v4.content.ModernAsyncTask: void finish(java.lang.Object)>
<android.support.v4.content.ModernAsyncTask: void onProgressUpdate(java.lang.Object[])>
<android.support.v4.content.ModernAsyncTask: java.lang.Object postResult(java.lang.Object)>
<android.support.v4.content.ModernAsyncTask: void postResultIfNotInvoked(java.lang.Object)>
<org.thoughtcrime.securesms.MessageDetailsActivity$MessageRecipientAsyncTask: void onPostExecute(java.util.List)>
<android.app.FragmentManagerImpl: android.animation.Animator loadAnimator(android.app.Fragment,int,boolean,int)>
<android.app.FragmentManagerImpl: void performPendingDeferredStart(android.app.Fragment)>
<android.app.FragmentManagerImpl: boolean isStateAtLeast(int)>
<com.android.internal.policy.PhoneWindow: void setDefaultWindowFormat(int)>
<android.app.FragmentManagerImpl: void moveToState(android.app.Fragment,int,int,int,boolean)>
<org.thoughtcrime.securesms.components.AvatarImageView: void lambda$setAvatarClickHandler$0$AvatarImageView(org.thoughtcrime.securesms.recipients.Recipient,android.view.View)>
<java.util.TreeMap: void addAllForTreeSet(java.util.SortedSet,java.lang.Object)>
<org.thoughtcrime.securesms.components.AvatarImageView: void setAvatar(org.thoughtcrime.securesms.mms.GlideRequests,org.thoughtcrime.securesms.recipients.Recipient,boolean)>
<com.android.internal.policy.PhoneWindow: void setAttributes(android.view.WindowManager$LayoutParams)>
<android.support.v7.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.view.menu.ActionMenuItemView: void setItemInvoker(android.support.v7.view.menu.MenuBuilder$ItemInvoker)>
<android.support.v7.view.menu.ActionMenuItemView: void setPopupCallback(android.support.v7.view.menu.ActionMenuItemView$PopupCallback)>
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<android.support.v7.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)>
<android.icu.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<android.icu.text.DecimalFormat: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object,android.icu.text.DecimalFormat$Unit)>
<com.google.protobuf.Descriptors$DescriptorPool: void addEnumValueByNumber(com.google.protobuf.Descriptors$EnumValueDescriptor)>
<android.widget.ListView$ArrowScrollFocusResult: void populate(int,int)>
<android.support.v4.app.FragmentTabHost$SavedState$1: android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel)>
<android.support.v4.app.FragmentTabHost$SavedState$1: android.support.v4.app.FragmentTabHost$SavedState[] newArray(int)>
<android.app.FragmentManagerImpl: void moveToState(android.app.Fragment)>
<android.app.FragmentManagerImpl: void moveToState(int,boolean)>
<android.app.FragmentManagerImpl: void moveToState(int,int,int,boolean)>
<com.doomonafireball.betterpickers.timepicker.TimePicker$SavedState$1: com.doomonafireball.betterpickers.timepicker.TimePicker$SavedState createFromParcel(android.os.Parcel)>
<com.doomonafireball.betterpickers.timepicker.TimePicker$SavedState$1: com.doomonafireball.betterpickers.timepicker.TimePicker$SavedState[] newArray(int)>
<android.app.FragmentManagerImpl: void makeActive(android.app.Fragment)>
<com.google.protobuf.Descriptors$DescriptorPool: com.google.protobuf.Descriptors$GenericDescriptor findSymbol(java.lang.String)>
<com.google.protobuf.Descriptors$DescriptorPool: com.google.protobuf.Descriptors$GenericDescriptor findSymbol(java.lang.String,com.google.protobuf.Descriptors$DescriptorPool$SearchFilter)>
<android.app.FragmentManagerImpl: void makeInactive(android.app.Fragment)>
<android.app.FragmentManagerImpl: void addFragment(android.app.Fragment,boolean)>
<android.icu.text.DigitList: void append(int)>
<android.icu.text.DigitList: byte getDigitValue(int)>
<android.app.FragmentManagerImpl: void removeFragment(android.app.Fragment,int,int)>
<com.google.protobuf.Descriptors$DescriptorPool: boolean isAggregate(com.google.protobuf.Descriptors$GenericDescriptor)>
<com.google.protobuf.Descriptors$DescriptorPool: boolean isType(com.google.protobuf.Descriptors$GenericDescriptor)>
<android.icu.text.DigitList: java.math.BigInteger getBigInteger(boolean)>
<android.app.FragmentManagerImpl: void hideFragment(android.app.Fragment,int,int)>
<android.app.FragmentManagerImpl: void showFragment(android.app.Fragment,int,int)>
<android.app.FragmentManagerImpl: void detachFragment(android.app.Fragment,int,int)>
<android.icu.text.DigitList: android.icu.math.BigDecimal getBigDecimalICU(boolean)>
<android.icu.text.DecimalFormat: void applyPattern(java.lang.String)>
<android.app.FragmentManagerImpl: void attachFragment(android.app.Fragment,int,int)>
<android.icu.text.DigitList: void set(double,int,boolean)>
<android.app.FragmentManagerImpl: android.app.Fragment findFragmentByTag(java.lang.String)>
<android.support.design.widget.TabLayout$AdapterChangeListener: void onAdapterChanged(android.support.v4.view.ViewPager,android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter)>
<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>
<android.support.design.widget.TabLayout$AdapterChangeListener: void setAutoRefresh(boolean)>
<java.text.CalendarBuilder: java.text.CalendarBuilder addYear(int)>
<java.text.CalendarBuilder: boolean isSet(int)>
<android.app.FragmentManagerImpl: void enqueueAction(java.lang.Runnable,boolean)>
<java.text.CalendarBuilder: java.text.CalendarBuilder clear(int)>
<android.icu.text.DigitList: void round(int)>
<java.text.CalendarBuilder: java.util.Calendar establish(java.util.Calendar)>
<android.app.FragmentManagerImpl: int allocBackStackIndex(android.app.BackStackRecord)>
<org.thoughtcrime.securesms.components.emoji.EmojiToggle: void attach(org.thoughtcrime.securesms.components.emoji.EmojiDrawer)>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,float[])>
<android.icu.text.DigitList: void set(long)>
<android.icu.text.DigitList: void set(long,int)>
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>
<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.StaticLayout$Builder)>
<android.icu.text.DigitList: void set(java.math.BigInteger,int)>
<sun.security.util.SignatureFileVerifier: boolean needSignatureFile(java.lang.String)>
<sun.security.util.SignatureFileVerifier: void setSignatureFile(byte[])>
<android.app.FragmentManagerImpl: void freeBackStackIndex(int)>
<android.icu.text.DigitList: void set(java.math.BigDecimal,int,boolean)>
<android.icu.text.DigitList: void set(android.icu.math.BigDecimal,int,boolean)>
<com.takisoft.colorpicker.ColorPickerPaletteFlex: void onColorSelected(int)>
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)>
<android.app.FragmentManagerImpl: void addBackStackState(android.app.BackStackRecord)>
<android.app.FragmentManagerImpl: boolean popBackStackState(android.os.Handler,java.lang.String,int,int)>
<com.google.android.gms.maps.zza: com.google.android.gms.maps.GoogleMapOptions zzol(android.os.Parcel)>
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)>
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)>
<android.support.v4.widget.DrawerLayout$SavedState$1: android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel)>
<android.support.v4.widget.DrawerLayout$SavedState$1: android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.v4.widget.DrawerLayout$SavedState$1: android.support.v4.widget.DrawerLayout$SavedState[] newArray(int)>
<android.text.MeasuredText: int breakText(int,boolean,float)>
<android.text.MeasuredText: float measure(int,int)>
<android.app.FragmentManagerImpl: void saveFragmentViewState(android.app.Fragment)>
<android.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(android.app.Fragment)>
<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>
<com.google.android.gms.maps.zza: com.google.android.gms.maps.GoogleMapOptions[] zzvq(int)>
<android.icu.impl.UResource$Key: android.icu.impl.UResource$Key setBytes(byte[],int)>
<android.icu.impl.UResource$Key: android.icu.impl.UResource$Key setString(java.lang.String)>
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>
<android.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<android.icu.text.DecimalFormat: void setMinimumSignificantDigits(int)>
<android.icu.text.DecimalFormat: void setMaximumSignificantDigits(int)>
<com.annimon.stream.Collectors$38: java.lang.Object apply(java.lang.Object)>
<android.icu.text.DecimalFormat: void setSignificantDigitsUsed(boolean)>
<android.icu.text.DecimalFormat: void setCurrency(android.icu.util.Currency)>
<android.animation.Animator: void appendChangingConfigurations(int)>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void setHideRequested(boolean)>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void setMoving(boolean)>
<java.util.AbstractList: java.util.List subList(int,int)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void setOutOfBounds(boolean)>
<android.icu.text.DecimalFormat: void setCurrencyUsage(android.icu.util.Currency$CurrencyUsage)>
<android.icu.text.DecimalFormat: void setMaximumFractionDigits(int)>
<java.util.AbstractList: void removeRange(int,int)>
<android.icu.text.DecimalFormat: void setMinimumFractionDigits(int)>
<android.icu.impl.UResource$Key: boolean contentEquals(java.lang.CharSequence)>
<com.fasterxml.jackson.annotation.ObjectIdGenerator: boolean isValidReferencePropertyName(java.lang.String,java.lang.Object)>
<android.widget.Editor$EditOperation: void forceMergeWith(android.widget.Editor$EditOperation)>
<android.icu.impl.UResource$Key: boolean endsWith(java.lang.CharSequence)>
<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$TreeBin: boolean removeTreeNode(java.util.concurrent.ConcurrentHashMap$TreeNode)>
<android.app.FragmentManagerImpl: void attachController(android.app.FragmentHostCallback,android.app.FragmentContainer,android.app.Fragment)>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeName(int)>
<com.android.mms.service_alt.MmsConfigManager: com.android.mms.service_alt.MmsConfig getMmsConfigBySubId(int)>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(int)>
<com.android.mms.service_alt.MmsConfigManager: void init(android.content.Context)>
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void setOnContactSelectedListener(org.thoughtcrime.securesms.ContactSelectionListFragment$OnContactSelectedListener)>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener)>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void setQueryFilter(java.lang.String)>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void setRefreshing(boolean)>
<android.content.res.XmlBlock$Parser: java.lang.CharSequence getPooledString(int)>
<android.icu.text.PluralRanges$Matrix: void setIfNew(android.icu.impl.StandardPlural,android.icu.impl.StandardPlural,android.icu.impl.StandardPlural)>
<org.thoughtcrime.securesms.ShareFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)>
<android.icu.text.PluralRanges$Matrix: android.icu.impl.StandardPlural get(android.icu.impl.StandardPlural,android.icu.impl.StandardPlural)>
<android.support.v7.widget.GridLayout$Interval: boolean equals(java.lang.Object)>
<android.icu.text.PluralRanges$Matrix: boolean equals(java.lang.Object)>
<android.icu.text.PluralRanges$Matrix: int compareTo(android.icu.text.PluralRanges$Matrix)>
<android.widget.Editor$SelectionModifierCursorController: void enterDrag(int)>
<android.widget.Editor$SelectionModifierCursorController: void onTouchEvent(android.view.MotionEvent)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter: void addImages(java.util.List)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter: void onBindViewHolder(org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder,int)>
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter: void onViewRecycled(org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter: void setImages(java.util.List)>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter: void setListener(org.thoughtcrime.securesms.giph.ui.GiphyAdapter$OnItemClickListener)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void blockingSendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])>
<org.webrtc.CameraCapturer$2: void onByteBufferFrameCaptured(org.webrtc.CameraSession,byte[],int,int,int,long)>
<org.webrtc.CameraCapturer$2: void onCameraClosed(org.webrtc.CameraSession)>
<org.webrtc.CameraCapturer$2: void onCameraDisconnected(org.webrtc.CameraSession)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void onContinueLoadingRequested(com.google.android.exoplayer2.source.MediaPeriod)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void onContinueLoadingRequested(com.google.android.exoplayer2.source.SequenceableLoader)>
<org.webrtc.CameraCapturer$2: void onCameraError(org.webrtc.CameraSession,java.lang.String)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void onSourceInfoRefreshed(com.google.android.exoplayer2.Timeline,java.lang.Object)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void prepare(com.google.android.exoplayer2.source.MediaSource,boolean)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void seekTo(com.google.android.exoplayer2.Timeline,int,long)>
<org.webrtc.CameraCapturer$2: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void sendMessages(com.google.android.exoplayer2.ExoPlayer$ExoPlayerMessage[])>
<com.google.android.exoplayer2.ExoPlayerImplInternal: void setPlayWhenReady(boolean)>
<org.webrtc.CameraCapturer$2: void onTextureFrameCaptured(org.webrtc.CameraSession,int,int,int,float[],int,long)>
<android.support.v7.widget.RecyclerView$State: void assertLayoutStep(int)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: void appendReferring(com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring)>
<android.support.v7.widget.RecyclerView$State: void prepareForNestedPrefetch(android.support.v7.widget.RecyclerView$Adapter)>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: void setResolver(com.fasterxml.jackson.annotation.ObjectIdResolver)>
<android.graphics.drawable.DrawableContainer$BlockInvalidateCallback: android.graphics.drawable.DrawableContainer$BlockInvalidateCallback wrap(android.graphics.drawable.Drawable$Callback)>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: java.lang.String getDependency(int)>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: com.google.protobuf.DescriptorProtos$EnumDescriptorProto getEnumType(int)>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: com.google.protobuf.DescriptorProtos$FieldDescriptorProto getExtension(int)>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: com.google.protobuf.DescriptorProtos$DescriptorProto getMessageType(int)>
<android.icu.impl.UPropertyAliases: java.lang.String getPropertyValueName(int,int,int)>
<android.icu.impl.UPropertyAliases: int getPropertyEnum(java.lang.CharSequence)>
<android.icu.impl.UPropertyAliases: int getPropertyValueEnum(int,java.lang.CharSequence)>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getPublicDependency(int)>
<android.icu.impl.UPropertyAliases: int getPropertyValueEnumNoThrow(int,java.lang.CharSequence)>
<android.icu.text.DateTimePatternGenerator$DistanceInfo: void setTo(android.icu.text.DateTimePatternGenerator$DistanceInfo)>
<android.icu.text.DateTimePatternGenerator$DistanceInfo: void addMissing(int)>
<android.icu.text.DateTimePatternGenerator$DistanceInfo: void addExtra(int)>
<org.thoughtcrime.securesms.TransportOptionsPopup: void display(java.util.List)>
<org.thoughtcrime.securesms.preferences.NotificationsPreferenceFragment$NotificationPrivacyListener$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: com.google.protobuf.DescriptorProtos$ServiceDescriptorProto getService(int)>
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>
<com.google.android.exoplayer2.upstream.DataSpec: boolean isFlagSet(int)>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: void add(org.whispersystems.libsignal.util.guava.Optional)>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: java.util.List getUntrustedRecipients(android.content.Context)>
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int tryAcquireShared(int)>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: java.util.List getUnverifiedRecipients(android.content.Context)>
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int fullTryAcquireShared(java.lang.Thread)>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: void replaceWith(org.thoughtcrime.securesms.database.identity.IdentityRecordList)>
<javax.crypto.Cipher: int getOutputSize(int)>
<sun.util.locale.LocaleExtensions: sun.util.locale.Extension getExtension(java.lang.Character)>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<javax.crypto.Cipher: byte[] update(byte[],int,int)>
<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider,int[])>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.arch.core.internal.SafeIterableMap$DescendingIterator: android.arch.core.internal.SafeIterableMap$Entry forward(android.arch.core.internal.SafeIterableMap$Entry)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setText(java.lang.CharSequence,int,int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setPaint(android.text.TextPaint)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setWidth(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setAlignment(android.text.Layout$Alignment)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setLineSpacing(float,float)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setIncludePad(boolean)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setEllipsizedWidth(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setMaxLines(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setBreakStrategy(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setHyphenationFrequency(int)>
<android.text.StaticLayout$Builder: float addStyleRun(android.text.TextPaint,int,int,boolean)>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>
<android.support.design.widget.BaseTransientBottomBar: void dispatchDismiss(int)>
<android.text.StaticLayout$Builder: void addMeasuredRun(int,int,float[])>
<android.text.StaticLayout$Builder: void addReplacementRun(int,int,float)>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>
<android.support.design.widget.BaseTransientBottomBar: void hideView(int)>
<android.view.View$CheckForLongPress: void setAnchor(float,float)>
<android.support.design.widget.BaseTransientBottomBar: void onViewHidden(int)>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)>
<com.fasterxml.jackson.core.json.JsonReadContext: void reset(int,int,int)>
<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentValue(java.lang.Object)>
<android.support.design.widget.BaseTransientBottomBar: android.support.design.widget.BaseTransientBottomBar setDuration(int)>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(com.fasterxml.jackson.core.json.DupDetector)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: void handleMissingId(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: java.lang.String idFromValue(java.lang.Object)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>
<android.icu.util.Currency$1: android.icu.util.Currency createInstance(java.lang.String,java.lang.Void)>
<android.icu.util.Currency$EquivalenceRelation: android.icu.util.Currency$EquivalenceRelation add(java.lang.Object[])>
<android.icu.util.Currency$EquivalenceRelation: java.util.Set get(java.lang.Object)>
<java.util.TreeSet: boolean remove(java.lang.Object)>
<java.util.TreeSet: boolean addAll(java.util.Collection)>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: void draw(android.graphics.Canvas)>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: void setAlpha(float)>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: void setState(int[])>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: void setX(float)>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: void setY(float)>
<java.lang.ProcessEnvironment$Variable: int compareTo(java.lang.ProcessEnvironment$Variable)>
<android.widget.FrameLayout: void layoutChildren(int,int,int,int,boolean)>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
<org.thoughtcrime.securesms.notifications.MessageNotifier$ReminderReceiver$1: java.lang.Void doInBackground(java.lang.Void[])>
<java.security.KeyPairGenerator$Delegate: void initialize(int,java.security.SecureRandom)>
<org.thoughtcrime.securesms.MessageRecipientListItem: void lambda$onModified$2$MessageRecipientListItem(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.MessageRecipientListItem: void lambda$setIssueIndicators$0$MessageRecipientListItem(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.database.model.MessageRecord,org.thoughtcrime.securesms.database.documents.IdentityKeyMismatch,android.view.View)>
<org.thoughtcrime.securesms.MessageRecipientListItem: void lambda$setIssueIndicators$1$MessageRecipientListItem(org.thoughtcrime.securesms.crypto.MasterSecret,org.thoughtcrime.securesms.database.model.MessageRecord,org.thoughtcrime.securesms.database.documents.NetworkFailure,android.view.View)>
<android.support.v4.view.ViewPager$1: int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo)>
<org.thoughtcrime.securesms.database.MmsDatabase: boolean delete(long)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>
<org.thoughtcrime.securesms.database.MmsDatabase: void deleteMessagesInThreadBeforeDate(long,long)>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<org.thoughtcrime.securesms.database.MmsDatabase: void deleteThreads(java.util.Set)>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<android.graphics.Camera: void rotateX(float)>
<android.graphics.Camera: void rotateY(float)>
<android.graphics.Camera: void rotateZ(float)>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<org.thoughtcrime.securesms.database.MmsDatabase: org.thoughtcrime.securesms.database.MmsDatabase$Reader getExpireStartedMessages(org.thoughtcrime.securesms.crypto.MasterSecret)>
<org.thoughtcrime.securesms.ReadReceiptsIntroFragment: void lambda$onCreateView$0$ReadReceiptsIntroFragment(android.widget.CompoundButton,boolean)>
<org.thoughtcrime.securesms.database.MmsDatabase: android.database.Cursor getMessage(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: int getMessageCountForThread(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: long getThreadIdForMessage(long)>
<com.google.android.exoplayer2.trackselection.TrackSelectorResult: boolean isEquivalent(com.google.android.exoplayer2.trackselection.TrackSelectorResult)>
<com.google.android.exoplayer2.trackselection.TrackSelectorResult: boolean isEquivalent(com.google.android.exoplayer2.trackselection.TrackSelectorResult,int)>
<dagger.internal.BindingsGroup: dagger.internal.Binding put(java.lang.String,dagger.internal.Binding)>
<org.thoughtcrime.securesms.service.WebRtcCallService$3: void onSuccessContinue(java.util.List)>
<org.webrtc.MediaStream: boolean addTrack(org.webrtc.AudioTrack)>
<org.webrtc.MediaStream: boolean addTrack(org.webrtc.VideoTrack)>
<android.view.AccessibilityIterators$AbstractTextSegmentIterator: void initialize(java.lang.String)>
<org.webrtc.MediaStream: boolean removeTrack(org.webrtc.AudioTrack)>
<android.icu.impl.ICUResourceBundleImpl: android.icu.impl.ICUResourceBundle createBundleObject(java.lang.String,int,java.util.HashMap,android.icu.util.UResourceBundle)>
<org.webrtc.MediaStream: boolean removeTrack(org.webrtc.VideoTrack)>
<com.astuetz.PagerSlidingTabStrip: void setTextColor(int)>
<com.astuetz.PagerSlidingTabStrip: void setTextColor(android.content.res.ColorStateList)>
<sun.security.util.ManifestEntryVerifier: void update(byte)>
<sun.security.util.ManifestEntryVerifier: void update(byte[],int,int)>
<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>
<sun.nio.ch.FileDispatcherImpl: java.io.FileDescriptor duplicateForMapping(java.io.FileDescriptor)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isCreatorVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isCreatorVisible(java.lang.reflect.Member)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isFieldVisible(java.lang.reflect.Field)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isGetterVisible(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(java.lang.reflect.Method)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std: boolean isSetterVisible(java.lang.reflect.Method)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsForcedSms(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsInsecure(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsNotified(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsOutbox(long)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsSent(long,boolean)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markAsSentFailed(long)>
<java.util.concurrent.atomic.AtomicInteger: void set(int)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markExpireStarted(long)>
<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>
<org.thoughtcrime.securesms.database.MmsDatabase: void markExpireStarted(long,long)>
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>
<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
<org.thoughtcrime.securesms.database.MmsDatabase: org.thoughtcrime.securesms.database.MmsDatabase$OutgoingMessageReader readerFor(org.thoughtcrime.securesms.mms.OutgoingMediaMessage,long)>
<org.thoughtcrime.securesms.database.MmsDatabase: org.thoughtcrime.securesms.database.MmsDatabase$Reader readerFor(org.thoughtcrime.securesms.crypto.MasterSecret,android.database.Cursor)>
<org.thoughtcrime.securesms.database.MmsDatabase: void removeFailure(long,org.thoughtcrime.securesms.database.documents.NetworkFailure)>
<org.thoughtcrime.securesms.database.MmsDatabase: java.util.List setMessagesRead(long)>
<com.google.android.exoplayer2.trackselection.MappingTrackSelector: void onSelectionActivated(java.lang.Object)>
<org.thoughtcrime.securesms.ConversationListFragment$3: org.whispersystems.libsignal.util.guava.Optional doInBackground(android.content.Context[])>
<org.whispersystems.libsignal.util.AndroidSignalProtocolLogger: void log(int,java.lang.String,java.lang.String)>
<org.thoughtcrime.securesms.ConversationListFragment$3: void onPostExecute(org.whispersystems.libsignal.util.guava.Optional)>
<com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class)>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart getName(int)>
<android.support.design.widget.NavigationView$SavedState$1: android.support.design.widget.NavigationView$SavedState createFromParcel(android.os.Parcel)>
<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.support.design.widget.NavigationView$SavedState$1: android.support.design.widget.NavigationView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.support.design.widget.NavigationView$SavedState$1: android.support.design.widget.NavigationView$SavedState[] newArray(int)>
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,int,android.os.CancellationSignal)>
<org.thoughtcrime.securesms.ConversationActivity$12$1: void onSuccess(java.lang.Boolean)>
<android.database.sqlite.SQLiteConnectionPool: void releaseConnection(android.database.sqlite.SQLiteConnection)>
<android.support.v7.widget.LinearLayoutManager: void collectPrefetchPositionsForLayoutState(android.support.v7.widget.RecyclerView$State,android.support.v7.widget.LinearLayoutManager$LayoutState,android.support.v7.widget.RecyclerView$LayoutManager$LayoutPrefetchRegistry)>
<android.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(android.widget.MenuItemHoverListener)>
<android.support.v7.widget.LinearLayoutManager: int convertFocusDirectionToLayoutDirection(int)>
<java.text.AttributedString$AttributedStringIterator: char setIndex(int)>
<android.support.v7.widget.LinearLayoutManager: int fill(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.LinearLayoutManager$LayoutState,android.support.v7.widget.RecyclerView$State,boolean)>
<java.text.AttributedString$AttributedStringIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void archiveConversation(long)>
<org.thoughtcrime.securesms.database.Address: int compareTo(org.thoughtcrime.securesms.database.Address)>
<java.text.AttributedString$AttributedStringIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void deleteConversations(java.util.Set)>
<org.thoughtcrime.securesms.database.ThreadDatabase: int getDistributionType(long)>
<android.support.v7.widget.LinearLayoutManager: android.view.View findOnePartiallyOrCompletelyInvisibleChild(int,int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: android.database.Cursor getFilteredConversationList(java.util.List)>
<android.support.v7.widget.LinearLayoutManager: android.view.View findOneVisibleChild(int,int,boolean,boolean)>
<android.support.v7.widget.LinearLayoutManager: android.view.View findReferenceChild(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,int,int,int)>
<com.annimon.stream.Collectors$7: void accept(java.util.Set,java.lang.Object)>
<java.text.AttributedString$AttributedStringIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>
<org.thoughtcrime.securesms.ConversationActivity$13$1: void onSuccess(java.lang.Boolean)>
<org.thoughtcrime.securesms.database.ThreadDatabase: org.whispersystems.libsignal.util.Pair getLastSeenAndHasSent(long)>
<android.support.v7.widget.LinearLayoutManager: int getExtraLayoutSpace(android.support.v7.widget.RecyclerView$State)>
<org.thoughtcrime.securesms.database.ThreadDatabase: org.thoughtcrime.securesms.recipients.Recipient getRecipientForThreadId(long)>
<android.support.v7.widget.LinearLayoutManager: void layoutChunk(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,android.support.v7.widget.LinearLayoutManager$LayoutState,android.support.v7.widget.LinearLayoutManager$LayoutChunkResult)>
<org.thoughtcrime.securesms.DeviceActivity: void onLink(android.net.Uri)>
<android.graphics.drawable.TransitionDrawable: void startTransition(int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: long getThreadIdFor(org.thoughtcrime.securesms.recipients.Recipient)>
<org.thoughtcrime.securesms.database.ThreadDatabase: long getThreadIdFor(org.thoughtcrime.securesms.recipients.Recipient,int)>
<com.bumptech.glide.load.model.MultiModelLoaderFactory: void append(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>
<org.thoughtcrime.securesms.database.ThreadDatabase: long getThreadIdIfExistsFor(org.thoughtcrime.securesms.recipients.Recipient)>
<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: void setDensity(int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: org.thoughtcrime.securesms.database.ThreadDatabase$Reader readerFor(android.database.Cursor,org.thoughtcrime.securesms.crypto.MasterCipher)>
<android.support.v7.widget.LinearLayoutManager: void onAnchorReady(android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State,android.support.v7.widget.LinearLayoutManager$AnchorInfo,int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void setDistributionType(long,int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void setHasSent(long,boolean)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void setLastSeen(long)>
<org.thoughtcrime.securesms.database.ThreadDatabase: java.util.List setRead(long,boolean)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void setUnread(long)>
<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void trimAllThreads(int,org.thoughtcrime.securesms.database.ThreadDatabase$ProgressListener)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void trimThread(long,int)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void unarchiveConversation(long)>
<org.thoughtcrime.securesms.database.ThreadDatabase: boolean update(long,boolean)>
<org.thoughtcrime.securesms.database.ThreadDatabase: void updateSnippet(long,java.lang.String,android.net.Uri,long,long,boolean)>
<android.support.v7.widget.LinearLayoutManager: void prepareForDrop(android.view.View,android.view.View,int,int)>
<android.support.v7.widget.LinearLayoutManager: int scrollBy(int,android.support.v7.widget.RecyclerView$Recycler,android.support.v7.widget.RecyclerView$State)>
<android.icu.impl.Trie2: java.util.Iterator iterator(android.icu.impl.Trie2$ValueMapper)>
<android.support.v7.widget.LinearLayoutManager: void scrollToPositionWithOffset(int,int)>
<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.JavaType _typeFromId(java.lang.String)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addBooleanCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean)>
<android.support.v7.widget.LinearLayoutManager: void setOrientation(int)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addDelegatingCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean,com.fasterxml.jackson.databind.deser.CreatorProperty[])>
<android.support.v7.widget.LinearLayoutManager: void setReverseLayout(boolean)>
<android.widget.Editor$PositionListener: void addSubscriber(android.widget.Editor$TextViewPositionListener,boolean)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addDoubleCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addIntCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean)>
<android.widget.Editor$PositionListener: void removeSubscriber(android.widget.Editor$TextViewPositionListener)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addLongCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addPropertyCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean,com.fasterxml.jackson.databind.deser.CreatorProperty[])>
<android.support.v4.graphics.TypefaceCompatBaseImpl$2: int getWeight(android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry)>
<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>
<android.support.v4.graphics.TypefaceCompatBaseImpl$2: boolean isItalic(android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry)>
<android.media.AudioTrack: int setStereoVolume(float,float)>
<android.media.AudioTrack: int setVolume(float)>
<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void addStringCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,boolean)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: com.fasterxml.jackson.databind.deser.ValueInstantiator constructValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig)>
<android.media.AudioTrack: int write(byte[],int,int)>
<android.media.AudioTrack: int write(byte[],int,int,int)>
<org.thoughtcrime.securesms.preferences.ListSummaryPreferenceFragment: void initializeListSummary(android.support.v7.preference.ListPreference)>
<org.thoughtcrime.securesms.components.MicrophoneRecorderView: void setListener(org.thoughtcrime.securesms.components.MicrophoneRecorderView$Listener)>
<org.whispersystems.jobqueue.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void setDefaultCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: void verifyNonDup(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,int,boolean)>
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<android.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.app.FragmentController: void restoreLoaderNonConfig(android.util.ArrayMap)>
<android.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>
<android.media.PlayerBase: void baseUpdateAudioAttributes(android.media.AudioAttributes)>
<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casItem(java.lang.Object,java.lang.Object)>
<android.media.PlayerBase: void baseSetVolume(float,float)>
<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>
<org.thoughtcrime.securesms.ApplicationContext$3: java.lang.Void doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.service.WebRtcCallService$2: void onSuccessContinue(java.util.List)>
<org.webrtc.EglBase14: void createPbufferSurface(int,int)>
<android.support.v7.widget.LinearLayoutCompat: void drawDividersHorizontal(android.graphics.Canvas)>
<org.thoughtcrime.securesms.database.IdentityDatabase: org.whispersystems.libsignal.util.guava.Optional getIdentity(org.thoughtcrime.securesms.database.Address)>
<com.fasterxml.jackson.databind.DeserializationConfig: void initialize(com.fasterxml.jackson.core.JsonParser)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.BeanDescription introspect(com.fasterxml.jackson.databind.JavaType)>
<org.thoughtcrime.securesms.preferences.AdvancedPreferenceFragment$PushMessagingClickListener$DisablePushMessagesTask: java.lang.Integer doInBackground(java.lang.Void[])>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.BeanDescription introspectForBuilder(com.fasterxml.jackson.databind.JavaType)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.BeanDescription introspectForCreation(com.fasterxml.jackson.databind.JavaType)>
<android.support.v7.widget.LinearLayoutCompat: void drawDividersVertical(android.graphics.Canvas)>
<org.thoughtcrime.securesms.database.IdentityDatabase: void saveIdentity(org.thoughtcrime.securesms.database.Address,org.whispersystems.libsignal.IdentityKey,org.thoughtcrime.securesms.database.IdentityDatabase$VerifiedStatus,boolean,long,boolean)>
<org.thoughtcrime.securesms.preferences.AdvancedPreferenceFragment$PushMessagingClickListener$DisablePushMessagesTask: void onPostExecute(java.lang.Integer)>
<com.fasterxml.jackson.databind.DeserializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>
<android.support.v7.widget.LinearLayoutCompat: void drawHorizontalDivider(android.graphics.Canvas,int)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setEnabled(boolean)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig 'with'(com.fasterxml.jackson.databind.DeserializationFeature)>
<org.thoughtcrime.securesms.database.IdentityDatabase: void setApproval(org.thoughtcrime.securesms.database.Address,boolean)>
<android.support.v7.widget.LinearLayoutCompat: void drawVerticalDivider(android.graphics.Canvas,int)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setMaximumVelocity(float,float)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setMinimumVelocity(float,float)>
<org.thoughtcrime.securesms.database.IdentityDatabase: void setVerified(org.thoughtcrime.securesms.database.Address,org.whispersystems.libsignal.IdentityKey,org.thoughtcrime.securesms.database.IdentityDatabase$VerifiedStatus)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setRelativeVelocity(float,float)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setEdgeType(int)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setRelativeEdges(float,float)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setMaximumEdges(float,float)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setActivationDelay(int)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setRampUpDuration(int)>
<com.android.internal.widget.AutoScrollHelper: com.android.internal.widget.AutoScrollHelper setRampDownDuration(int)>
<com.android.internal.widget.AutoScrollHelper: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.support.v7.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>
<android.support.v7.widget.LinearLayoutCompat: int getLocationOffset(android.view.View)>
<android.support.v7.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>
<android.support.v7.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>
<android.icu.text.TimeZoneNames$Cache: android.icu.text.TimeZoneNames createInstance(java.lang.String,android.icu.util.ULocale)>
<android.support.v7.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig 'with'(com.fasterxml.jackson.databind.MapperFeature[])>
<android.support.v7.widget.LinearLayoutCompat: void layoutHorizontal(int,int,int,int)>
<android.support.v7.widget.LinearLayoutCompat: void layoutVertical(int,int,int,int)>
<android.animation.AnimationHandler: void addAnimationFrameCallback(android.animation.AnimationHandler$AnimationFrameCallback,long)>
<android.support.v7.widget.LinearLayoutCompat: void measureChildBeforeLayout(android.view.View,int,int,int,int,int)>
<android.animation.AnimationHandler: void addOneShotCommitCallback(android.animation.AnimationHandler$AnimationFrameCallback)>
<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>
<sun.security.x509.X509CRLEntryImpl: void setCertificateIssuer(javax.security.auth.x500.X500Principal,javax.security.auth.x500.X500Principal)>
<android.support.v7.widget.LinearLayoutCompat: void measureHorizontal(int,int)>
<android.animation.AnimationHandler: void removeCallback(android.animation.AnimationHandler$AnimationFrameCallback)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.databind.DeserializationFeature)>
<android.animation.AnimationHandler: void autoCancelBasedOn(android.animation.ObjectAnimator)>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.DeserializationConfig without(com.fasterxml.jackson.databind.MapperFeature[])>
<android.app.ContextImpl: void setOuterContext(android.content.Context)>
<sun.security.x509.X509CRLEntryImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int _getterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int _setterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addAll(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addCtor(com.fasterxml.jackson.databind.introspect.AnnotatedParameter,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addField(com.fasterxml.jackson.databind.introspect.AnnotatedField,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setCarrierSpecific(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setCountryCode(int)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setEmergency(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setFixedLine(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setGeneralDesc(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setId(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setInternationalPrefix(java.lang.String)>
<com.dd.CircularAnimatedDrawable$2: java.lang.Float get(com.dd.CircularAnimatedDrawable)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingDigits(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingZeroPossible(boolean)>
<com.dd.CircularAnimatedDrawable$2: void set(com.dd.CircularAnimatedDrawable,java.lang.Float)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMainCountryForCode(boolean)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void addSetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod,com.fasterxml.jackson.databind.PropertyName,boolean,boolean,boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMobile(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMobileNumberPortableRegion(boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefix(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixForParsing(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixTransformRule(java.lang.String)>
<org.thoughtcrime.securesms.RecipientPreferenceActivity$RecipientPreferenceFragment$BlockClickedListener$3: java.lang.Void doInBackground(java.lang.Void[])>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNoInternationalDialling(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPager(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPersonalNumber(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredExtnPrefix(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredInternationalPrefix(java.lang.String)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPremiumRate(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSameMobileAndFixedLinePattern(boolean)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSharedCost(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: int compareTo(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setShortCode(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSmsServices(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setStandardRate(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setTollFree(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setUan(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setVoicemail(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Collection explode(java.util.Collection)>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata setVoip(com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Object fromMemberAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember)>
<android.support.v7.widget.LinearLayoutCompat: int measureNullChild(int)>
<android.support.v7.widget.LinearLayoutCompat: void measureVertical(int,int)>
<com.google.android.exoplayer2.decoder.Buffer: boolean getFlag(int)>
<android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData: void set(android.widget.RemoteViews,long)>
<org.thoughtcrime.securesms.webrtc.audio.OutgoingRinger: void start(org.thoughtcrime.securesms.webrtc.audio.OutgoingRinger$Type)>
<java.net.SocketImpl: void setSocket(java.net.Socket)>
<java.net.SocketImpl: void setServerSocket(java.net.ServerSocket)>
<android.icu.impl.CaseMap$StringContextIterator: void setLimit(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void mergeAnnotations(boolean)>
<android.view.TextureView: void setLayerPaint(android.graphics.Paint)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void removeNonVisible(boolean)>
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>
<android.support.v7.widget.LinearLayoutCompat: void setBaselineAligned(boolean)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.SurfaceView: void updateWindow(boolean,boolean)>
<android.support.v7.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder withName(com.fasterxml.jackson.databind.PropertyName)>
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(android.view.View)>
<android.support.v7.widget.LinearLayoutCompat: void setGravity(int)>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder withSimpleName(java.lang.String)>
<android.support.v7.widget.LinearLayoutCompat: void setOrientation(int)>
<android.app.Dialog: void dispatchOnCreate(android.os.Bundle)>
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: android.view.View findViewById(int)>
<android.app.Dialog: void setContentView(int)>
<android.app.Dialog: void setTitle(int)>
<com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer: com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer withDeserializer(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer)>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.graphics.YuvImage: boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)>
<com.astuetz.PagerSlidingTabStrip$SavedState$1: com.astuetz.PagerSlidingTabStrip$SavedState createFromParcel(android.os.Parcel)>
<com.astuetz.PagerSlidingTabStrip$SavedState$1: com.astuetz.PagerSlidingTabStrip$SavedState[] newArray(int)>
<android.graphics.YuvImage: int[] calculateOffsets(int,int)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<org.thoughtcrime.securesms.crypto.storage.TextSecureIdentityKeyStore: boolean saveIdentity(org.whispersystems.libsignal.SignalProtocolAddress,org.whispersystems.libsignal.IdentityKey,boolean)>
<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.Dialog: boolean takeCancelAndDismissListeners(java.lang.String,android.content.DialogInterface$OnCancelListener,android.content.DialogInterface$OnDismissListener)>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.icu.text.Normalizer2: java.lang.String normalize(java.lang.CharSequence)>
<dalvik.system.DexFile: java.lang.Class loadClassBinaryName(java.lang.String,java.lang.ClassLoader,java.util.List)>
<android.support.v7.widget.ChildHelper$Bucket: void clear(int)>
<android.support.v7.widget.ChildHelper$Bucket: int countOnesBefore(int)>
<android.support.v7.widget.ChildHelper$Bucket: boolean get(int)>
<android.support.v7.widget.ChildHelper$Bucket: void insert(int,boolean)>
<android.support.v7.widget.ChildHelper$Bucket: boolean remove(int)>
<android.support.v7.widget.ChildHelper$Bucket: void set(int)>
<org.whispersystems.jobqueue.JobQueue: void add(org.whispersystems.jobqueue.Job)>
<org.whispersystems.jobqueue.JobQueue: void addAll(java.util.List)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback$1: void executeAction(java.lang.Long)>
<org.thoughtcrime.securesms.ConversationListFragment$ArchiveListenerCallback$1: void reverseAction(java.lang.Long)>
<java.util.UUID: int compareTo(java.util.UUID)>
<com.google.android.exoplayer2.ui.PlaybackControlView$1: boolean dispatchSeek(com.google.android.exoplayer2.ExoPlayer,int,long)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder setIdentityKeyPrivate(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder setIdentityKeyPublic(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder setNumber(java.lang.String)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder setProfileKey(com.google.protobuf.ByteString)>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder setProvisioningCode(java.lang.String)>
<org.thoughtcrime.securesms.ConversationListFragment$5$1: java.lang.Void doInBackground(java.lang.Void[])>
<org.thoughtcrime.securesms.ConversationListFragment$5$1: void onPostExecute(java.lang.Void)>
<org.thoughtcrime.securesms.components.HourglassView: void setPercentage(float)>
<android.media.WebVttTrack: void onCueParsed(android.media.TextTrackCue)>
<android.media.WebVttTrack: void onRegionParsed(android.media.TextTrackRegion)>
<com.google.protobuf.FieldSet: void addRepeatedField(com.google.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object)>
<com.google.protobuf.FieldSet: java.lang.Object getField(com.google.protobuf.FieldSet$FieldDescriptorLite)>
<com.google.protobuf.FieldSet: boolean hasField(com.google.protobuf.FieldSet$FieldDescriptorLite)>
<com.google.protobuf.FieldSet: void mergeFrom(com.google.protobuf.FieldSet)>
<com.google.protobuf.FieldSet: void setField(com.google.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object)>
<android.widget.Switch$1: java.lang.Float get(android.widget.Switch)>
<android.widget.Switch$1: void setValue(android.widget.Switch,float)>
<java.sql.Timestamp: boolean equals(java.sql.Timestamp)>
<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String has(char[],int,int)>
<java.sql.Timestamp: int compareTo(java.util.Date)>
<android.support.v7.widget.OpReorderer: void reorderOps(java.util.List)>
<android.support.v7.widget.OpReorderer: void swapMoveRemove(java.util.List,int,android.support.v7.widget.AdapterHelper$UpdateOp,int,android.support.v7.widget.AdapterHelper$UpdateOp)>
<android.support.v7.widget.OpReorderer: void swapMoveUpdate(java.util.List,int,android.support.v7.widget.AdapterHelper$UpdateOp,int,android.support.v7.widget.AdapterHelper$UpdateOp)>
<java.util.zip.ZStreamRef: long address()>
<java.util.zip.ZStreamRef: void clear()>
<android.icu.util.Currency$CurrencyStringInfo: java.lang.String getISOCode()>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void initializeAudioForCall()>
<android.media.Cea708CCWidget$CCWindowLayout: int getCaptionWindowId()>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void silenceIncomingRinger()>
<android.media.Cea708CCWidget$CCWindowLayout: void clear()>
<android.media.Cea708CCWidget$CCWindowLayout: void show()>
<android.media.Cea708CCWidget$CCWindowLayout: void hide()>
<org.thoughtcrime.securesms.TransportOption: int getBackgroundColor()>
<org.thoughtcrime.securesms.webrtc.audio.SignalAudioManager: void startIncomingRinger()>
<org.thoughtcrime.securesms.TransportOption: java.lang.String getComposeHint()>
<org.thoughtcrime.securesms.TransportOption: java.lang.String getDescription()>
<org.thoughtcrime.securesms.TransportOption: int getDrawable()>
<org.thoughtcrime.securesms.TransportOption: org.whispersystems.libsignal.util.guava.Optional getSimName()>
<org.thoughtcrime.securesms.TransportOption: org.whispersystems.libsignal.util.guava.Optional getSimSubscriptionId()>
<org.thoughtcrime.securesms.TransportOption: org.thoughtcrime.securesms.TransportOption$Type getType()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.annotation.JsonInclude$Include findInclusion()>
<com.google.android.exoplayer2.decoder.CryptoInfo: android.media.MediaCodec$CryptoInfo getFrameworkCryptoInfoV16()>
<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedField getField()>
<android.graphics.NinePatch: int getDensity()>
<android.graphics.NinePatch: int getWidth()>
<android.graphics.NinePatch: int getHeight()>
<android.graphics.NinePatch: boolean hasAlpha()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()>
<com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()>
<android.icu.util.Currency$CurrencyNameResultHandler: java.lang.String getBestCurrencyISOCode()>
<android.icu.util.Currency$CurrencyNameResultHandler: int getBestMatchLength()>
<java.util.IdentityHashMap$Values: java.util.Iterator iterator()>
<org.thoughtcrime.securesms.database.PushDatabase: android.database.Cursor getPending()>
<android.media.Cea708CCWidget$CCWindowLayout: void removeFromCaptionView()>
<android.media.Cea708CCWidget$CCWindowLayout: void clearText()>
<java.io.ObjectStreamField: java.lang.String getName()>
<java.io.ObjectStreamField: char getTypeCode()>
<java.io.ObjectStreamField: java.lang.String getTypeString()>
<android.app.AlertDialog$Builder: android.content.Context getContext()>
<java.io.ObjectStreamField: int getOffset()>
<java.io.ObjectStreamField: boolean isPrimitive()>
<java.io.ObjectStreamField: boolean isUnshared()>
<java.io.ObjectStreamField: java.lang.reflect.Field getField()>
<java.io.ObjectStreamField: java.lang.String getSignature()>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup$OverflowPanelViewHelper: int getViewTypeCount()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractorHolder: void release()>
<android.animation.Keyframe$IntKeyframe: int getIntValue()>
<android.view.ViewConfiguration: int getScaledScrollBarSize()>
<android.os.ConditionVariable: void close()>
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>
<android.os.ConditionVariable: void block()>
<android.view.ViewConfiguration: int getScaledEdgeSlop()>
<android.view.ViewConfiguration: int getScaledTouchSlop()>
<android.view.ViewConfiguration: int getScaledDoubleTapTouchSlop()>
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>
<android.view.ViewConfiguration: int getScaledScrollFactor()>
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: int getScaledOverscrollDistance()>
<android.view.ViewConfiguration: int getScaledOverflingDistance()>
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>
<android.view.ViewConfiguration: boolean isFadingMarqueeEnabled()>
<android.app.AlertDialog$Builder: android.app.AlertDialog create()>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>
<org.thoughtcrime.securesms.scribbles.widget.CanvasView: android.graphics.Bitmap getBitmap()>
<android.support.v7.widget.DropDownListView: boolean touchModeDrawsInPressedStateCompat()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints build()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints buildPartial()>
<sun.util.locale.StringTokenIterator: java.lang.String current()>
<sun.util.locale.StringTokenIterator: int currentStart()>
<sun.util.locale.StringTokenIterator: int currentEnd()>
<sun.util.locale.StringTokenIterator: boolean isDone()>
<sun.util.locale.StringTokenIterator: java.lang.String next()>
<sun.util.locale.StringTokenIterator: boolean hasNext()>
<com.nineoldandroids.animation.ObjectAnimator: void start()>
<java.util.ArrayList$ListItr: int nextIndex()>
<java.util.ArrayList$ListItr: int previousIndex()>
<java.util.ArrayList$ListItr: java.lang.Object previous()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()>
<com.google.protobuf.GeneratedMessage: void makeExtensionsImmutable()>
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: int getNextIndexToLoad()>
<pl.tajchert.sample.DotsTextView: void resetPosition()>
<com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition build()>
<com.fasterxml.jackson.core.JsonParser: int getFeatureMask()>
<org.whispersystems.libsignal.state.PreKeyRecord: int getId()>
<org.whispersystems.libsignal.state.PreKeyRecord: org.whispersystems.libsignal.ecc.ECKeyPair getKeyPair()>
<org.whispersystems.libsignal.state.PreKeyRecord: byte[] serialize()>
<org.ccil.cowan.tagsoup.ElementType: java.lang.String name()>
<org.ccil.cowan.tagsoup.ElementType: java.lang.String namespace()>
<org.ccil.cowan.tagsoup.ElementType: java.lang.String localName()>
<org.ccil.cowan.tagsoup.ElementType: int model()>
<org.ccil.cowan.tagsoup.ElementType: int flags()>
<org.ccil.cowan.tagsoup.ElementType: org.ccil.cowan.tagsoup.AttributesImpl atts()>
<org.ccil.cowan.tagsoup.ElementType: org.ccil.cowan.tagsoup.ElementType parent()>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.view.View getDefaultView()>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.content.Context getRemoteContext()>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.view.View getErrorView()>
<org.whispersystems.libsignal.IdentityKey: org.whispersystems.libsignal.ecc.ECPublicKey getPublicKey()>
<org.whispersystems.libsignal.IdentityKey: byte[] serialize()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: com.google.protobuf.DescriptorProtos$EnumOptions getOptions()>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: int getValueCount()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: boolean hasName()>
<com.google.protobuf.DescriptorProtos$EnumDescriptorProto: boolean hasOptions()>
<com.annimon.stream.Collectors$CollectorsImpl: com.annimon.stream.function.BiConsumer accumulator()>
<com.annimon.stream.Collectors$CollectorsImpl: com.annimon.stream.function.Function finisher()>
<com.annimon.stream.Collectors$CollectorsImpl: com.annimon.stream.function.Supplier supplier()>
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
<com.google.zxing.qrcode.encoder.BlockPair: byte[] getDataBytes()>
<com.google.zxing.qrcode.encoder.BlockPair: byte[] getErrorCorrectionBytes()>
<android.widget.CompoundButton: boolean isChecked()>
<android.widget.CompoundButton: android.graphics.drawable.Drawable getButtonDrawable()>
<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class getDefaultImpl()>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer$DrawerState: boolean isVisible()>
<org.thoughtcrime.securesms.crypto.IdentityKeyParcelable: org.whispersystems.libsignal.IdentityKey get()>
<android.support.v7.widget.TooltipPopup: void hide()>
<android.support.v7.widget.TooltipPopup: boolean isShowing()>
<android.widget.RemoteViewsAdapter: boolean isDataReady()>
<android.support.v7.view.ActionBarPolicy: boolean enableHomeButtonByDefault()>
<android.support.v7.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()>
<android.widget.RemoteViewsAdapter: void saveRemoteViewsCache()>
<android.support.v7.view.ActionBarPolicy: int getMaxActionButtons()>
<android.support.v7.view.ActionBarPolicy: int getStackedTabMaxWidth()>
<android.support.v7.view.ActionBarPolicy: int getTabContainerHeight()>
<android.support.v7.view.ActionBarPolicy: boolean hasEmbeddedTabs()>
<android.support.v7.view.ActionBarPolicy: boolean showsOverflowMenuButton()>
<com.android.internal.view.IInputMethodClient$Stub: android.os.IBinder asBinder()>
<android.icu.impl.Trie2_16: int getSerializedLength()>
<com.google.android.exoplayer2.trackselection.TrackSelectionArray: com.google.android.exoplayer2.trackselection.TrackSelection[] getAll()>
<java.util.concurrent.atomic.AtomicBoolean: boolean get()>
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()>
<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>
<android.view.MotionEvent$PointerProperties: void clear()>
<android.icu.util.Calendar$FormatConfiguration: java.lang.String getPatternString()>
<android.icu.util.Calendar$FormatConfiguration: java.lang.String getOverrideString()>
<android.icu.util.Calendar$FormatConfiguration: android.icu.util.Calendar getCalendar()>
<android.icu.util.Calendar$FormatConfiguration: android.icu.util.ULocale getLocale()>
<android.icu.util.Calendar$FormatConfiguration: android.icu.text.DateFormatSymbols getDateFormatSymbols()>
<android.icu.util.DateTimeRule: int getDateRuleType()>
<android.icu.util.DateTimeRule: int getRuleMonth()>
<android.icu.util.DateTimeRule: int getRuleDayOfMonth()>
<android.icu.util.DateTimeRule: int getRuleDayOfWeek()>
<android.icu.util.DateTimeRule: int getRuleWeekInMonth()>
<android.icu.util.DateTimeRule: int getTimeRuleType()>
<android.icu.util.DateTimeRule: int getRuleMillisInDay()>
<android.icu.text.PluralRules$FixedDecimal: int getVisibleDecimalDigitCount()>
<android.support.v7.app.WindowDecorActionBar: void completeDeferredDestroyActionMode()>
<android.support.v7.app.WindowDecorActionBar: int getNavigationMode()>
<org.thoughtcrime.securesms.ConversationListFragment: org.thoughtcrime.securesms.ConversationListAdapter getListAdapter()>
<android.support.v7.app.WindowDecorActionBar: void hideForSystem()>
<com.google.android.mms.pdu_alt.GenericPdu: int getMessageType()>
<android.support.v7.app.WindowDecorActionBar: void onContentScrollStarted()>
<com.google.android.mms.pdu_alt.GenericPdu: com.google.android.mms.pdu_alt.PduHeaders getPduHeaders()>
<android.support.v7.app.WindowDecorActionBar: void onContentScrollStopped()>
<android.content.ISyncAdapter$Stub: android.os.IBinder asBinder()>
<org.thoughtcrime.securesms.ConversationListFragment: void onSwitchToArchive()>
<org.thoughtcrime.securesms.ConversationListFragment: void resetQueryFilter()>
<sun.misc.HexDumpEncoder: int bytesPerAtom()>
<sun.misc.HexDumpEncoder: int bytesPerLine()>
<android.support.v7.app.WindowDecorActionBar: void showForSystem()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionManagerCompat: java.util.List getActiveSubscriptionInfoList()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionManagerCompat: org.whispersystems.libsignal.util.guava.Optional getPreferredSubscriptionId()>
<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>
<java.nio.channels.FileLock: long position()>
<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsets()>
<java.nio.channels.FileLock: long size()>
<android.view.WindowInsets: int getSystemWindowInsetLeft()>
<android.view.WindowInsets: int getSystemWindowInsetTop()>
<android.view.WindowInsets: int getSystemWindowInsetRight()>
<android.view.WindowInsets: int getSystemWindowInsetBottom()>
<android.view.WindowInsets: boolean isConsumed()>
<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<android.app.Fragment$1: boolean onHasView()>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: boolean isActive()>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void deactivate()>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void onUserAction()>
<android.icu.text.Transliterator: int getMaximumContextLength()>
<android.icu.text.Transliterator: java.lang.String getID()>
<libcore.util.BasicLruCache: void evictAll()>
<android.icu.text.Transliterator: android.icu.text.UnicodeFilter getFilter()>
<com.nineoldandroids.animation.Animator: java.util.ArrayList getListeners()>
<java.util.Collections$SetFromMap: void clear()>
<java.util.Collections$SetFromMap: boolean isEmpty()>
<android.media.MediaCodec: void release()>
<com.android.internal.util.FastPrintWriter: void setError()>
<android.media.MediaCodec: void start()>
<android.media.MediaCodec: void stop()>
<android.media.MediaCodec: void flush()>
<com.android.internal.util.FastPrintWriter: void flush()>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.util.StringTokenizer: int countTokens()>
<com.doomonafireball.betterpickers.numberpicker.NumberPickerErrorTextView: void hide()>
<java.net.Socket: void setImpl()>
<com.doomonafireball.betterpickers.numberpicker.NumberPickerErrorTextView: void hideImmediately()>
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>
<java.net.Socket: void postAccept()>
<java.net.Socket: void setCreated()>
<java.net.Socket: void setBound()>
<java.net.Socket: void setConnected()>
<java.net.Socket: java.net.InetAddress getInetAddress()>
<java.net.Socket: java.net.InetAddress getLocalAddress()>
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>
<android.widget.TextView: int length()>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.widget.TextView: int getLineHeight()>
<android.widget.TextView: android.text.Layout getLayout()>
<java.util.Stack: java.lang.Object pop()>
<java.util.Stack: java.lang.Object peek()>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.widget.EdgeEffect: boolean isFinished()>
<android.widget.EdgeEffect: void finish()>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.widget.EdgeEffect: void onRelease()>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<java.net.Socket: boolean isConnected()>
<java.net.Socket: boolean isBound()>
<java.net.Socket: boolean isClosed()>
<android.widget.TextView: int getCompoundPaddingTop()>
<java.net.Socket: boolean isInputShutdown()>
<java.net.Socket: boolean isOutputShutdown()>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.icu.impl.Trie: boolean isCharTrie()>
<android.widget.TextView: int getCompoundPaddingStart()>
<android.widget.TextView: int getCompoundPaddingEnd()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.EdgeEffect: int getMaxHeight()>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.TextView: int getTotalPaddingRight()>
<java.util.Formatter: java.util.Locale locale()>
<java.util.Formatter: java.lang.Appendable out()>
<java.util.Formatter: java.lang.String toString()>
<android.widget.TextView: int getTotalPaddingTop()>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.support.design.widget.TabLayout$TabLayoutOnPageChangeListener: void reset()>
<org.thoughtcrime.securesms.preferences.widgets.ColorPickerPreferenceDialogFragmentCompat: org.thoughtcrime.securesms.preferences.widgets.ColorPickerPreference getColorPickerPreference()>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: float width()>
<android.graphics.RectF: float height()>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: void setEmpty()>
<sun.security.util.DerInputBuffer: sun.security.util.DerInputBuffer dup()>
<sun.security.util.DerInputBuffer: byte[] toByteArray()>
<sun.security.util.DerInputBuffer: int getPos()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$AnimationBuilder: void start()>
<android.support.v7.preference.PreferenceInflater: android.content.Context getContext()>
<android.support.v7.widget.RecyclerView$Adapter: boolean hasObservers()>
<android.support.v7.widget.RecyclerView$Adapter: boolean hasStableIds()>
<android.support.v7.widget.RecyclerView$Adapter: void notifyDataSetChanged()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>
<android.app.ExitTransitionCoordinator$11: void onSharedElementsReady()>
<android.widget.TextView: java.util.Locale getTextLocale()>
<android.widget.TextView: float getTextSize()>
<android.widget.TextView: int getTypefaceStyle()>
<android.support.v4.provider.FontsContractCompat$FontFamilyResult: android.support.v4.provider.FontsContractCompat$FontInfo[] getFonts()>
<android.support.v4.provider.FontsContractCompat$FontFamilyResult: int getStatusCode()>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<android.widget.TextView: int getBreakStrategy()>
<android.widget.TextView: int getHyphenationFrequency()>
<android.widget.AbsListView: long[] getCheckedItemIds()>
<android.widget.AbsListView: void clearChoices()>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.widget.TextView: int getCurrentTextColor()>
<android.widget.TextView: boolean getShowSoftInputOnFocus()>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.widget.TextView: boolean getLinksClickable()>
<com.bumptech.glide.Registry: java.util.List getImageHeaderParsers()>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.widget.TextView: int getGravity()>
<android.widget.TextView: boolean getHorizontallyScrolling()>
<android.widget.TextView: int getMaxLines()>
<android.widget.AbsListView: int getChoiceMode()>
<android.text.Hyphenator: long getNativePtr()>
<android.widget.TextView: float getLineSpacingMultiplier()>
<android.widget.TextView: float getLineSpacingExtra()>
<android.widget.AbsListView: boolean isFastScrollEnabled()>
<org.whispersystems.signalservice.api.messages.SignalServiceGroup: byte[] getGroupId()>
<android.widget.AbsListView: void invokeOnItemScrollListener()>
<android.widget.AbsListView: int getSelectionModeForAccessibility()>
<android.widget.AbsListView: boolean isTextFilterEnabled()>
<android.widget.AbsListView: boolean isStackFromBottom()>
<android.widget.AbsListView: void requestLayoutIfNecessary()>
<org.ccil.cowan.tagsoup.HTMLScanner: java.lang.String getSystemId()>
<android.icu.impl.UCharacterProperty$BinaryProperty: int getSource()>
<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: java.util.Map _createObjectIdMap()>
<com.google.protobuf.DescriptorProtos$MethodOptions: int getUninterpretedOptionCount()>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.widget.TextView: boolean isSingleLine()>
<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>
<android.widget.TextView: boolean hasPasswordTransformationMethod()>
<org.ccil.cowan.tagsoup.HTMLScanner: void startCDATA()>
<android.widget.AbsListView: void updateScrollIndicators()>
<android.widget.TextView: int getInputType()>
<android.widget.TextView: int getImeOptions()>
<com.android.internal.widget.FloatingToolbar: com.android.internal.widget.FloatingToolbar show()>
<com.android.internal.widget.FloatingToolbar: com.android.internal.widget.FloatingToolbar updateLayout()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label: int getNumber()>
<com.android.internal.widget.FloatingToolbar: void dismiss()>
<com.android.internal.widget.FloatingToolbar: void hide()>
<android.widget.AbsListView: int getListPaddingTop()>
<android.widget.AbsListView: int getListPaddingBottom()>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.widget.AbsListView: int getListPaddingRight()>
<android.widget.TextView: java.lang.CharSequence getError()>
<android.icu.util.TimeZone$ConstantZone: boolean isFrozen()>
<android.icu.util.TimeZone$ConstantZone: android.icu.util.TimeZone freeze()>
<org.thoughtcrime.securesms.preferences.BlockedContactListItem: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.widget.AbsListView: void handleBoundsChange()>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<android.widget.AbsListView: void keyPressed()>
<com.google.android.mms.pdu_alt.NotificationInd: byte[] getContentLocation()>
<com.google.android.mms.pdu_alt.NotificationInd: long getExpiry()>
<android.widget.AbsListView: void updateSelectorState()>
<com.google.android.mms.pdu_alt.NotificationInd: com.google.android.mms.pdu_alt.EncodedStringValue getSubject()>
<com.google.android.mms.pdu_alt.NotificationInd: byte[] getTransactionId()>
<android.widget.TextView: void invalidateCursor()>
<android.widget.TextView: int getTopPaddingOffset()>
<android.support.v7.view.SupportMenuInflater: java.lang.Object getRealOwner()>
<android.widget.TextView: boolean isTextSelectable()>
<java.text.DateFormatSymbols: java.lang.String[] getEras()>
<java.text.DateFormatSymbols: java.lang.String[] getMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>
<android.widget.Editor: android.os.ParcelableParcel saveInstanceState()>
<java.text.DateFormatSymbols: java.lang.String[] getTinyMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getStandAloneMonths()>
<android.widget.Editor: void forgetUndoRedo()>
<java.text.DateFormatSymbols: java.lang.String[] getShortStandAloneMonths()>
<java.text.DateFormatSymbols: java.lang.String[] getTinyStandAloneMonths()>
<android.widget.Editor: boolean canUndo()>
<java.text.DateFormatSymbols: java.lang.String[] getTinyWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] getStandAloneWeekdays()>
<android.widget.Editor: boolean canRedo()>
<java.text.DateFormatSymbols: java.lang.String[] getShortStandAloneWeekdays()>
<java.text.DateFormatSymbols: java.lang.String[] getTinyStandAloneWeekdays()>
<android.widget.Editor: void undo()>
<java.text.DateFormatSymbols: java.lang.Object clone()>
<android.widget.Editor: void redo()>
<android.widget.Editor: void replace()>
<android.widget.Editor: void onAttachedToWindow()>
<android.widget.Editor: void onDetachedFromWindow()>
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>
<android.widget.Editor: void createInputContentTypeIfNeeded()>
<android.widget.Editor: void createInputMethodStateIfNeeded()>
<android.widget.Editor: boolean isCursorVisible()>
<android.widget.Editor: void prepareCursorControllers()>
<android.widget.Editor: void hideInsertionPointCursorController()>
<android.widget.Editor: void hideCursorAndSpanControllers()>
<android.widget.TextView: int getLineCount()>
<android.widget.TextView: int getBaselineOffset()>
<android.widget.Editor: void setFrame()>
<android.graphics.drawable.LayerDrawable$LayerState: int getOpacity()>
<android.graphics.drawable.LayerDrawable$LayerState: boolean isStateful()>
<android.support.design.widget.StateListAnimator: void jumpToCurrentState()>
<android.graphics.drawable.LayerDrawable$LayerState: boolean canConstantState()>
<android.graphics.drawable.LayerDrawable$LayerState: void invalidateCache()>
<android.widget.Editor: void onLocaleChanged()>
<android.widget.Editor: android.text.method.WordIterator getWordIterator()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void computeScrollDelta()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: int getDeltaX()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: int getDeltaY()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: int getHorizontalDirection()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: int getVerticalDirection()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: boolean isFinished()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void requestStop()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getEras()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getEraNames()>
<android.support.v4.widget.AutoScrollHelper$ClampedScroller: void start()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getNarrowEras()>
<com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil: long getPlaybackHeadPosition()>
<com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil: long getPlaybackHeadPositionUs()>
<com.google.android.exoplayer2.audio.AudioTrack$AudioTrackUtil: void pause()>
<android.widget.TextView: void resetErrorChangedFlag()>
<android.widget.TextView: void hideErrorIfUnchanged()>
<android.graphics.pdf.PdfDocument$Page: android.graphics.Canvas getCanvas()>
<android.graphics.pdf.PdfDocument$Page: android.graphics.pdf.PdfDocument$PageInfo getInfo()>
<android.graphics.pdf.PdfDocument$Page: boolean isFinished()>
<android.widget.TextView: boolean onCheckIsTextEditor()>
<android.icu.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>
<android.icu.text.DateFormatSymbols: java.lang.String getTimeSeparatorString()>
<android.widget.Editor: void beginBatchEdit()>
<android.widget.Editor: void endBatchEdit()>
<android.widget.Editor: void ensureEndedBatchEdit()>
<android.widget.TextView: void beginBatchEdit()>
<android.widget.TextView: void endBatchEdit()>
<android.widget.TextView: void onBeginBatchEdit()>
<android.widget.TextView: void onEndBatchEdit()>
<android.widget.Editor: boolean reportExtractedText()>
<java.lang.ref.Reference: void clear()>
<java.lang.ref.Reference: void clearReferent()>
<android.icu.impl.UCharacterName: int getMaxCharNameLength()>
<android.widget.AbsListView: void hideSelector()>
<android.widget.AbsListView: int reconcileSelectedPosition()>
<org.thoughtcrime.securesms.webrtc.audio.IncomingRinger: void start()>
<android.widget.Editor: void invalidateHandlesAndActionMode()>
<android.widget.AbsListView: boolean resurrectSelectionIfNeeded()>
<android.widget.AbsListView: boolean resurrectSelection()>
<android.widget.Editor: void invalidateTextDisplayList()>
<android.widget.Editor: void updateCursorsPositions()>
<org.thoughtcrime.securesms.webrtc.audio.IncomingRinger: void stop()>
<android.widget.Editor: void refreshTextActionMode()>
<android.widget.Editor: void startInsertionActionMode()>
<android.widget.AbsListView: void confirmCheckedPositionsById()>
<android.widget.Editor: boolean startSelectionActionMode()>
<android.widget.Editor: boolean checkField()>
<android.widget.AbsListView: void handleDataChanged()>
<android.widget.TextView: boolean getIncludeFontPadding()>
<android.widget.Editor: boolean extractedTextModeWillBeStarted()>
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>
<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>
<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>
<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>
<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>
<android.widget.Editor: void stopTextActionMode()>
<android.widget.Editor: boolean hasInsertionController()>
<android.widget.Editor: boolean hasSelectionController()>
<android.widget.Editor: android.widget.Editor$InsertionPointCursorController getInsertionController()>
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getHttpParams()>
<com.android.mms.service_alt.MmsConfig$Overridden: int getHttpSocketTimeout()>
<com.android.mms.service_alt.MmsConfig$Overridden: int getMaxImageHeight()>
<com.android.mms.service_alt.MmsConfig$Overridden: int getMaxImageWidth()>
<com.android.mms.service_alt.MmsConfig$Overridden: int getMaxMessageSize()>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getNaiSuffix()>
<android.widget.Editor: void onScrollChanged()>
<com.android.mms.service_alt.MmsConfig$Overridden: boolean getSupportHttpCharsetHeader()>
<com.android.mms.service_alt.MmsConfig$Overridden: boolean getSupportMmsContentDisposition()>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getUaProfTagName()>
<android.widget.Editor: void makeBlink()>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getUaProfUrl()>
<com.android.mms.service_alt.MmsConfig$Overridden: java.lang.String getUserAgent()>
<android.support.v7.widget.ActionMenuPresenter: boolean dismissPopupMenus()>
<android.util.Singleton: java.lang.Object get()>
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.widget.AbsListView: int getCacheColorHint()>
<libcore.reflect.TypeVariableImpl: void resolve()>
<libcore.reflect.TypeVariableImpl: java.lang.reflect.Type[] getBounds()>
<libcore.reflect.TypeVariableImpl: java.lang.String getName()>
<android.icu.impl.locale.ParseStatus: boolean isError()>
<android.widget.TextView: boolean moveCursorToVisibleOffset()>
<android.support.v7.widget.ActionMenuPresenter: android.graphics.drawable.Drawable getOverflowIcon()>
<android.support.v7.widget.ActionMenuPresenter: boolean hideOverflowMenu()>
<android.support.v7.widget.ActionMenuPresenter: boolean hideSubMenus()>
<android.icu.util.BytesTrie: int getValue()>
<android.widget.TextView: int viewportToContentHorizontalOffset()>
<android.widget.TextView: int viewportToContentVerticalOffset()>
<android.support.v7.widget.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<android.widget.TextView: int getSelectionStart()>
<android.widget.TextView: int getSelectionEnd()>
<android.widget.TextView: boolean hasSelection()>
<org.thoughtcrime.securesms.ConversationFragment$ConversationDateHeader: void hide()>
<android.widget.TextView: java.lang.String getSelectedText()>
<org.thoughtcrime.securesms.ConversationFragment$ConversationDateHeader: void show()>
<android.view.DragAndDropPermissions: boolean takeTransient()>
<android.widget.TextView: void setSingleLine()>
<android.view.DragAndDropPermissions: void release()>
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>
<android.support.v7.widget.ActionMenuPresenter: boolean showOverflowMenu()>
<android.graphics.Region: void setEmpty()>
<android.animation.AnimationHandler$MyFrameCallbackProvider: long getFrameTime()>
<android.animation.AnimationHandler$MyFrameCallbackProvider: long getFrameDelay()>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<android.widget.TextView: void updateAfterEdit()>
<android.support.v7.util.BatchingListUpdateCallback: void dispatchLastEvent()>
<android.content.res.Resources: android.content.res.ResourcesImpl getImpl()>
<android.content.res.Resources: java.lang.ClassLoader getClassLoader()>
<android.content.res.Resources: android.graphics.drawable.DrawableInflater getDrawableInflater()>
<android.content.res.Resources: android.content.res.ConfigurationBoundResourceCache getAnimatorCache()>
<android.content.res.Resources: android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()>
<android.widget.TextView: void clearComposingText()>
<android.icu.text.BreakIterator$BreakIteratorCache: android.icu.util.ULocale getLocale()>
<android.icu.text.BreakIterator$BreakIteratorCache: android.icu.text.BreakIterator createBreakInstance()>
<android.widget.TextView: boolean isTextEditable()>
<android.widget.TextView: boolean didTouchFocusSelect()>
<com.annimon.stream.LongStream: long sum()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: int getCurrentItemShowing()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: int getHours()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: int getIsCurrentlyAmOrPm()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialPickerLayout: int getMinutes()>
<android.widget.TextView: boolean canSelectText()>
<android.widget.TextView: boolean textCanBeSelected()>
<android.widget.TextView: java.util.Locale getTextServicesLocale()>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<android.widget.TextView: boolean isInExtractedMode()>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
<android.widget.TextView: java.util.Locale getSpellCheckerLocale()>
<android.widget.TextView: void onLocaleChanged()>
<android.widget.TextView: android.text.method.WordIterator getWordIterator()>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()>
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: void flushLayoutCache()>
<android.icu.impl.TimeZoneGenericNames: android.icu.impl.TimeZoneGenericNames freeze()>
<sun.net.ftp.FtpReplyCode: int getValue()>
<sun.net.ftp.FtpReplyCode: boolean isPositivePreliminary()>
<sun.net.ftp.FtpReplyCode: boolean isPositiveCompletion()>
<sun.net.ftp.FtpReplyCode: boolean isPositiveIntermediate()>
<android.widget.TextView: boolean isSuggestionsEnabled()>
<android.widget.TextView: void stopTextActionMode()>
<android.widget.TextView: boolean canUndo()>
<android.widget.TextView: boolean canRedo()>
<android.widget.TextView: boolean canCut()>
<android.widget.TextView: boolean canCopy()>
<android.widget.TextView: boolean canShare()>
<android.widget.TextView: boolean isDeviceProvisioned()>
<android.widget.TextView: boolean canPaste()>
<android.widget.TextView: boolean canProcessText()>
<android.widget.TextView: boolean canSelectAllText()>
<android.widget.TextView: boolean selectAllText()>
<android.icu.text.DateTimePatternGenerator$FormatParser: java.util.List getItems()>
<android.widget.TextView: boolean isInBatchEditMode()>
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<android.icu.text.TransliterationRuleSet: int getMaximumContextLength()>
<android.icu.text.TransliterationRuleSet: void freeze()>
<android.widget.Editor$ProcessTextIntentActionsHandler: void initializeAccessibilityActions()>
<android.support.v4.graphics.drawable.DrawableWrapperApi14: android.graphics.drawable.Drawable getWrappedDrawable()>
<com.makeramen.roundedimageview.RoundedImageView: float getMaxCornerRadius()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.content.ComponentName: java.lang.String toShortString()>
<org.ccil.cowan.tagsoup.Element: org.ccil.cowan.tagsoup.AttributesImpl atts()>
<org.ccil.cowan.tagsoup.Element: org.ccil.cowan.tagsoup.Element next()>
<org.ccil.cowan.tagsoup.Element: java.lang.String name()>
<org.ccil.cowan.tagsoup.Element: java.lang.String namespace()>
<org.ccil.cowan.tagsoup.Element: java.lang.String localName()>
<org.ccil.cowan.tagsoup.Element: int model()>
<org.ccil.cowan.tagsoup.Element: int flags()>
<org.ccil.cowan.tagsoup.Element: org.ccil.cowan.tagsoup.ElementType parent()>
<org.ccil.cowan.tagsoup.Element: void anonymize()>
<org.ccil.cowan.tagsoup.Element: void clean()>
<org.ccil.cowan.tagsoup.Element: void preclose()>
<org.ccil.cowan.tagsoup.Element: boolean isPreclosed()>
<android.media.ExifInterface$ByteOrderAwarenessDataInputStream: long peek()>
<com.android.internal.app.IAppOpsCallback$Stub: android.os.IBinder asBinder()>
<sun.security.x509.X500Name: boolean isEmpty()>
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()>
<android.widget.SpellChecker$SpellParser: boolean isFinished()>
<android.widget.SpellChecker$SpellParser: void stop()>
<com.fasterxml.jackson.databind.MapperFeature: int getMask()>
<android.widget.SpellChecker$SpellParser: void parse()>
<sun.security.x509.X500Name: java.lang.String toString()>
<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>
<android.support.v7.widget.ActionBarContainer: android.view.View getTabContainer()>
<com.google.protobuf.LiteralByteString$LiteralByteIterator: byte nextByte()>
<android.support.v7.widget.ViewBoundsCheck$BoundFlags: boolean boundsMatch()>
<android.support.v7.widget.ViewBoundsCheck$BoundFlags: void resetFlags()>
<org.webrtc.SurfaceTextureHelper$7: void run()>
<android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry: int getFetchStrategy()>
<android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry: android.support.v4.provider.FontRequest getRequest()>
<android.support.v4.content.res.FontResourcesParserCompat$ProviderResourceEntry: int getTimeout()>
<org.webrtc.SurfaceTextureHelper: android.os.Handler getHandler()>
<org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture getSurfaceTexture()>
<org.webrtc.SurfaceTextureHelper: boolean isTextureInUse()>
<org.webrtc.SurfaceTextureHelper: void returnTextureFrame()>
<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>
<org.webrtc.SurfaceTextureHelper: void stopListening()>
<android.icu.text.BreakTransliterator: android.icu.text.BreakIterator getBreakIterator()>
<android.support.v7.view.menu.MenuPopupHelper: void dismiss()>
<android.support.v7.view.menu.MenuPopupHelper: android.support.v7.view.menu.MenuPopup getPopup()>
<android.support.v7.view.menu.MenuPopupHelper: boolean isShowing()>
<android.support.v7.view.menu.MenuPopupHelper: void show()>
<android.support.v7.view.menu.MenuPopupHelper: boolean tryShow()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup build()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup buildPartial()>
<android.view.SurfaceView$4: void setSizeFromLayout()>
<android.content.res.GradientColor: android.graphics.Shader getShader()>
<android.view.SurfaceView$4: android.view.Surface getSurface()>
<android.view.ViewGroup$HoverTarget: void recycle()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void start()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void requestStop()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: boolean isFinished()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: void computeScrollDelta()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: int getHorizontalDirection()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: int getVerticalDirection()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: int getDeltaX()>
<com.android.internal.widget.AutoScrollHelper$ClampedScroller: int getDeltaY()>
<android.content.UndoManager: boolean isInUndo()>
<android.content.UndoManager: void endUpdate()>
<android.support.v4.app.FragmentManagerImpl$StartEnterTransitionListener: void cancelTransaction()>
<android.support.v4.app.FragmentManagerImpl$StartEnterTransitionListener: void completeTransaction()>
<android.support.v4.widget.ViewDragHelper: void cancel()>
<android.support.v4.app.FragmentManagerImpl$StartEnterTransitionListener: boolean isReady()>
<android.support.v4.app.FragmentManagerImpl$StartEnterTransitionListener: void onStartEnterTransition()>
<android.support.v4.app.FragmentManagerImpl$StartEnterTransitionListener: void startListening()>
<com.fasterxml.jackson.databind.deser.ValueInstantiator: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams getDefaultCreator()>
<okhttp3.ConnectionSpec: java.util.List cipherSuites()>
<android.view.ViewPropertyAnimator: long getDuration()>
<okhttp3.ConnectionSpec: boolean isTls()>
<okhttp3.ConnectionSpec: java.util.List tlsVersions()>
<android.view.ViewPropertyAnimator: void start()>
<android.view.ViewPropertyAnimator: void cancel()>
<android.support.v4.widget.ViewDragHelper: int getTouchSlop()>
<android.support.v4.widget.ViewDragHelper: int getViewDragState()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.DupDetector getDupDetector()>
<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext getParent()>
<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.util.BufferRecycler _getBufferRecycler()>
<com.fasterxml.jackson.core.json.JsonWriteContext: int writeValue()>
<com.fasterxml.jackson.core.JsonFactory: boolean canUseCharArrays()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: java.util.Locale getLocale()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: java.lang.String getPattern()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: com.fasterxml.jackson.annotation.JsonFormat$Shape getShape()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: boolean hasLocale()>
<com.fasterxml.jackson.annotation.JsonFormat$Value: boolean hasPattern()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap assignIndexes()>
<com.fasterxml.jackson.core.JsonFactory: boolean requiresPropertyOrdering()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: com.fasterxml.jackson.databind.deser.SettableBeanProperty[] getPropertiesInInsertionOrder()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: java.util.Iterator iterator()>
<org.whispersystems.libsignal.ecc.ECKeyPair: org.whispersystems.libsignal.ecc.ECPrivateKey getPrivateKey()>
<org.whispersystems.libsignal.ecc.ECKeyPair: org.whispersystems.libsignal.ecc.ECPublicKey getPublicKey()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap: int size()>
<org.thoughtcrime.securesms.crypto.storage.TextSecurePreKeyStore: void migrateRecords()>
<org.ccil.cowan.tagsoup.Parser: int getEntity()>
<android.util.LruCache: void evictAll()>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer$AudioTrackListener: void onPositionDiscontinuity()>
<android.icu.text.TransliteratorRegistry$CompoundRBTEntry: android.icu.text.Transliterator getInstance()>
<android.icu.text.TransliteratorRegistry$IDEnumeration: boolean hasMoreElements()>
<android.icu.text.NumberingSystem: int getRadix()>
<android.icu.text.NumberingSystem: java.lang.String getDescription()>
<android.icu.text.NumberingSystem: java.lang.String getName()>
<android.icu.text.NumberingSystem: boolean isAlgorithmic()>
<android.icu.impl.locale.LanguageTag: java.lang.String getLanguage()>
<android.icu.impl.locale.LanguageTag: java.util.List getExtlangs()>
<android.icu.impl.locale.LanguageTag: java.lang.String getScript()>
<android.icu.impl.locale.LanguageTag: java.lang.String getRegion()>
<android.icu.impl.locale.LanguageTag: java.util.List getVariants()>
<android.icu.impl.locale.LanguageTag: java.util.List getExtensions()>
<android.icu.impl.locale.LanguageTag: java.lang.String getPrivateuse()>
<org.thoughtcrime.securesms.database.model.MessageRecord: long getExpireStarted()>
<org.thoughtcrime.securesms.database.model.MessageRecord: long getExpiresIn()>
<org.thoughtcrime.securesms.database.model.MessageRecord: long getId()>
<org.thoughtcrime.securesms.database.model.MessageRecord: java.util.List getIdentityKeyMismatches()>
<org.thoughtcrime.securesms.database.model.MessageRecord: org.thoughtcrime.securesms.recipients.Recipient getIndividualRecipient()>
<org.thoughtcrime.securesms.database.model.MessageRecord: int getRecipientDeviceId()>
<org.thoughtcrime.securesms.database.model.MessageRecord: long getTimestamp()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isBundleKeyExchange()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isContentBundleKeyExchange()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isCorruptedKeyExchange()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isForcedSms()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isIdentityDefault()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isIdentityUpdate()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isIdentityVerified()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isInvalidVersionKeyExchange()>
<android.icu.text.MessagePattern$Part: android.icu.text.MessagePattern$Part$Type getType()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isLegacyMessage()>
<android.icu.text.MessagePattern$Part: int getIndex()>
<org.thoughtcrime.securesms.database.model.MessageRecord: boolean isPush()>
<android.icu.text.MessagePattern$Part: int getLimit()>
<android.icu.text.MessagePattern$Part: android.icu.text.MessagePattern$ArgType getArgType()>
<android.database.CursorWindow: java.lang.String getName()>
<android.database.CursorWindow: void clear()>
<android.database.CursorWindow: int getStartPosition()>
<android.database.CursorWindow: int getNumRows()>
<android.support.v7.app.AppCompatDelegateImplV14$AutoNightModeManager: void cleanup()>
<android.support.v7.app.AppCompatDelegateImplV14$AutoNightModeManager: void dispatchTimeChanged()>
<android.support.v7.app.AppCompatDelegateImplV14$AutoNightModeManager: int getApplyableNightMode()>
<android.support.v7.app.AppCompatDelegateImplV14$AutoNightModeManager: void setup()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$Builder: com.bumptech.glide.load.engine.cache.MemorySizeCalculator build()>
<com.android.internal.widget.AutoScrollHelper$ScrollAnimationRunnable: void run()>
<javax.crypto.Mac: void chooseFirstProvider()>
<android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()>
<javax.crypto.Mac: int getMacLength()>
<sun.net.DefaultProgressMeteringPolicy: int getProgressUpdateThreshold()>
<libcore.util.ZoneInfo$WallTime: int getYear()>
<libcore.util.ZoneInfo$WallTime: int getMonth()>
<libcore.util.ZoneInfo$WallTime: int getMonthDay()>
<libcore.util.ZoneInfo$WallTime: int getHour()>
<libcore.util.ZoneInfo$WallTime: int getMinute()>
<libcore.util.ZoneInfo$WallTime: int getSecond()>
<libcore.util.ZoneInfo$WallTime: int getWeekDay()>
<libcore.util.ZoneInfo$WallTime: int getYearDay()>
<libcore.util.ZoneInfo$WallTime: int getGmtOffset()>
<libcore.util.ZoneInfo$WallTime: int getIsDst()>
<java.util.zip.Deflater: boolean needsInput()>
<java.util.zip.Deflater: void finish()>
<java.util.zip.Deflater: boolean finished()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: boolean hasKeySerializers()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: boolean hasSerializerModifiers()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable keySerializers()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable serializerModifiers()>
<com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig: java.lang.Iterable serializers()>
<java.util.zip.Deflater: int getTotalIn()>
<java.util.zip.Deflater: long getBytesRead()>
<java.util.zip.Deflater: long getBytesWritten()>
<java.util.zip.Deflater: void reset()>
<java.util.zip.Deflater: void end()>
<android.support.v7.widget.ActionBarOverlayLayout$3: void run()>
<android.app.Notification: java.lang.String getGroup()>
<android.util.IntArray: void clear()>
<android.util.IntArray: int size()>
<android.support.v7.widget.ActionBarOverlayLayout: int getActionBarHideOffset()>
<android.support.v7.widget.ActionBarOverlayLayout: void haltActionBarHideOffsetAnimations()>
<android.support.v7.widget.ActionBarOverlayLayout: boolean isInOverlayMode()>
<android.text.PackedIntVector: int size()>
<android.text.PackedIntVector: int width()>
<libcore.io.ForwardingOs: int getpid()>
<android.animation.AnimatorSet$Node: android.animation.AnimatorSet$Node clone()>
<libcore.io.ForwardingOs: int gettid()>
<libcore.io.ForwardingOs: int getuid()>
<android.support.v7.widget.ActionBarOverlayLayout: void pullChildren()>
<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>
<sun.security.util.ObjectIdentifier: int[] toIntArray()>
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>
<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()>
<android.app.Notification: boolean showsTime()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: int getPossibleLengthCount()>
<android.app.Notification: boolean showsChronometer()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: int getPossibleLengthLocalOnlyCount()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthLocalOnlyList()>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>
<java.util.Collections$SynchronizedMap: int size()>
<libcore.io.ForwardingOs: android.system.StructUtsname uname()>
<java.util.Collections$SynchronizedMap: void clear()>
<java.util.Collections$SynchronizedMap: java.util.Set keySet()>
<java.util.Collections$SynchronizedMap: java.util.Collection values()>
<com.nineoldandroids.animation.ValueAnimator: void cancel()>
<android.support.v7.app.AppCompatDelegateImplV9: void dismissPopups()>
<java.util.ResourceBundle$CacheKey: java.lang.String getName()>
<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>
<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>
<com.nineoldandroids.animation.ValueAnimator: void end()>
<android.support.v7.app.AppCompatDelegateImplV9: void endOnGoingFadeAnimation()>
<android.util.LongSparseLongArray: android.util.LongSparseLongArray clone()>
<com.nineoldandroids.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>
<com.nineoldandroids.animation.ValueAnimator: long getCurrentPlayTime()>
<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>
<com.google.android.exoplayer2.extractor.DefaultExtractorsFactory: com.google.android.exoplayer2.extractor.Extractor[] createExtractors()>
<com.nineoldandroids.animation.ValueAnimator: boolean isRunning()>
<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>
<android.util.LongSparseLongArray: void clear()>
<android.support.v7.app.AppCompatDelegateImplV9: void initWindowDecorActionBar()>
<android.support.v7.app.AppCompatDelegateImplV9: void installViewFactory()>
<android.support.v7.app.AppCompatDelegateImplV9: void invalidateOptionsMenu()>
<android.icu.text.DateIntervalInfo$DateIntervalSink: java.lang.String getAndResetNextCalendarType()>
<com.nineoldandroids.animation.ValueAnimator: void start()>
<java.util.ResourceBundle$BundleReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.math.MathContext: int getPrecision()>
<java.math.MathContext: java.math.RoundingMode getRoundingMode()>
<android.support.v7.app.AppCompatDelegateImplV9: boolean shouldAnimateActionModeView()>
<android.support.v7.widget.StaggeredGridLayoutManager$AnchorInfo: void reset()>
<java.util.Collections$SingletonMap: java.util.Set entrySet()>
<java.util.logging.LogManager: void ensureLogManagerInitialized()>
<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getSystemContext()>
<java.util.logging.LogManager: void drainLoggerRefQueueBounded()>
<android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase: void dispatchLongPress()>
<java.io.CharArrayWriter: void reset()>
<java.io.CharArrayWriter: char[] toCharArray()>
<java.io.CharArrayWriter: void flush()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: org.whispersystems.libsignal.IdentityKey getIdentityKey()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: org.thoughtcrime.securesms.events.WebRtcViewModel$State getState()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: boolean isBluetoothAvailable()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: boolean isLocalVideoEnabled()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: boolean isMicrophoneEnabled()>
<org.thoughtcrime.securesms.events.WebRtcViewModel: boolean isRemoteVideoEnabled()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void _throwInternal()>
<android.util.LongSparseArray: int size()>
<com.fasterxml.jackson.core.base.ParserMinimalBase: void clearCurrentToken()>
<android.util.LongSparseArray: void clear()>
<java.util.logging.LogManager: void checkPermission()>
<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>
<android.support.v7.widget.AdapterHelper: void consumePostponedUpdates()>
<android.support.v7.widget.AdapterHelper: void consumeUpdatesInOnePass()>
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>
<java.text.FieldPosition: int getField()>
<java.text.FieldPosition: int getBeginIndex()>
<java.text.FieldPosition: int getEndIndex()>
<org.greenrobot.eventbus.SubscriberMethodFinder$FindState: void moveToSuperclass()>
<android.support.v7.widget.AdapterHelper: boolean hasPendingUpdates()>
<android.support.v7.widget.AdapterHelper: boolean hasUpdates()>
<org.greenrobot.eventbus.SubscriberMethodFinder$FindState: void recycle()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.lang.String getId()>
<com.google.android.gms.location.places.internal.PlaceEntity: com.google.android.gms.maps.model.LatLng getLatLng()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.util.List getPlaceTypes()>
<com.google.android.gms.location.places.internal.PlaceEntity: int getPriceLevel()>
<com.google.android.gms.location.places.internal.PlaceEntity: float getRating()>
<com.google.android.gms.location.places.internal.PlaceEntity: com.google.android.gms.maps.model.LatLngBounds getViewport()>
<com.google.android.gms.location.places.internal.PlaceEntity: android.net.Uri getWebsiteUri()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint: com.google.protobuf.ByteString getContent()>
<android.support.v7.widget.AdapterHelper: void preProcess()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.util.List zzbqn()>
<com.google.android.gms.location.places.internal.PlaceEntity: float zzbqo()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.lang.String zzbqp()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.util.List zzbqq()>
<com.google.android.gms.location.places.internal.PlaceEntity: boolean zzbqr()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint: boolean hasContent()>
<com.google.android.gms.location.places.internal.PlaceEntity: long zzbqs()>
<com.google.android.gms.location.places.internal.PlaceEntity: android.os.Bundle zzbqt()>
<com.google.android.gms.location.places.internal.PlaceEntity: java.lang.String zzbqu()>
<com.google.android.gms.location.places.internal.PlaceEntity: com.google.android.gms.location.places.internal.PlaceLocalization zzbqv()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint: boolean isInitialized()>
<android.os.MessageQueue: android.os.Message next()>
<android.support.v7.widget.AdapterHelper: void reset()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder toBuilder()>
<com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.json.DupDetector child()>
<com.fasterxml.jackson.core.json.DupDetector: com.fasterxml.jackson.core.JsonLocation findLocation()>
<com.fasterxml.jackson.core.json.DupDetector: void reset()>
<android.icu.text.SimpleDateFormat: java.lang.String toPattern()>
<android.support.v7.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()>
<android.icu.text.SimpleDateFormat: android.icu.util.ULocale getLocale()>
<com.google.protobuf.SmallSortedMap: int getNumArrayEntries()>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.String _valueDesc()>
<com.google.protobuf.SmallSortedMap: java.lang.Iterable getOverflowEntries()>
<com.google.protobuf.SmallSortedMap: boolean isImmutable()>
<com.fasterxml.jackson.databind.DeserializationContext: java.lang.Class getActiveView()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.util.ArrayBuilders getArrayBuilders()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>
<com.fasterxml.jackson.databind.DeserializationContext: java.text.DateFormat getDateFormat()>
<com.fasterxml.jackson.databind.DeserializationContext: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.node.JsonNodeFactory getNodeFactory()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.core.JsonParser getParser()>
<com.fasterxml.jackson.databind.DeserializationContext: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<libcore.util.ZoneInfo$OffsetInterval: int getIsDst()>
<libcore.util.ZoneInfo$OffsetInterval: int getTotalOffsetSeconds()>
<libcore.util.ZoneInfo$OffsetInterval: long getEndWallTimeSeconds()>
<libcore.util.ZoneInfo$OffsetInterval: long getStartWallTimeSeconds()>
<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.util.ObjectBuffer leaseObjectBuffer()>
<org.thoughtcrime.securesms.ConversationListAdapter: java.util.Set getBatchSelections()>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: int getOneRecycleSize()>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: int getPickedIndexRelativeToRaw()>
<cn.carbswang.android.numberpickerview.library.NumberPickerView: int getValue()>
<android.support.design.widget.FloatingActionButton: int getSizeDimension()>
<org.thoughtcrime.securesms.ConversationListAdapter: void selectAllThreads()>
<org.thoughtcrime.securesms.ConversationListAdapter: void unselectAllThreads()>
<com.davemorrissey.labs.subscaleview.ImageSource: android.graphics.Bitmap getBitmap()>
<com.davemorrissey.labs.subscaleview.ImageSource: java.lang.Integer getResource()>
<com.davemorrissey.labs.subscaleview.ImageSource: int getSHeight()>
<com.davemorrissey.labs.subscaleview.ImageSource: android.graphics.Rect getSRegion()>
<com.davemorrissey.labs.subscaleview.ImageSource: int getSWidth()>
<com.davemorrissey.labs.subscaleview.ImageSource: boolean getTile()>
<com.davemorrissey.labs.subscaleview.ImageSource: android.net.Uri getUri()>
<com.davemorrissey.labs.subscaleview.ImageSource: boolean isCached()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: java.lang.String idFromBaseType()>
<com.davemorrissey.labs.subscaleview.ImageSource: com.davemorrissey.labs.subscaleview.ImageSource tilingEnabled()>
<okio.Buffer: boolean exhausted()>
<android.support.v7.widget.ListPopupWindow: void clearListSelection()>
<android.support.v7.widget.ListPopupWindow: android.view.View getAnchorView()>
<android.support.v7.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.support.v7.widget.ListPopupWindow: int getHorizontalOffset()>
<com.android.internal.util.BitwiseInputStream: int available()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>
<android.support.v7.widget.ListPopupWindow: int getVerticalOffset()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>
<android.support.v7.widget.ListPopupWindow: int getWidth()>
<android.support.v7.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>
<android.support.v7.widget.ListPopupWindow: boolean isModal()>
<com.android.internal.telephony.SmsMessageBase: void parseMessageBody()>
<com.android.internal.telephony.SmsMessageBase: void extractEmailAddressFromMessageBody()>
<android.text.DynamicLayout: int[] getBlockEndLines()>
<android.text.DynamicLayout: int[] getBlockIndices()>
<android.text.DynamicLayout: int getNumberOfBlocks()>
<android.text.DynamicLayout: int getIndexFirstChangedBlock()>
<okio.Buffer: byte readByte()>
<android.view.DisplayInfo: android.view.Display$Mode getMode()>
<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>
<sun.util.calendar.Era: boolean isLocalTime()>
<com.google.android.exoplayer2.source.ExtractorMediaSource: void releaseSource()>
<okio.Buffer: java.lang.String readUtf8()>
<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>
<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>
<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()>
<org.thoughtcrime.securesms.components.DeliveryStatusView: void setDelivered()>
<org.thoughtcrime.securesms.components.DeliveryStatusView: void setNone()>
<org.thoughtcrime.securesms.components.DeliveryStatusView: void setPending()>
<org.thoughtcrime.securesms.components.DeliveryStatusView: void setRead()>
<org.thoughtcrime.securesms.components.DeliveryStatusView: void setSent()>
<org.thoughtcrime.securesms.database.SmsMigrator$ProgressDescription: void incrementPrimaryComplete()>
<com.fasterxml.jackson.annotation.ObjectIdGenerators$Base: java.lang.Class getScope()>
<com.android.mms.util.DownloadManager: boolean isAuto()>
<android.support.v7.widget.RecyclerView$ViewFlinger: void postOnAnimation()>
<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getDrawable()>
<org.thoughtcrime.securesms.color.MaterialColors$MaterialColorList: int size()>
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>
<sun.nio.ch.NativeThreadSet: int add()>
<sun.nio.ch.NativeThreadSet: void signalAndWait()>
<android.support.v7.widget.RecyclerView$ViewFlinger: void stop()>
<android.icu.impl.ICUResourceBundle: android.icu.util.ULocale getULocale()>
<android.icu.impl.ICUResourceBundle: java.lang.String getKey()>
<com.google.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedRegions()>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node: java.lang.Object getData()>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node: com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node next()>
<org.thoughtcrime.securesms.qr.ScanningThread: void stopScanning()>
<android.content.ContentValues: int size()>
<android.content.ContentValues: void clear()>
<java.util.TaskQueue: java.util.TimerTask getMin()>
<android.media.SubtitleTrack: android.media.MediaFormat getFormat()>
<android.media.SubtitleTrack: void clearActiveCues()>
<android.media.SubtitleTrack: void scheduleTimedEvents()>
<android.media.SubtitleTrack: void onStop()>
<android.media.SubtitleTrack: void show()>
<android.media.SubtitleTrack: void hide()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext build()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext buildPartial()>
<android.content.ContentValues: java.util.Set keySet()>
<android.media.SubtitleTrack: int getTrackType()>
<java.security.MessageDigest: byte[] digest()>
<java.security.MessageDigest: void reset()>
<java.security.MessageDigest: java.lang.String getAlgorithm()>
<android.support.v7.widget.ActionBarOverlayLayout$2: void run()>
<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>
<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>
<com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty: boolean isManagedReference()>
<android.view.InputEvent: void prepareForReuse()>
<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>
<android.view.InputEvent: int getSequenceNumber()>
<org.whispersystems.jobqueue.JobParameters: org.whispersystems.jobqueue.EncryptionKeys getEncryptionKeys()>
<org.whispersystems.jobqueue.JobParameters: java.util.List getRequirements()>
<org.whispersystems.jobqueue.JobParameters: long getWakeLockTimeout()>
<org.whispersystems.jobqueue.JobParameters: boolean isPersistent()>
<org.whispersystems.jobqueue.JobParameters: boolean needsWakeLock()>
<android.util.ArrayMap$1: int colGetSize()>
<android.support.v4.app.NotificationCompat$Action: android.app.PendingIntent getActionIntent()>
<android.support.v4.app.NotificationCompat$Action: boolean getAllowGeneratedReplies()>
<android.support.v4.app.NotificationCompat$Action: android.os.Bundle getExtras()>
<android.support.v4.app.NotificationCompat$Action: int getIcon()>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer$MediaPlayerWrapper: int getAudioStreamType()>
<android.support.v4.app.NotificationCompat$Action: java.lang.CharSequence getTitle()>
<com.google.android.gms.common.ConnectionResult: int getErrorCode()>
<com.google.android.gms.common.ConnectionResult: java.lang.String getErrorMessage()>
<com.google.android.gms.common.ConnectionResult: android.app.PendingIntent getResolution()>
<android.util.ArrayMap: int indexOfNull()>
<android.util.ArrayMap: void clear()>
<android.util.ArrayMap: void erase()>
<sun.util.locale.LanguageTag: java.lang.String getLanguage()>
<sun.util.locale.LanguageTag: java.util.List getExtlangs()>
<sun.util.locale.LanguageTag: java.lang.String getScript()>
<sun.util.locale.LanguageTag: java.lang.String getRegion()>
<sun.util.locale.LanguageTag: java.util.List getVariants()>
<sun.util.locale.LanguageTag: java.util.List getExtensions()>
<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>
<android.util.ArrayMap: void validate()>
<org.thoughtcrime.securesms.notifications.MultipleRecipientNotificationBuilder: android.app.Notification build()>
<android.util.ArrayMap: java.util.Collection values()>
<sun.nio.ch.FileLockImpl: boolean isValid()>
<android.support.v7.widget.FastScroller: void show()>
<sun.nio.ch.FileLockImpl: void invalidate()>
<org.webrtc.CameraCapturer$4: void onCameraClosed()>
<org.webrtc.CameraCapturer$4: void onCameraDisconnected()>
<org.webrtc.CameraCapturer$4: void onFirstFrameAvailable()>
<android.graphics.drawable.VectorDrawable$VObject: boolean isTreeValid()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: long getExpiresIn()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: org.thoughtcrime.securesms.database.Address getGroupId()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: java.lang.String getMessageBody()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: int getProtocol()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: java.lang.String getPseudoSubject()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: org.thoughtcrime.securesms.database.Address getSender()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: int getSenderDeviceId()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: long getSentTimestampMillis()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: java.lang.String getServiceCenterAddress()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: int getSubscriptionId()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isContentPreKeyBundle()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isEndSession()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isGroup()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isLegacyPreKeyBundle()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isPreKeyBundle()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isPush()>
<org.thoughtcrime.securesms.sms.IncomingTextMessage: boolean isReplyPathPresent()>
<org.thoughtcrime.securesms.service.ApplicationMigrationService: org.thoughtcrime.securesms.service.ApplicationMigrationService$ImportState getState()>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: void archiveAllSessions()>
<org.thoughtcrime.securesms.notifications.NotificationState: int getMessageCount()>
<org.thoughtcrime.securesms.notifications.NotificationState: java.util.List getNotifications()>
<android.content.res.XmlBlock: void close()>
<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser()>
<org.thoughtcrime.securesms.notifications.NotificationState: android.net.Uri getRingtone()>
<org.thoughtcrime.securesms.notifications.NotificationState: int getThreadCount()>
<org.thoughtcrime.securesms.notifications.NotificationState: java.util.LinkedHashSet getThreads()>
<org.thoughtcrime.securesms.notifications.NotificationState: org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState getVibrate()>
<org.thoughtcrime.securesms.notifications.NotificationState: boolean hasMultipleThreads()>
<org.thoughtcrime.securesms.crypto.storage.TextSecureSessionStore: void migrateSessions()>
<android.view.View$UnsetPressedState: void run()>
<sun.nio.ch.Util$BufferCache: boolean isEmpty()>
<org.thoughtcrime.securesms.crypto.PublicKey: byte[] serialize()>
<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer removeFirst()>
<android.support.v7.widget.LinearLayoutManager$AnchorInfo: void assignCoordinateFromPadding()>
<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$TreeMapEntry subLowest()>
<org.thoughtcrime.securesms.components.ExpirationTimerView: void startAnimation()>
<android.support.v7.widget.LinearLayoutManager$AnchorInfo: void reset()>
<com.google.android.gms.maps.internal.zzt$zza: android.os.IBinder asBinder()>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<java.security.SecureRandom: java.security.SecureRandomSpi getSecureRandomSpi()>
<java.security.SecureRandom: java.security.Provider getProvider()>
<android.content.IIntentSender$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.ActivityTransitionCoordinator: void stripOffscreenViews()>
<android.app.ActivityTransitionCoordinator: android.view.Window getWindow()>
<android.app.ActivityTransitionCoordinator: android.view.ViewGroup getDecor()>
<android.app.ActivityTransitionCoordinator: void setEpicenter()>
<com.astuetz.PagerSlidingTabStrip$PagerAdapterObserver: boolean isAttached()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope build()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope buildPartial()>
<android.graphics.drawable.LayerDrawable: void ensurePadding()>
<android.graphics.drawable.LayerDrawable: void refreshPadding()>
<android.view.animation.Animation: void detach()>
<android.view.animation.Animation: boolean isInitialized()>
<android.app.ActivityTransitionCoordinator: android.os.Bundle captureSharedElementState()>
<android.app.ActivityTransitionCoordinator: long getFadeDuration()>
<android.view.animation.Animation: void start()>
<android.view.animation.Animation: boolean isFillEnabled()>
<android.view.animation.Animation: float getScaleFactor()>
<android.view.animation.Animation: long getStartOffset()>
<android.view.animation.Animation: boolean getFillBefore()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.view.animation.Animation: void ensureInterpolator()>
<android.app.ActivityTransitionCoordinator: void transitionStarted()>
<android.app.ActivityTransitionCoordinator: void moveSharedElementsToOverlay()>
<android.app.ActivityTransitionCoordinator: void moveSharedElementsFromOverlay()>
<android.app.ActivityTransitionCoordinator: boolean isViewsTransitionComplete()>
<android.app.ActivityTransitionCoordinator: void viewsTransitionComplete()>
<android.app.ActivityTransitionCoordinator: void pauseInput()>
<android.view.animation.Animation: boolean hasStarted()>
<android.view.animation.Animation: boolean hasEnded()>
<com.android.internal.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()>
<com.google.android.mms.pdu_alt.ReadOrigInd: byte[] getMessageId()>
<android.widget.AbsSeekBar: int getThumbOffset()>
<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>
<android.animation.ValueAnimator: long getDuration()>
<com.google.zxing.common.reedsolomon.GenericGFPoly: int[] getCoefficients()>
<com.google.zxing.common.reedsolomon.GenericGFPoly: int getDegree()>
<com.google.zxing.common.reedsolomon.GenericGFPoly: boolean isZero()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope: boolean isInitialized()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<android.animation.ValueAnimator: int getRepeatCount()>
<android.animation.ValueAnimator: int getRepeatMode()>
<android.animation.ValueAnimator: void removeAllUpdateListeners()>
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>
<android.database.CursorWrapper: void close()>
<android.widget.AbsSeekBar: boolean canUserSetProgress()>
<android.animation.ValueAnimator: boolean isRunning()>
<android.database.CursorWrapper: boolean moveToNext()>
<org.json.JSONStringer: java.lang.String toString()>
<android.animation.ValueAnimator: float getAnimatedFraction()>
<java.util.jar.JarFile$JarEntryIterator: boolean hasNext()>
<android.support.v7.widget.helper.ItemTouchHelper$1: void run()>
<android.support.v4.util.MapCollections$KeySet: java.util.Iterator iterator()>
<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: long bytesRemaining()>
<sun.misc.FDBigInteger: int getNormalizationBias()>
<com.nineoldandroids.animation.Keyframe$IntKeyframe: int getIntValue()>
<android.support.v7.view.menu.MenuPopupHelper$1: void onDismiss()>
<java.math.BigInt: long getNativeBIGNUM()>
<android.icu.text.TransliteratorRegistry: java.util.Enumeration getAvailableSources()>
<sun.misc.FDBigInteger: sun.misc.FDBigInteger multBy10()>
<java.math.BigInt: java.math.BigInt copy()>
<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object removeLast()>
<android.content.res.ColorStateList: int[][] getStates()>
<java.math.BigInt: long longInt()>
<java.math.BigInt: java.lang.String decString()>
<java.math.BigInt: int[] littleEndianIntsMagnitude()>
<java.math.BigInt: int sign()>
<java.math.BigInt: int bitLength()>
<android.support.v7.widget.ActionMenuPresenter$ActionMenuPopupCallback: android.support.v7.view.menu.ShowableListMenu getPopup()>
<android.icu.impl.locale.StringTokenIterator: java.lang.String current()>
<android.icu.impl.locale.StringTokenIterator: int currentStart()>
<android.icu.impl.locale.StringTokenIterator: int currentEnd()>
<android.icu.impl.locale.StringTokenIterator: boolean isDone()>
<android.icu.impl.locale.StringTokenIterator: java.lang.String next()>
<android.icu.impl.locale.StringTokenIterator: boolean hasNext()>
<com.fasterxml.jackson.core.util.JsonParserSequence: boolean switchToNext()>
<org.whispersystems.libsignal.IdentityKeyPair: org.whispersystems.libsignal.ecc.ECPrivateKey getPrivateKey()>
<org.whispersystems.libsignal.IdentityKeyPair: org.whispersystems.libsignal.IdentityKey getPublicKey()>
<sun.misc.FDBigInteger: void makeImmutable()>
<java.util.Collections$SynchronizedCollection: boolean isEmpty()>
<java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
<com.android.internal.telephony.SmsAddress: boolean couldBeEmailGateway()>
<android.media.MediaMetadataRetriever: void release()>
<android.support.v7.widget.RtlSpacingHelper: int getEnd()>
<android.support.v7.widget.RtlSpacingHelper: int getLeft()>
<android.support.v7.widget.RtlSpacingHelper: int getRight()>
<android.support.v7.widget.RtlSpacingHelper: int getStart()>
<java.util.Collections$SynchronizedCollection: void clear()>
<android.graphics.Path: void reset()>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<android.graphics.Path: boolean isEmpty()>
<java.util.Hashtable: boolean isEmpty()>
<java.util.Hashtable: java.util.Enumeration keys()>
<android.graphics.Path: void close()>
<android.view.MenuInflater$MenuState: void resetGroup()>
<java.util.Hashtable: void rehash()>
<android.os.StatFs: int getBlockSize()>
<android.view.MenuInflater$MenuState: android.view.MenuItem addItem()>
<android.view.MenuInflater$MenuState: android.view.SubMenu addSubMenuItem()>
<android.view.MenuInflater$MenuState: boolean hasAddedItem()>
<java.util.Hashtable: java.util.Collection values()>
<android.graphics.Path: long readOnlyNI()>
<android.graphics.Path: long mutateNI()>
<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>
<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>
<java.net.AddressCache: void clear()>
<java.util.zip.ZipFile$ZipEntryIterator: boolean hasNext()>
<com.bumptech.glide.manager.ActivityFragmentLifecycle: void onDestroy()>
<com.bumptech.glide.manager.ActivityFragmentLifecycle: void onStart()>
<com.bumptech.glide.manager.ActivityFragmentLifecycle: void onStop()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions: int getHeightPixels()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions: int getWidthPixels()>
<com.google.zxing.qrcode.decoder.Version$ECB: int getCount()>
<com.google.zxing.qrcode.decoder.Version$ECB: int getDataCodewords()>
<android.view.ViewGroup$TouchTarget: void recycle()>
<com.google.android.exoplayer2.upstream.Loader: void cancelLoading()>
<com.google.android.exoplayer2.upstream.Loader: boolean isLoading()>
<org.thoughtcrime.securesms.database.MessagingDatabase$ExpirationInfo: long getExpireStarted()>
<org.thoughtcrime.securesms.database.MessagingDatabase$ExpirationInfo: long getExpiresIn()>
<org.thoughtcrime.securesms.database.MessagingDatabase$ExpirationInfo: long getId()>
<org.thoughtcrime.securesms.database.MessagingDatabase$ExpirationInfo: boolean isMms()>
<android.net.Uri$Part: java.lang.String getEncoded()>
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>
<android.app.SearchableInfo: boolean useBadgeLabel()>
<android.app.SearchableInfo: boolean useBadgeIcon()>
<org.thoughtcrime.securesms.scribbles.viewmodel.Font: int getColor()>
<org.thoughtcrime.securesms.scribbles.viewmodel.Font: float getSize()>
<android.app.SearchableInfo: int getLabelId()>
<android.app.SearchableInfo: int getIconId()>
<com.dd.CircularProgressButton: int getProgress()>
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>
<android.app.SearchableInfo: int getInputType()>
<android.app.SearchableInfo: int getImeOptions()>
<com.google.android.flexbox.FlexboxHelper: void stretchViews()>
<com.dd.CircularProgressButton: void removeIcon()>
<android.support.v4.app.NotificationCompat$Builder: android.app.Notification build()>
<android.support.v7.widget.Toolbar: void addChildrenForExpandedActionView()>
<android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$BuilderExtender getExtender()>
<android.support.v4.app.NotificationCompat$Builder: android.os.Bundle getExtras()>
<android.support.v7.widget.Toolbar: void collapseActionView()>
<android.support.v7.widget.Toolbar: void ensureCollapseButtonView()>
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>
<android.support.v7.widget.Toolbar: int getContentInsetEnd()>
<okhttp3.HttpUrl$Builder: int effectivePort()>
<android.support.v7.widget.Toolbar: int getContentInsetStart()>
<android.support.v7.widget.Toolbar: int getCurrentContentInsetEnd()>
<android.support.v7.widget.Toolbar: int getCurrentContentInsetLeft()>
<android.support.v7.widget.Toolbar: int getCurrentContentInsetRight()>
<android.support.v7.widget.Toolbar: int getCurrentContentInsetStart()>
<org.thoughtcrime.securesms.scribbles.widget.entity.TextEntity: int getHeight()>
<android.support.v7.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>
<org.thoughtcrime.securesms.scribbles.widget.entity.TextEntity: org.thoughtcrime.securesms.scribbles.viewmodel.TextLayer getLayer()>
<android.support.v7.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>
<org.thoughtcrime.securesms.scribbles.widget.entity.TextEntity: int getWidth()>
<android.support.v7.widget.Toolbar: java.lang.CharSequence getSubtitle()>
<android.support.v7.widget.Toolbar: java.lang.CharSequence getTitle()>
<android.support.v7.widget.Toolbar: int getTitleMarginBottom()>
<android.support.v7.widget.Toolbar: int getTitleMarginEnd()>
<android.support.v7.widget.Toolbar: int getTitleMarginStart()>
<android.support.v7.widget.Toolbar: int getTitleMarginTop()>
<android.support.v7.widget.Toolbar: android.support.v7.widget.DecorToolbar getWrapper()>
<android.support.v7.widget.Toolbar: boolean isOverflowMenuShowing()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void recycle()>
<java.util.Locale$Builder: java.util.Locale build()>
<okhttp3.HttpUrl$Builder: java.lang.String toString()>
<android.text.format.Time: void setToNow()>
<android.support.v7.widget.Toolbar: void removeChildrenForExpandedActionView()>
<android.text.SpannableStringBuilder: void clear()>
<android.text.SpannableStringBuilder: void clearSpans()>
<android.text.style.SpellCheckSpan: boolean isSpellCheckInProgress()>
<android.support.v7.widget.Toolbar: boolean showOverflowMenu()>
<android.util.Property: java.lang.String getName()>
<android.util.Property: java.lang.Class getType()>
<java.util.zip.ZipFile$ZipFileInputStream: long size()>
<sun.security.pkcs.PKCS7: sun.security.pkcs.ContentInfo getContentInfo()>
<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate[] getCertificates()>
<android.widget.DropDownListView$ResolveHoverRunnable: void cancel()>
<android.widget.DropDownListView$ResolveHoverRunnable: void post()>
<org.thoughtcrime.securesms.components.InputPanel$RecordTime: void display()>
<com.google.android.mms.util_alt.PduCacheEntry: int getMessageBox()>
<org.thoughtcrime.securesms.components.InputPanel$RecordTime: long hide()>
<com.google.android.mms.util_alt.PduCacheEntry: com.google.android.mms.pdu_alt.GenericPdu getPdu()>
<com.google.android.mms.util_alt.PduCacheEntry: long getThreadId()>
<com.google.android.flexbox.FlexLine: int getCrossSize()>
<com.google.android.flexbox.FlexLine: int getItemCount()>
<com.google.android.flexbox.FlexLine: int getItemCountNotGone()>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<org.thoughtcrime.securesms.ConversationListAdapter$ViewHolder: org.thoughtcrime.securesms.BindableConversationListItem getItem()>
<sun.security.pkcs.PKCS7: boolean isOldStyle()>
<android.support.v4.view.NestedScrollingParentHelper: int getNestedScrollAxes()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation: long getLatestTimestamp()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation: java.lang.String[] getMessages()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation: java.lang.String[] getParticipants()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()>
<org.thoughtcrime.securesms.preferences.widgets.NotificationPrivacyPreference: boolean isDisplayContact()>
<org.thoughtcrime.securesms.preferences.widgets.NotificationPrivacyPreference: boolean isDisplayMessage()>
<android.view.VelocityTracker: void recycle()>
<android.view.VelocityTracker: void clear()>
<android.media.MediaCodecInfo: java.lang.String getName()>
<android.media.MediaCodecInfo: boolean isEncoder()>
<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>
<android.view.VelocityTracker: float getXVelocity()>
<android.view.VelocityTracker: float getYVelocity()>
<android.media.MediaCodecInfo: android.media.MediaCodecInfo makeRegular()>
<android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState: boolean canConstantState()>
<android.text.SpannableStringBuilder: int getTextWatcherDepth()>
<com.google.android.exoplayer2.upstream.DefaultDataSourceFactory: com.google.android.exoplayer2.upstream.DefaultDataSource createDataSource()>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: void recycle()>
<android.content.res.TypedArray: int[] extractThemeAttrs()>
<java.util.Calendar: java.util.Date getTime()>
<java.util.Calendar: long getTimeInMillis()>
<android.content.res.TypedArray: int getChangingConfigurations()>
<java.util.Calendar: void clear()>
<android.content.res.TypedArray: java.lang.String toString()>
<android.icu.impl.TextTrieMap$Node: java.util.Iterator values()>
<java.io.ByteArrayInputStream: void reset()>
<java.util.Calendar: void complete()>
<java.util.Calendar: int getSetStateFields()>
<java.util.Calendar: boolean isPartiallyNormalized()>
<java.util.Calendar: boolean isFullyNormalized()>
<java.util.Calendar: int selectFields()>
<android.os.BaseBundle: void unparcel()>
<android.os.BaseBundle: boolean isParcelled()>
<android.os.BaseBundle: boolean isEmptyParcel()>
<android.os.BaseBundle: int size()>
<java.util.Calendar: java.util.TimeZone getZone()>
<android.os.BaseBundle: boolean isEmpty()>
<java.util.Calendar: boolean isLenient()>
<java.util.Calendar: int getFirstDayOfWeek()>
<java.util.Calendar: int getMinimalDaysInFirstWeek()>
<android.os.BaseBundle: java.util.Set keySet()>
<android.support.v7.widget.RoundRectDrawable: android.content.res.ColorStateList getColor()>
<android.support.v7.widget.RoundRectDrawable: float getPadding()>
<android.support.v7.widget.RoundRectDrawable: float getRadius()>
<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
<java.nio.HeapByteBuffer: java.nio.ByteBuffer compact()>
<com.google.android.exoplayer2.util.ConditionVariable: boolean close()>
<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>
<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>
<com.google.android.exoplayer2.util.ConditionVariable: boolean open()>
<sun.security.x509.CertificateExtensions: boolean hasUnsupportedCriticalExtension()>
<java.util.BitSet: void clear()>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase$GroupReceiptInfo: org.thoughtcrime.securesms.database.Address getAddress()>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase$GroupReceiptInfo: int getStatus()>
<org.thoughtcrime.securesms.database.GroupReceiptDatabase$GroupReceiptInfo: long getTimestamp()>
<com.google.zxing.qrcode.decoder.Version$ECBlocks: com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks()>
<com.google.zxing.qrcode.decoder.Version$ECBlocks: int getECCodewordsPerBlock()>
<com.google.zxing.qrcode.decoder.Version$ECBlocks: int getNumBlocks()>
<com.google.zxing.qrcode.decoder.Version$ECBlocks: int getTotalECCodewords()>
<org.webrtc.VideoRenderer: void dispose()>
<java.util.BitSet: int length()>
<org.thoughtcrime.securesms.util.views.Stub: java.lang.Object get()>
<java.util.BitSet: int cardinality()>
<org.thoughtcrime.securesms.util.views.Stub: boolean resolved()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: int getDayOfMonth()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: int getLayoutId()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: int getMonthOfYear()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: int getYear()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.type.TypeBindings bindingsForBeanType()>
<java.net.SocksSocketImpl: int getPort()>
<java.net.SocksSocketImpl: int getLocalPort()>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: android.view.accessibility.AccessibilityNodeInfo unwrap()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: void reset()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.Map findBackReferenceProperties()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: void setLeftRightEnabled()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor findDefaultConstructor()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Converter findDeserializationConverter()>
<com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions: com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions crossFade()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: void updateDate()>
<com.doomonafireball.betterpickers.datepicker.DatePicker: void updateDeleteButton()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.Map findInjectables()>
<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isHeldExclusively()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedMethod findJsonValueMethod()>
<com.google.protobuf.LazyField$LazyEntry: com.google.protobuf.LazyField getField()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.lang.Class findPOJOBuilder()>
<java.util.concurrent.ThreadPoolExecutor$Worker: void lock()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder$Value findPOJOBuilderConfig()>
<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryLock()>
<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>
<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.List findProperties()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Converter findSerializationConverter()>
<android.icu.text.PluralRules$Rule: java.lang.String getKeyword()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.util.Annotations getClassAnnotations()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassInfo()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.List getConstructors()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: java.util.Set getIgnoredPropertyNames()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<com.fasterxml.jackson.databind.introspect.BasicBeanDescription: boolean hasKnownClassAnnotations()>
<java.io.File: boolean isInvalid()>
<java.io.File: int getPrefixLength()>
<com.annimon.stream.operator.ObjConcat: void nextIteration()>
<android.content.res.ResourcesImpl$ThemeImpl: android.content.res.Resources$ThemeKey getKey()>
<android.app.ResourcesManager: android.content.res.Configuration getConfiguration()>
<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetrics()>
<java.io.File: java.lang.String getName()>
<java.io.File: java.lang.String getParent()>
<java.io.File: java.io.File getParentFile()>
<java.io.File: java.lang.String getPath()>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: java.io.File getAbsoluteFile()>
<java.io.File: java.net.URI toURI()>
<java.io.File: boolean canRead()>
<java.io.File: boolean canWrite()>
<java.util.zip.Inflater: int getRemaining()>
<java.io.File: boolean exists()>
<java.util.zip.Inflater: boolean needsInput()>
<java.io.File: boolean isDirectory()>
<java.util.zip.Inflater: boolean needsDictionary()>
<java.io.File: boolean isFile()>
<java.util.zip.Inflater: boolean finished()>
<java.io.File: boolean isHidden()>
<java.io.File: long lastModified()>
<java.io.File: long length()>
<java.io.File: boolean delete()>
<java.io.File: java.lang.String[] list()>
<android.content.res.ResourcesImpl$ThemeImpl: void rebase()>
<java.util.zip.Inflater: long getBytesWritten()>
<java.util.zip.Inflater: void reset()>
<java.io.File: java.io.File[] listFiles()>
<java.util.zip.Inflater: void end()>
<java.util.zip.Inflater: boolean ended()>
<java.io.File: boolean mkdir()>
<java.io.File: boolean mkdirs()>
<android.icu.text.UnicodeSet: java.lang.Object clone()>
<java.io.File: boolean setReadOnly()>
<android.icu.impl.RuleCharacterIterator: boolean atEnd()>
<android.icu.impl.RuleCharacterIterator: boolean isEscaped()>
<android.icu.impl.RuleCharacterIterator: boolean inVariable()>
<android.icu.impl.RuleCharacterIterator: java.lang.String lookahead()>
<android.icu.text.UnicodeSet: boolean isEmpty()>
<android.icu.impl.RuleCharacterIterator: java.lang.String toString()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] contentsAsArray()>
<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>
<com.google.protobuf.DynamicMessage$Builder: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<com.google.protobuf.DynamicMessage$Builder: boolean isInitialized()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] getCurrentSegment()>
<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>
<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentTransaction beginTransaction()>
<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>
<com.fasterxml.jackson.core.util.TextBuffer: void releaseBuffers()>
<com.fasterxml.jackson.core.util.TextBuffer: void resetWithEmpty()>
<com.fasterxml.jackson.core.util.TextBuffer: int size()>
<com.soundcloud.android.crop.CropImageView: android.graphics.Matrix getUnrotatedMatrix()>
<android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()>
<android.support.v4.app.FragmentManagerImpl: void dispatchCreate()>
<android.bluetooth.BluetoothPan: boolean doBind()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet complement()>
<android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()>
<android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: boolean isChild()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: android.view.Window getWindow()>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder: void _reset()>
<org.thoughtcrime.securesms.ConversationListFragment$1: void onDismiss()>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder: int bufferedSize()>
<com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder: java.lang.Object resetAndStart()>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$RecordStructure build()>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$RecordStructure buildPartial()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet clear()>
<android.icu.text.UnicodeSet: int getRangeCount()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet compact()>
<java.util.ServiceLoader$LazyIterator: boolean hasNext()>
<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>
<android.support.v4.app.FragmentManagerImpl: void dispatchPause()>
<android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()>
<android.support.v4.app.FragmentManagerImpl: void dispatchResume()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.support.v4.app.FragmentManagerImpl: void dispatchStart()>
<android.support.v4.app.FragmentManagerImpl: void dispatchStop()>
<android.support.v4.app.FragmentManagerImpl: void doPendingDeferredStart()>
<org.thoughtcrime.securesms.mms.SlideDeck: java.util.List asAttachments()>
<org.thoughtcrime.securesms.mms.SlideDeck: org.thoughtcrime.securesms.mms.AudioSlide getAudioSlide()>
<org.thoughtcrime.securesms.mms.SlideDeck: java.lang.String getBody()>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<org.thoughtcrime.securesms.mms.SlideDeck: org.thoughtcrime.securesms.mms.DocumentSlide getDocumentSlide()>
<org.thoughtcrime.securesms.mms.SlideDeck: java.util.List getSlides()>
<org.thoughtcrime.securesms.mms.SlideDeck: org.thoughtcrime.securesms.mms.Slide getThumbnailSlide()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected: long getId()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected: boolean hasId()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected: boolean isInitialized()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder toBuilder()>
<com.google.android.mms.pdu_alt.EncodedStringValue: int getCharacterSet()>
<com.google.android.mms.pdu_alt.EncodedStringValue: java.lang.String getString()>
<com.google.android.mms.pdu_alt.EncodedStringValue: byte[] getTextString()>
<android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: boolean onNavigateUp()>
<android.support.v4.app.FragmentManagerImpl: int getBackStackEntryCount()>
<com.fasterxml.jackson.databind.introspect.AnnotationMap: int size()>
<org.thoughtcrime.securesms.database.MessagingDatabase$InsertResult: long getThreadId()>
<android.support.v4.app.FragmentManagerImpl: java.util.List getFragments()>
<android.support.v4.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()>
<android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getPrimaryNavigationFragment()>
<android.support.v4.app.FragmentManagerImpl: boolean isStateSaved()>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.graphics.drawable.StateListDrawable: int getStateCount()>
<android.support.v4.app.FragmentController: void dispatchActivityCreated()>
<android.support.v4.app.FragmentController: void dispatchCreate()>
<android.support.v4.app.FragmentController: void dispatchDestroy()>
<android.support.v4.app.FragmentController: void dispatchPause()>
<android.support.v4.app.FragmentController: void dispatchReallyStop()>
<android.support.v4.app.FragmentController: void dispatchResume()>
<android.support.v4.app.FragmentController: void dispatchStart()>
<android.support.v4.app.FragmentController: void dispatchStop()>
<android.support.v4.app.FragmentController: void doLoaderDestroy()>
<android.support.v4.app.FragmentController: void doLoaderStart()>
<android.icu.text.UnicodeSet: boolean isFrozen()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet freeze()>
<android.support.v4.app.FragmentController: boolean execPendingActions()>
<android.support.v4.app.FragmentController: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<android.support.v4.app.FragmentController: android.support.v4.app.LoaderManager getSupportLoaderManager()>
<android.support.v4.app.FragmentController: void noteStateNotSaved()>
<android.support.v4.app.FragmentController: void reportLoaderStart()>
<android.app.Activity: android.net.Uri onProvideReferrer()>
<java.net.InetSocketAddress$InetSocketAddressHolder: java.lang.String toString()>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isDestroyed()>
<android.app.Activity: void recreate()>
<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>
<android.app.Activity: void finish()>
<android.app.Activity: void finishAffinity()>
<android.app.Activity: void finishAfterTransition()>
<org.thoughtcrime.securesms.SmsSendtoActivity$DestinationAndBody: java.lang.String getBody()>
<org.thoughtcrime.securesms.SmsSendtoActivity$DestinationAndBody: java.lang.String getDestination()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: int getTransformationType()>
<com.fasterxml.jackson.databind.deser.UnresolvedId: java.lang.String toString()>
<android.icu.text.UnicodeSet: android.icu.text.UnicodeSet cloneAsThawed()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.app.Activity: int getRequestedOrientation()>
<android.support.v7.preference.PreferenceGroupAdapter$2: int getNewListSize()>
<android.support.v7.preference.PreferenceGroupAdapter$2: int getOldListSize()>
<android.view.animation.Transformation: android.graphics.Rect getClipRect()>
<android.view.animation.Transformation: float getAlpha()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<com.google.protobuf.DescriptorProtos$ServiceOptions: int getUninterpretedOptionCount()>
<libcore.util.ZoneInfoDB$TzData: java.lang.String[] getAvailableIDs()>
<libcore.util.ZoneInfoDB$TzData: void close()>
<android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()>
<android.app.Activity: int getVolumeControlStream()>
<android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()>
<org.thoughtcrime.securesms.webrtc.audio.BluetoothStateManager: void onDestroy()>
<android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>
<java.lang.Class: boolean isInterface()>
<android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()>
<java.lang.Class: boolean isArray()>
<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<android.arch.core.internal.SafeIterableMap: int size()>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.io.ObjectStreamClass: java.lang.String getName()>
<java.io.ObjectStreamClass: long getSerialVersionUID()>
<java.io.ObjectStreamClass: java.lang.Class forClass()>
<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<com.android.internal.widget.ActionBarContextView: void closeMode()>
<java.lang.Class: java.lang.Package getPackage()>
<com.android.internal.widget.ActionBarContextView: void killMode()>
<java.lang.Class: java.lang.String getPackageName$()>
<java.lang.Class: java.lang.Class[] getInterfaces()>
<android.media.Cea608CCParser$PAC: boolean isIndentPAC()>
<android.media.Cea608CCParser$PAC: int getRow()>
<android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()>
<android.media.Cea608CCParser$PAC: int getCol()>
<android.media.Cea608CCParser$PAC: java.lang.String toString()>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<android.app.Activity: android.app.ActivityOptions getActivityOptions()>
<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: int getModifiers()>
<android.os.Bundle: java.lang.Object clone()>
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.lang.Class: java.lang.String getSimpleName()>
<org.thoughtcrime.securesms.database.model.MmsMessageRecord: org.thoughtcrime.securesms.mms.SlideDeck getSlideDeck()>
<android.icu.text.UCharacterIterator: int nextCodePoint()>
<java.lang.Class: java.lang.String getCanonicalName()>
<android.icu.text.UCharacterIterator: void setToStart()>
<android.icu.text.UCharacterIterator: java.lang.String getText()>
<java.lang.Class: boolean isAnonymousClass()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: boolean isMemberClass()>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<com.google.android.exoplayer2.upstream.DefaultBandwidthMeter: long getBitrateEstimate()>
<android.support.v4.app.FragmentManagerImpl: void popBackStack()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<android.support.v4.app.FragmentManagerImpl: boolean popBackStackImmediate()>
<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>
<java.lang.Class: boolean desiredAssertionStatus()>
<java.lang.Class: boolean isEnum()>
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>
<android.media.MediaPlayer$TrackInfo: int getTrackType()>
<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>
<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>
<android.app.Activity: android.os.IBinder getActivityToken()>
<java.io.ObjectStreamClass: boolean isProxy()>
<java.io.ObjectStreamClass: boolean isEnum()>
<java.io.ObjectStreamClass: boolean isExternalizable()>
<java.io.ObjectStreamClass: boolean hasBlockExternalData()>
<java.io.ObjectStreamClass: boolean hasWriteObjectData()>
<java.io.ObjectStreamClass: boolean isInstantiable()>
<java.io.ObjectStreamClass: boolean hasWriteObjectMethod()>
<java.io.ObjectStreamClass: boolean hasReadObjectMethod()>
<java.io.ObjectStreamClass: boolean hasReadObjectNoDataMethod()>
<java.io.ObjectStreamClass: boolean hasWriteReplaceMethod()>
<java.io.ObjectStreamClass: boolean hasReadResolveMethod()>
<android.support.v4.app.FragmentManagerImpl: void reportBackStackChanged()>
<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Class: boolean isProxy()>
<java.lang.Class: com.android.dex.Dex getDex()>
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>
<java.util.logging.Logger: java.lang.String getResourceBundleName()>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay: void setActiveCall()>
<org.thoughtcrime.securesms.components.webrtc.WebRtcIncomingCallOverlay: void setIncomingCall()>
<java.io.ObjectStreamClass: int getPrimDataSize()>
<java.io.ObjectStreamClass: int getNumObjFields()>
<com.google.android.exoplayer2.upstream.HttpDataSource$RequestProperties: java.util.Map getSnapshot()>
<java.lang.String: boolean isEmpty()>
<com.google.android.exoplayer2.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecProfileLevel[] getProfileLevels()>
<org.thoughtcrime.securesms.database.RecipientDatabase$BulkOperationsHandle: void finish()>
<android.icu.impl.TimeZoneGenericNames$Pattern: java.lang.String key()>
<android.icu.impl.TimeZoneGenericNames$Pattern: java.lang.String defaultValue()>
<java.lang.String: byte[] getBytes()>
<sun.security.x509.CertificateX509Key: java.lang.String toString()>
<java.util.logging.Logger: boolean isLevelInitialized()>
<java.util.logging.Logger: java.lang.String getName()>
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>
<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>
<java.util.logging.Logger: boolean getUseParentHandlers()>
<android.support.v4.app.OneShotPreDrawListener: void removeListener()>
<android.view.OrientationEventListener: void disable()>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<java.util.WeakHashMap$HashIterator: java.util.WeakHashMap$Entry nextEntry()>
<com.bumptech.glide.module.ManifestParser: java.util.List parse()>
<android.view.ActionMode: int getType()>
<java.lang.String: java.lang.String toLowerCase()>
<java.lang.String: java.lang.String toUpperCase()>
<java.lang.String: java.lang.String trim()>
<java.lang.String: char[] toCharArray()>
<java.lang.String: java.lang.String intern()>
<com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet build()>
<android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()>
<android.bluetooth.BluetoothHeadset: boolean doBind()>
<org.thoughtcrime.securesms.components.emoji.StaticEmojiPageModel: java.lang.String[] getEmoji()>
<org.thoughtcrime.securesms.components.emoji.StaticEmojiPageModel: java.lang.String getSprite()>
<org.thoughtcrime.securesms.components.emoji.StaticEmojiPageModel: boolean hasSpriteMap()>
<android.support.v7.widget.CardView: boolean getPreventCornerOverlap()>
<android.support.v7.widget.CardView: boolean getUseCompatPadding()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: boolean isShared()>
<org.whispersystems.libsignal.state.SessionState: int getSessionVersion()>
<org.whispersystems.libsignal.state.SessionState: org.whispersystems.libsignal.state.StorageProtos$SessionStructure getStructure()>
<org.whispersystems.libsignal.state.SessionState: boolean hasSenderChain()>
<org.thoughtcrime.securesms.scribbles.widget.MotionView: org.thoughtcrime.securesms.scribbles.widget.entity.MotionEntity getSelectedEntity()>
<org.thoughtcrime.securesms.scribbles.widget.MotionView: void unselectEntity()>
<android.support.v7.widget.ViewStubCompat: android.view.View inflate()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getContentType()>
<org.thoughtcrime.securesms.attachments.Attachment: byte[] getDigest()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getFastPreflightId()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getFileName()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getKey()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getLocation()>
<org.thoughtcrime.securesms.attachments.Attachment: java.lang.String getRelay()>
<org.thoughtcrime.securesms.attachments.Attachment: long getSize()>
<org.thoughtcrime.securesms.attachments.Attachment: int getTransferState()>
<org.thoughtcrime.securesms.attachments.Attachment: boolean isInProgress()>
<org.thoughtcrime.securesms.attachments.Attachment: boolean isVoiceNote()>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.widget.PopupWindow: int getInputMethodMode()>
<android.widget.PopupWindow: boolean isSplitTouchEnabled()>
<android.widget.PopupWindow: int getHeight()>
<android.widget.PopupWindow: int getWidth()>
<android.widget.PopupWindow: boolean isShowing()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope build()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionEnvelope buildPartial()>
<android.graphics.drawable.LayerDrawable$ChildDrawable: boolean canApplyTheme()>
<android.widget.PopupWindow: boolean isAboveAnchor()>
<android.support.v4.widget.SwipeRefreshLayout: boolean canChildScrollUp()>
<android.graphics.drawable.AnimationDrawable: boolean isRunning()>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()>
<org.xml.sax.InputSource: java.lang.String getPublicId()>
<org.xml.sax.InputSource: java.lang.String getSystemId()>
<org.xml.sax.InputSource: java.io.InputStream getByteStream()>
<org.xml.sax.InputSource: java.lang.String getEncoding()>
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>
<android.support.v7.widget.ViewInfoStore: void clear()>
<android.support.v7.widget.ViewInfoStore: void onDetach()>
<android.support.design.widget.DirectedAcyclicGraph: void clear()>
<android.support.design.widget.DirectedAcyclicGraph: java.util.ArrayList getSortedList()>
<android.support.v4.widget.SwipeRefreshLayout: void reset()>
<android.icu.impl.LocaleIDParser: java.lang.String getLanguage()>
<android.icu.impl.LocaleIDParser: java.lang.String getScript()>
<android.icu.impl.LocaleIDParser: java.lang.String getCountry()>
<android.icu.impl.LocaleIDParser: java.lang.String getVariant()>
<android.icu.impl.LocaleIDParser: java.lang.String[] getLanguageScriptCountryVariant()>
<android.icu.impl.LocaleIDParser: void parseBaseName()>
<android.icu.impl.LocaleIDParser: java.lang.String getBaseName()>
<android.icu.impl.LocaleIDParser: java.lang.String getName()>
<android.icu.impl.LocaleIDParser: java.util.Map getKeywordMap()>
<org.greenrobot.eventbus.PendingPostQueue: org.greenrobot.eventbus.PendingPost poll()>
<android.icu.impl.LocaleIDParser: java.util.Iterator getKeywords()>
<android.support.v7.app.AlertController: android.widget.ListView getListView()>
<android.support.v7.app.AlertController: void installContent()>
<java.math.BigDecimal: java.math.BigDecimal abs()>
<java.math.BigDecimal: java.math.BigDecimal negate()>
<java.math.BigDecimal: int signum()>
<java.math.BigDecimal: int scale()>
<java.math.BigDecimal: int precision()>
<java.math.BigDecimal: java.math.BigInteger unscaledValue()>
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType rootElementType()>
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()>
<org.ccil.cowan.tagsoup.Schema: java.lang.String getPrefix()>
<com.google.protobuf.SmallSortedMap$1: void makeImmutable()>
<dagger.internal.ArrayQueue: java.lang.Object poll()>
<java.math.BigDecimal: java.math.BigDecimal stripTrailingZeros()>
<android.support.v7.view.menu.MenuAdapter: void findExpandedIndex()>
<com.android.internal.view.IInputConnectionWrapper: android.view.inputmethod.InputConnection getInputConnection()>
<android.support.v7.view.menu.MenuAdapter: android.support.v7.view.menu.MenuBuilder getAdapterMenu()>
<com.android.internal.view.IInputConnectionWrapper: boolean isFinished()>
<com.android.internal.view.IInputConnectionWrapper: java.lang.String getInputMethodId()>
<java.math.BigDecimal: java.lang.String toPlainString()>
<com.takisoft.colorpicker.ColorPickerDialog: void showPaletteView()>
<android.support.v7.view.menu.MenuAdapter: void notifyDataSetChanged()>
<java.math.BigDecimal: java.math.BigInteger toBigInteger()>
<android.icu.util.TimeZoneTransition: long getTime()>
<android.icu.util.TimeZoneTransition: android.icu.util.TimeZoneRule getTo()>
<android.icu.util.TimeZoneTransition: android.icu.util.TimeZoneRule getFrom()>
<com.android.internal.view.IInputConnectionWrapper: void finishComposingText()>
<com.android.internal.view.IInputConnectionWrapper: void closeConnection()>
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer: org.thoughtcrime.securesms.mms.AudioSlide getAudioSlide()>
<android.content.pm.ApplicationInfo: boolean isSystemApp()>
<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>
<android.widget.RelativeLayout$DependencyGraph: void clear()>
<org.thoughtcrime.securesms.audio.AudioSlidePlayer: void stop()>
<com.google.android.flexbox.FlexboxHelper$FlexLinesResult: void reset()>
<com.google.android.mms.pdu_alt.PduPart: int getCharset()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getContentDisposition()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getContentId()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getContentLocation()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getContentTransferEncoding()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getContentType()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getData()>
<com.google.android.mms.pdu_alt.PduPart: int getDataLength()>
<com.google.android.mms.pdu_alt.PduPart: android.net.Uri getDataUri()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getFilename()>
<com.google.android.mms.pdu_alt.PduPart: byte[] getName()>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>
<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()>
<android.support.design.widget.TabLayout$Tab: java.lang.CharSequence getContentDescription()>
<android.support.design.widget.TabLayout$Tab: android.view.View getCustomView()>
<android.support.design.widget.TabLayout$Tab: android.graphics.drawable.Drawable getIcon()>
<android.support.design.widget.TabLayout$Tab: int getPosition()>
<android.support.design.widget.TabLayout$Tab: java.lang.CharSequence getText()>
<android.support.design.widget.TabLayout$Tab: boolean isSelected()>
<android.support.design.widget.TabLayout$Tab: void reset()>
<android.support.design.widget.TabLayout$Tab: void select()>
<com.google.protobuf.DescriptorProtos$EnumOptions: boolean getAllowAlias()>
<com.google.protobuf.DescriptorProtos$EnumOptions: int getUninterpretedOptionCount()>
<com.google.protobuf.DescriptorProtos$EnumOptions: boolean hasAllowAlias()>
<android.support.design.widget.TabLayout$Tab: void updateView()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.String getName()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: com.fasterxml.jackson.databind.JavaType getSerializationType()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: java.lang.Class[] getViews()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean hasNullSerializer()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean hasSerializer()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedThreads()>
<android.icu.impl.CalendarAstronomer: double getJulianDay()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean apparentlyFirstQueuedIsExclusive()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedPredecessors()>
<com.fasterxml.jackson.databind.ser.BeanPropertyWriter: boolean willSuppressNulls()>
<android.icu.impl.CalendarAstronomer: double getSunLongitude()>
<org.spongycastle.util.encoders.HexEncoder: void initialiseDecodingTable()>
<android.icu.impl.CalendarAstronomer: android.icu.impl.CalendarAstronomer$Equatorial getMoonPosition()>
<android.icu.impl.CalendarAstronomer: double getMoonAge()>
<java.util.Formatter$FormatSpecifier$BigDecimalLayout: boolean hasDot()>
<java.util.Formatter$FormatSpecifier$BigDecimalLayout: int scale()>
<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] mantissa()>
<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] exponent()>
<android.view.animation.BaseInterpolator: int getChangingConfiguration()>
<android.view.animation.AnimationSet: void restoreChildrenStartOffset()>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
<android.widget.FastScroller: boolean isEnabled()>
<android.widget.FastScroller: boolean isAlwaysShowEnabled()>
<android.widget.FastScroller: void stop()>
<java.security.MessageDigest$Delegate: byte[] engineDigest()>
<java.security.MessageDigest$Delegate: void engineReset()>
<android.widget.FastScroller: int getWidth()>
<org.thoughtcrime.securesms.MessageDetailsRecipientAdapter$RecipientDeliveryStatus: org.thoughtcrime.securesms.MessageDetailsRecipientAdapter$RecipientDeliveryStatus$Status getDeliveryStatus()>
<android.widget.FastScroller: void updateLayout()>
<org.thoughtcrime.securesms.MessageDetailsRecipientAdapter$RecipientDeliveryStatus: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<com.fasterxml.jackson.core.JsonLocation: long getByteOffset()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo getEmoji()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$EmojiTreeNode: boolean isEndOfEmoji()>
<com.bumptech.glide.manager.RequestManagerFragment: com.bumptech.glide.manager.ActivityFragmentLifecycle getGlideLifecycle()>
<com.bumptech.glide.manager.RequestManagerFragment: com.bumptech.glide.RequestManager getRequestManager()>
<com.bumptech.glide.manager.RequestManagerFragment: com.bumptech.glide.manager.RequestManagerTreeNode getRequestManagerTreeNode()>
<org.whispersystems.signalservice.internal.configuration.SignalServiceConfiguration: org.whispersystems.signalservice.internal.configuration.SignalCdnUrl[] getSignalCdnUrls()>
<org.whispersystems.signalservice.internal.configuration.SignalServiceConfiguration: org.whispersystems.signalservice.internal.configuration.SignalServiceUrl[] getSignalServiceUrls()>
<org.thoughtcrime.securesms.service.RegistrationService: org.thoughtcrime.securesms.service.RegistrationService$RegistrationState getRegistrationState()>
<org.thoughtcrime.securesms.service.RegistrationService: int getSecondsRemaining()>
<android.graphics.drawable.RippleBackground: boolean isVisible()>
<java.util.zip.CRC32: void reset()>
<java.util.zip.CRC32: long getValue()>
<org.thoughtcrime.securesms.service.RegistrationService: void shutdown()>
<android.widget.FastScroller: void onSectionsChanged()>
<com.google.android.mms.pdu_alt.PduPersister: void release()>
<android.app.BackStackRecord: int commit()>
<android.app.BackStackRecord: int commitAllowingStateLoss()>
<android.app.ActivityTransitionCoordinator$GhostViewListeners: android.view.View getView()>
<com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator: java.util.Collection properties()>
<android.graphics.Canvas: long getNativeCanvasWrapper()>
<android.graphics.Canvas: int getWidth()>
<android.graphics.Canvas: int getHeight()>
<android.support.v4.util.ArrayMap: java.util.Set entrySet()>
<android.graphics.Canvas: int getDensity()>
<android.support.v4.util.ArrayMap: java.util.Set keySet()>
<android.graphics.Canvas: int save()>
<android.support.v4.util.ArrayMap: java.util.Collection values()>
<android.widget.OverScroller$SplineOverScroller: void finish()>
<android.graphics.Canvas: void restore()>
<android.graphics.Canvas: int getSaveCount()>
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()>
<android.database.AbstractWindowedCursor: void checkPosition()>
<android.database.AbstractWindowedCursor: void closeWindow()>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: float getRadius()>
<android.support.design.widget.FloatingActionButton$ShadowDelegateImpl: boolean isCompatPaddingEnabled()>
<okio.Segment: okio.Segment pop()>
<android.widget.OverScroller$SplineOverScroller: boolean continueWhenFinished()>
<org.webrtc.GlShader: void release()>
<android.widget.OverScroller$SplineOverScroller: boolean update()>
<org.webrtc.GlShader: void useProgram()>
<com.google.protobuf.DescriptorProtos$FieldOptions: com.google.protobuf.DescriptorProtos$FieldOptions$CType getCtype()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean getDeprecated()>
<com.google.protobuf.DescriptorProtos$FieldOptions: com.google.protobuf.ByteString getExperimentalMapKeyBytes()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean getLazy()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean getPacked()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<com.google.protobuf.DescriptorProtos$FieldOptions: int getUninterpretedOptionCount()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean getWeak()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasCtype()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasDeprecated()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasExperimentalMapKey()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasLazy()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasPacked()>
<android.os.ParcelFileDescriptor: void releaseResources()>
<android.app.BackStackRecord: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$FieldOptions: boolean hasWeak()>
<java.net.URL: java.lang.String getQuery()>
<java.net.URL: java.lang.String getPath()>
<java.net.URL: java.lang.String getUserInfo()>
<java.net.URL: java.lang.String getAuthority()>
<java.net.URL: int getPort()>
<java.net.URL: int getDefaultPort()>
<android.os.ParcelFileDescriptor: boolean canDetectErrors()>
<java.net.URL: java.lang.String getProtocol()>
<java.net.URL: java.lang.String getHost()>
<java.net.URL: java.lang.String getFile()>
<java.net.URL: java.lang.String getRef()>
<java.net.URL: java.lang.String toExternalForm()>
<java.util.concurrent.locks.ReentrantLock$Sync: boolean isHeldExclusively()>
<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>
<android.graphics.Canvas: void release()>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<org.thoughtcrime.securesms.LogSubmitActivity: void onCancel()>
<org.thoughtcrime.securesms.LogSubmitActivity: void onFailure()>
<org.thoughtcrime.securesms.LogSubmitActivity: void onSuccess()>
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void reset()>
<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer buildPartial()>
<android.support.v7.widget.ToolbarWidgetWrapper: void dismissPopupMenus()>
<android.support.v7.widget.ToolbarWidgetWrapper: android.content.Context getContext()>
<android.support.v7.widget.ToolbarWidgetWrapper: android.view.View getCustomView()>
<android.support.v7.widget.ToolbarWidgetWrapper: int getDisplayOptions()>
<android.support.v7.widget.ToolbarWidgetWrapper: android.view.Menu getMenu()>
<com.google.android.gles_jni.EGLImpl: int eglGetError()>
<android.support.v7.widget.ToolbarWidgetWrapper: int getNavigationMode()>
<android.support.v7.widget.ToolbarWidgetWrapper: java.lang.CharSequence getTitle()>
<android.support.v7.widget.ToolbarWidgetWrapper: android.view.ViewGroup getViewGroup()>
<android.support.v7.widget.ToolbarWidgetWrapper: boolean isOverflowMenuShowing()>
<sun.security.x509.SerialNumber: java.lang.String toString()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart: boolean getIsExtension()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart: com.google.protobuf.ByteString getNamePartBytes()>
<sun.security.x509.SerialNumber: java.math.BigInteger getNumber()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart: boolean hasIsExtension()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption$NamePart: boolean hasNamePart()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>
<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>
<android.app.ActivityThread: android.os.Handler getHandler()>
<android.support.v7.widget.ToolbarWidgetWrapper: void setMenuPrepared()>
<android.widget.ListView$FocusSelector: void onLayoutComplete()>
<android.support.v7.widget.ToolbarWidgetWrapper: boolean showOverflowMenu()>
<com.google.android.gms.common.internal.zzj$1: void zzauo()>
<android.support.v7.widget.GridLayout$LayoutParams: int hashCode()>
<android.animation.PropertyValuesHolder: void init()>
<sun.util.calendar.ImmutableGregorianDate: int getYear()>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<sun.util.calendar.ImmutableGregorianDate: int getMonth()>
<sun.util.calendar.ImmutableGregorianDate: int getDayOfMonth()>
<android.animation.PropertyValuesHolder: java.lang.Class getValueType()>
<android.animation.PropertyValuesHolder: java.lang.String toString()>
<sun.util.calendar.ImmutableGregorianDate: long getTimeOfDay()>
<android.app.ActivityThread: android.app.Application getApplication()>
<android.telephony.SmsManager: int getSubscriptionId()>
<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>
<org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$CandidateList: java.util.Iterator iterator()>
<dalvik.system.CloseGuard: void close()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$CandidateList: int size()>
<dalvik.system.CloseGuard: void warnIfOpen()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$BooleanBuilder getBooleanBuilder()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$ByteBuilder getByteBuilder()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$DoubleBuilder getDoubleBuilder()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder getFloatBuilder()>
<android.icu.util.EthiopicCalendar: boolean isAmeteAlemEra()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$IntBuilder getIntBuilder()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$LongBuilder getLongBuilder()>
<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$ShortBuilder getShortBuilder()>
<com.android.mms.service_alt.SubscriptionIdChecker: boolean canUseSubscriptionId()>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: long getRendererOffset()>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: boolean isFullyBuffered()>
<com.google.android.exoplayer2.ExoPlayerImplInternal$MediaPeriodHolder: void release()>
<android.support.design.widget.ViewOffsetHelper: int getLayoutTop()>
<android.support.design.widget.ViewOffsetHelper: void onViewLayout()>
<com.bumptech.glide.provider.ImageHeaderParserRegistry: java.util.List getParsers()>
<android.support.v7.widget.RoundRectDrawableWithShadow: android.content.res.ColorStateList getColor()>
<android.support.v7.widget.RoundRectDrawableWithShadow: float getCornerRadius()>
<android.support.v7.widget.RoundRectDrawableWithShadow: float getMaxShadowSize()>
<android.support.v7.widget.RoundRectDrawableWithShadow: float getMinHeight()>
<android.support.v7.widget.RoundRectDrawableWithShadow: float getMinWidth()>
<android.support.v7.widget.RoundRectDrawableWithShadow: float getShadowSize()>
<android.util.SizeF: float getWidth()>
<android.util.SizeF: float getHeight()>
<com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter: boolean isInline()>
<org.whispersystems.signalservice.internal.configuration.SignalUrl: org.whispersystems.libsignal.util.guava.Optional getConnectionSpecs()>
<org.whispersystems.signalservice.internal.configuration.SignalUrl: org.whispersystems.libsignal.util.guava.Optional getHostHeader()>
<org.whispersystems.signalservice.internal.configuration.SignalUrl: org.whispersystems.signalservice.api.push.TrustStore getTrustStore()>
<org.whispersystems.signalservice.internal.configuration.SignalUrl: java.lang.String getUrl()>
<java.lang.ThreadLocal: java.lang.Object get()>
<java.lang.ThreadLocal: void remove()>
<com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledByDefault()>
<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>
<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>
<sun.security.x509.X509Key: sun.security.util.BitArray getKey()>
<java.net.InetAddress: java.lang.String getHostName()>
<android.icu.text.PluralRanges: android.icu.text.PluralRanges freeze()>
<sun.security.x509.X509Key: byte[] getEncoded()>
<sun.security.x509.X509Key: java.lang.String toString()>
<android.support.v7.app.AppCompatDialog: android.support.v7.app.AppCompatDelegate getDelegate()>
<org.thoughtcrime.securesms.database.MediaDatabase$MediaRecord: org.thoughtcrime.securesms.attachments.Attachment getAttachment()>
<org.thoughtcrime.securesms.GroupMembersDialog: void display()>
<android.support.design.widget.FloatingActionButtonImpl: android.graphics.drawable.GradientDrawable createShapeDrawable()>
<android.support.design.widget.FloatingActionButtonImpl: android.graphics.drawable.Drawable getContentBackground()>
<android.support.design.widget.FloatingActionButtonImpl: void onAttachedToWindow()>
<android.support.design.widget.FloatingActionButtonImpl: void onDetachedFromWindow()>
<android.support.design.widget.FloatingActionButtonImpl: void onPreDraw()>
<org.thoughtcrime.securesms.scribbles.multitouch.BaseGestureDetector: void resetState()>
<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class handledType()>
<android.support.design.widget.FloatingActionButtonImpl: void updatePadding()>
<sun.security.util.BitArray: int length()>
<sun.security.util.BitArray: byte[] toByteArray()>
<com.android.internal.telephony.SmsApplication$SmsApplicationData: boolean isComplete()>
<sun.security.util.BitArray: java.lang.Object clone()>
<sun.security.util.BitArray: java.lang.String toString()>
<sun.security.util.BitArray: sun.security.util.BitArray truncate()>
<android.view.RenderNode: void discardDisplayList()>
<android.view.RenderNode: boolean isValid()>
<android.view.RenderNode: long getNativeDisplayList()>
<android.view.RenderNode: boolean hasIdentityMatrix()>
<com.dd.CircularAnimatedDrawable: float getCurrentGlobalAngle()>
<com.dd.CircularAnimatedDrawable: float getCurrentSweepAngle()>
<com.dd.CircularAnimatedDrawable: boolean isRunning()>
<android.support.v7.widget.LinearLayoutManager$LayoutChunkResult: void resetInternal()>
<android.view.RenderNode: boolean getClipToOutline()>
<com.dd.CircularAnimatedDrawable: void start()>
<android.view.RenderNode: float getElevation()>
<android.view.RenderNode: float getTranslationX()>
<android.view.RenderNode: float getTranslationY()>
<android.view.RenderNode: float getTranslationZ()>
<android.view.RenderNode: float getRotation()>
<android.view.RenderNode: float getRotationX()>
<android.view.RenderNode: float getRotationY()>
<android.view.RenderNode: float getScaleX()>
<android.view.RenderNode: float getScaleY()>
<android.view.RenderNode: float getPivotX()>
<android.view.RenderNode: float getPivotY()>
<android.view.RenderNode: boolean isPivotExplicitlySet()>
<android.view.RenderNode: float getCameraDistance()>
<android.view.RenderNode: boolean isAttached()>
<android.support.v7.app.AppCompatDelegateImplV9$1: void run()>
<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>
<org.thoughtcrime.securesms.database.Database: void notifyConversationListListeners()>
<com.google.protobuf.UnknownFieldSet$Field$Builder: com.google.protobuf.UnknownFieldSet$Field build()>
<android.graphics.drawable.ColorDrawable: int getColor()>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder clear()>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.InternalLocaleBuilder clearExtensions()>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.BaseLocale getBaseLocale()>
<android.support.v7.widget.RecyclerView$5: int getChildCount()>
<android.icu.impl.locale.InternalLocaleBuilder: android.icu.impl.locale.LocaleExtensions getLocaleExtensions()>
<android.graphics.Bitmap: int getDensity()>
<android.support.v7.widget.RecyclerView$5: void removeAllViews()>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: int getGenerationId()>
<com.android.mms.transaction.TransactionService$ServiceHandler: void markAllPendingTransactionsAsFailed()>
<android.widget.Editor$HandleView: float getIdealVerticalOffset()>
<android.widget.Editor$HandleView: void updateDrawable()>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: boolean isPremultiplied()>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: int getHeight()>
<android.widget.Editor$HandleView: boolean offsetHasBeenChanged()>
<android.graphics.Bitmap: int getRowBytes()>
<android.widget.Editor$HandleView: void show()>
<android.graphics.Bitmap: int getByteCount()>
<android.widget.Editor$HandleView: void dismiss()>
<android.widget.Editor$HandleView: void hide()>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.widget.Editor$HandleView: boolean isShowing()>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: boolean hasMipMap()>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<android.view.DisplayAdjustments: android.content.res.Configuration getConfiguration()>
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<com.android.mms.transaction.TransactionSettings: java.lang.String getMmscUrl()>
<com.android.mms.transaction.TransactionSettings: java.lang.String getProxyAddress()>
<com.android.mms.transaction.TransactionSettings: int getProxyPort()>
<com.android.mms.transaction.TransactionSettings: boolean isProxySet()>
<android.widget.Editor$HandleView: boolean isDragging()>
<android.icu.text.ReplaceableString: java.lang.String toString()>
<com.fasterxml.jackson.databind.util.ArrayIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.ArrayIterator: java.util.Iterator iterator()>
<android.icu.text.ReplaceableString: int length()>
<com.fasterxml.jackson.databind.util.ArrayIterator: java.lang.Object next()>
<android.widget.ArrayAdapter: void clear()>
<java.nio.charset.Charset$1: boolean hasNext()>
<android.widget.ArrayAdapter: void notifyDataSetChanged()>
<android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal: boolean defaultIsRtl()>
<sun.util.calendar.BaseCalendar$Date: int getCachedYear()>
<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ArrayNode arrayNode()>
<android.widget.ArrayAdapter: android.content.res.Resources$Theme getDropDownViewTheme()>
<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _unknownType()>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>
<com.android.internal.view.menu.MenuPopup: android.graphics.Rect getEpicenterBounds()>
<android.icu.text.DateFormat: android.icu.util.Calendar getCalendar()>
<android.app.ActionBar: boolean invalidateOptionsMenu()>
<com.google.android.exoplayer2.extractor.DefaultExtractorInput: long getPosition()>
<android.app.ActionBar: void onDestroy()>
<android.support.design.widget.TabLayout$TabView: void reset()>
<com.google.android.exoplayer2.extractor.DefaultExtractorInput: void resetPeekPosition()>
<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>
<android.media.MediaScannerConnection: void connect()>
<android.support.design.widget.TabLayout$TabView: void update()>
<libcore.util.NativeAllocationRegistry$CleanerRunner: void run()>
<android.media.MediaScannerConnection: void disconnect()>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo create()>
<android.icu.impl.ICUResourceBundle$4: android.icu.impl.ICUResourceBundle load()>
<com.android.mms.service_alt.MmsRequestManager: boolean getAutoPersistingPref()>
<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Type: int getNumber()>
<com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.MessageLite getUnfinishedMessage()>
<android.os.storage.StorageVolume: java.io.File getPathFile()>
<android.os.storage.StorageVolume: boolean isEmulated()>
<android.os.storage.StorageVolume: java.lang.String getState()>
<com.annimon.stream.operator.ObjMapToLong: boolean hasNext()>
<com.annimon.stream.operator.ObjMapToLong: long nextLong()>
<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>
<org.thoughtcrime.securesms.components.reminder.Reminder: android.view.View$OnClickListener getDismissListener()>
<org.thoughtcrime.securesms.components.reminder.Reminder: android.view.View$OnClickListener getOkListener()>
<org.thoughtcrime.securesms.components.reminder.Reminder: java.lang.CharSequence getText()>
<org.thoughtcrime.securesms.components.reminder.Reminder: java.lang.CharSequence getTitle()>
<com.fasterxml.jackson.core.base.ParserBase: long getTokenCharacterOffset()>
<com.fasterxml.jackson.core.base.ParserBase: int getTokenColumnNr()>
<com.fasterxml.jackson.core.base.ParserBase: int getTokenLineNr()>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: android.content.Context getContext()>
<com.google.protobuf.TextFormat$TextGenerator: void indent()>
<com.google.protobuf.TextFormat$TextGenerator: void outdent()>
<android.graphics.drawable.VectorDrawable$VGroup: float getRotation()>
<android.graphics.drawable.VectorDrawable$VGroup: float getPivotX()>
<android.graphics.drawable.VectorDrawable$VGroup: float getPivotY()>
<android.graphics.drawable.VectorDrawable$VGroup: float getScaleX()>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: boolean hasFooterView()>
<android.graphics.drawable.VectorDrawable$VGroup: float getScaleY()>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: boolean hasHeaderView()>
<org.thoughtcrime.securesms.database.CursorRecyclerViewAdapter: boolean isActiveCursor()>
<android.graphics.drawable.VectorDrawable$VGroup: float getTranslateX()>
<android.graphics.drawable.VectorDrawable$VGroup: float getTranslateY()>
<android.icu.impl.ResourceBundleWrapper$2: android.icu.impl.ResourceBundleWrapper load()>
<com.android.mms.service_alt.DownloadRequest: android.app.PendingIntent getPendingIntent()>
<com.android.mms.service_alt.DownloadRequest: boolean prepareForHttpRequest()>
<sun.security.jca.ProviderList: int size()>
<sun.security.jca.ProviderList: java.util.List providers()>
<android.support.v7.widget.RecyclerViewAccessibilityDelegate: android.support.v4.view.AccessibilityDelegateCompat getItemDelegate()>
<sun.security.jca.ProviderList: sun.security.jca.ProviderList removeInvalid()>
<sun.security.jca.ProviderList: java.security.Provider[] toArray()>
<android.support.v7.widget.RecyclerViewAccessibilityDelegate: boolean shouldIgnore()>
<android.widget.Editor$SpanController: void hide()>
<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>
<android.support.v7.widget.GridLayout$MutableInt: void reset()>
<com.android.mms.service_alt.ApnSettings: java.lang.String getProxyAddress()>
<com.android.mms.service_alt.ApnSettings: int getProxyPort()>
<com.android.mms.service_alt.ApnSettings: boolean isProxySet()>
<com.android.mms.service_alt.ApnSettings: java.lang.String toString()>
<com.google.zxing.qrcode.decoder.ErrorCorrectionLevel: int getBits()>
<com.google.android.mms.pdu_alt.MultimediaMessagePdu: com.google.android.mms.pdu_alt.PduBody getBody()>
<com.google.android.mms.pdu_alt.MultimediaMessagePdu: com.google.android.mms.pdu_alt.EncodedStringValue getSubject()>
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>
<org.thoughtcrime.securesms.database.model.DisplayRecord$Body: java.lang.String getBody()>
<org.thoughtcrime.securesms.database.model.DisplayRecord$Body: boolean isPlaintext()>
<android.animation.AnimatorSet: boolean isRunning()>
<com.fasterxml.jackson.databind.JsonMappingException$Reference: java.lang.String toString()>
<android.icu.text.StringMatcher: void resetMatch()>
<org.ccil.cowan.tagsoup.AttributesImpl: int getLength()>
<com.fasterxml.jackson.core.base.GeneratorBase: int getFeatureMask()>
<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.json.JsonWriteContext getOutputContext()>
<org.ccil.cowan.tagsoup.AttributesImpl: void clear()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: com.google.protobuf.ByteString getContent()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: com.google.protobuf.ByteString getLegacyMessage()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: java.lang.String getSource()>
<java.util.LinkedList: java.lang.Object getFirst()>
<java.util.LinkedList: java.lang.Object getLast()>
<java.util.LinkedList: java.lang.Object removeFirst()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: int getSourceDevice()>
<java.util.LinkedList: java.lang.Object removeLast()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: long getTimestamp()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Type getType()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: boolean hasContent()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: boolean hasLegacyMessage()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope: boolean isInitialized()>
<android.animation.AnimatorSet: boolean shouldPlayTogether()>
<java.util.LinkedList: void clear()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: int getLayoutId()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: int getMonthOfYear()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: int getYear()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: void reset()>
<java.util.LinkedList: java.lang.Object peek()>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.util.LinkedList: java.lang.Object remove()>
<android.graphics.drawable.RippleComponent: void onBoundsChange()>
<java.util.LinkedList: java.lang.Object peekLast()>
<android.graphics.drawable.RippleComponent: void exit()>
<java.util.LinkedList: java.lang.Object pop()>
<android.graphics.drawable.RippleComponent: void cancel()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: void setLeftRightEnabled()>
<android.graphics.drawable.RippleComponent: void end()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: void updateDeleteButton()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationPicker: void updateExpiration()>
<android.graphics.drawable.RippleComponent: void invalidateSelf()>
<android.graphics.drawable.RippleComponent: boolean isHardwareAnimating()>
<android.graphics.drawable.RippleComponent: void onHotspotBoundsChanged()>
<com.google.android.exoplayer2.util.StandaloneMediaClock: long getPositionUs()>
<com.google.android.exoplayer2.util.StandaloneMediaClock: void start()>
<com.google.android.exoplayer2.util.StandaloneMediaClock: void stop()>
<android.content.res.ResourcesKey: boolean hasOverrideConfiguration()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint build()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint$Builder: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint buildPartial()>
<android.os.HandlerThread: void onLooperPrepared()>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: boolean quit()>
<android.os.HandlerThread: boolean quitSafely()>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<java.net.JarURLConnection: java.net.URL getJarFileURL()>
<java.net.JarURLConnection: java.lang.String getEntryName()>
<java.lang.Package: java.lang.String getName()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>
<java.util.Formatter$Flags: int valueOf()>
<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<android.support.v7.preference.PreferenceGroupAdapter: int getItemCount()>
<java.util.Formatter$Flags: java.lang.String toString()>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSealed()>
<android.view.accessibility.AccessibilityNodeInfo: void enforceNotSealed()>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<org.thoughtcrime.securesms.service.WebRtcCallService$7: void run()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getAddress()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getBody()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getContactName()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: long getDate()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: int getProtocol()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: int getRead()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getReadableDate()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getServiceCenter()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: int getStatus()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: java.lang.String getSubject()>
<org.thoughtcrime.securesms.database.XmlBackup$XmlBackupItem: int getType()>
<android.support.v4.view.ViewPager$3: void run()>
<com.google.protobuf.Descriptors$EnumValueDescriptor: int getNumber()>
<com.google.protobuf.Descriptors$EnumValueDescriptor: com.google.protobuf.Descriptors$EnumDescriptor getType()>
<android.support.v7.widget.RecyclerView$SmoothScroller$Action: boolean hasJumpTarget()>
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: void close()>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure: org.whispersystems.libsignal.state.StorageProtos$SessionStructure getCurrentSession()>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure: java.util.List getPreviousSessionsList()>
<org.whispersystems.signalservice.internal.util.BlacklistingTrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>
<org.whispersystems.libsignal.state.StorageProtos$RecordStructure: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<com.android.mms.util.RateController: boolean isAllowedByUser()>
<com.android.mms.util.RateController: boolean isLimitSurpassed()>
<com.android.internal.app.ToolbarActionBar: android.view.Window$Callback getWrappedWindowCallback()>
<com.fasterxml.jackson.databind.DeserializationFeature: int getMask()>
<java.lang.Enum: java.lang.String name()>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: java.lang.Class getDeclaringClass()>
<org.thoughtcrime.securesms.ApplicationContext: org.thoughtcrime.securesms.service.ExpiringMessageManager getExpiringMessageManager()>
<org.thoughtcrime.securesms.ApplicationContext: org.whispersystems.jobqueue.JobManager getJobManager()>
<android.media.AudioAttributes: int getUsage()>
<android.media.AudioAttributes: int getCapturePreset()>
<android.media.AudioAttributes: int getFlags()>
<android.media.AudioAttributes: int getAllFlags()>
<android.media.AudioAttributes: java.util.Set getTags()>
<android.widget.ExpandableListPosition: void recycle()>
<android.media.SubtitleData: int getTrackIndex()>
<android.media.SubtitleData: long getStartTimeUs()>
<android.media.SubtitleData: long getDurationUs()>
<android.media.SubtitleData: byte[] getData()>
<com.google.android.exoplayer2.Timeline$Window: long getDefaultPositionUs()>
<com.google.android.exoplayer2.Timeline$Window: long getDurationMs()>
<com.google.android.exoplayer2.Timeline$Window: long getPositionInFirstPeriodUs()>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: int getBoundingBoxMargin()>
<android.graphics.drawable.RippleForeground: boolean hasFinishedExit()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected build()>
<libcore.io.MemoryMappedFile: libcore.io.BufferIterator bigEndianIterator()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void recycle()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected buildPartial()>
<libcore.io.MemoryMappedFile: void checkNotClosed()>
<libcore.io.MemoryMappedFile: int size()>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: boolean isItemViewSwipeEnabled()>
<android.support.v7.widget.helper.ItemTouchHelper$Callback: boolean isLongPressDragEnabled()>
<java.util.ArrayDeque: java.lang.Object pollFirst()>
<java.util.ArrayDeque: java.lang.Object pollLast()>
<java.util.ArrayDeque: java.lang.Object poll()>
<java.io.ObjectInputStream$BlockDataInputStream: boolean getBlockDataMode()>
<java.util.ArrayDeque: void clear()>
<android.icu.text.CurrencyPluralInfo: java.lang.Object clone()>
<com.fasterxml.jackson.databind.deser.CreatorProperty: java.lang.Object getInjectableValueId()>
<android.icu.text.CurrencyPluralInfo: java.util.Iterator pluralPatternIterator()>
<java.io.ObjectInputStream$BlockDataInputStream: int currentBlockRemaining()>
<sun.nio.ch.NativeDispatcher: boolean needsPositionLock()>
<android.support.v7.widget.AppCompatImageHelper: void applySupportImageTint()>
<android.support.v7.widget.AppCompatImageHelper: android.content.res.ColorStateList getSupportImageTintList()>
<android.support.v7.widget.AppCompatImageHelper: android.graphics.PorterDuff$Mode getSupportImageTintMode()>
<android.support.v7.widget.AppCompatImageHelper: boolean hasOverlappingRendering()>
<org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer getBuffer()>
<org.webrtc.VideoFrame: int getRotation()>
<org.webrtc.VideoFrame: long getTimestampNs()>
<org.webrtc.VideoFrame: void release()>
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure build()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure buildPartial()>
<com.bumptech.glide.load.Option: java.lang.Object getDefaultValue()>
<com.nineoldandroids.util.Property: java.lang.String getName()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey getChainKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: com.google.protobuf.ByteString getSenderRatchetKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: com.google.protobuf.ByteString getSenderRatchetKeyPrivate()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: java.lang.String baseTypeName()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: java.lang.Class getDefaultImpl()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: java.lang.String getPropertyName()>
<com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase: com.fasterxml.jackson.databind.jsontype.TypeIdResolver getTypeIdResolver()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: boolean hasChainKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: boolean hasSenderRatchetKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain: boolean hasSenderRatchetKeyPrivate()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>
<android.util.TypedValue: float getFloat()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<org.thoughtcrime.securesms.components.camera.CameraView: void flipCamera()>
<org.thoughtcrime.securesms.components.camera.CameraView: boolean isMultiCamera()>
<org.thoughtcrime.securesms.components.camera.CameraView: boolean isRearCamera()>
<org.thoughtcrime.securesms.components.camera.CameraView: boolean isStarted()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>
<org.thoughtcrime.securesms.components.camera.CameraView: void onPause()>
<org.thoughtcrime.securesms.components.camera.CameraView: void onResume()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: boolean moreDataPresent()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<android.support.v4.app.RemoteInput$Builder: android.support.v4.app.RemoteInput build()>
<com.google.protobuf.UnknownFieldSet: java.util.Map asMap()>
<com.google.protobuf.UnknownFieldSet: int getSerializedSizeAsMessageSet()>
<com.klinker.android.send_message.Settings: java.lang.String getAgent()>
<com.klinker.android.send_message.Settings: boolean getGroup()>
<com.klinker.android.send_message.Settings: java.lang.String getMmsc()>
<com.klinker.android.send_message.Settings: java.lang.String getPort()>
<com.klinker.android.send_message.Settings: java.lang.String getProxy()>
<com.klinker.android.send_message.Settings: java.lang.String getUaProfTagName()>
<com.klinker.android.send_message.Settings: boolean getUseSystemSending()>
<com.klinker.android.send_message.Settings: java.lang.String getUserProfileUrl()>
<java.security.Provider: java.lang.String getName()>
<org.thoughtcrime.securesms.util.MediaUtil$ThumbnailData: float getAspectRatio()>
<org.thoughtcrime.securesms.util.MediaUtil$ThumbnailData: android.graphics.Bitmap getBitmap()>
<org.thoughtcrime.securesms.util.MediaUtil$ThumbnailData: java.io.InputStream toDataStream()>
<java.io.ObjectOutputStream$HandleTable: void clear()>
<java.io.ObjectOutputStream$HandleTable: int size()>
<java.security.Provider: java.util.Set getServices()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: com.google.protobuf.ByteString getAliceBaseKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: com.google.protobuf.ByteString getLocalIdentityPublic()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: int getLocalRegistrationId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean getNeedsRefresh()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange getPendingKeyExchange()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey getPendingPreKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: int getPreviousCounter()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: com.google.protobuf.ByteString getRemoteIdentityPublic()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: int getRemoteRegistrationId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: com.google.protobuf.ByteString getRootKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain getSenderChain()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: int getSessionVersion()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasAliceBaseKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasLocalIdentityPublic()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasLocalRegistrationId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasNeedsRefresh()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasPendingKeyExchange()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasPendingPreKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasPreviousCounter()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasRemoteIdentityPublic()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey: int getIndex()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasRemoteRegistrationId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey: com.google.protobuf.ByteString getKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasRootKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasSenderChain()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure: boolean hasSessionVersion()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey: boolean hasIndex()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$ChainKey: boolean hasKey()>
<java.util.Currency: java.lang.String getCurrencyCode()>
<java.util.Currency: int getDefaultFractionDigits()>
<java.util.regex.Pattern: java.lang.String pattern()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
<android.graphics.drawable.Drawable: int getLayoutDirection()>
<libcore.io.NioBufferIterator: byte readByte()>
<libcore.io.NioBufferIterator: int readInt()>
<android.app.TaskStackBuilder: void startActivities()>
<android.graphics.drawable.Drawable: int getLevel()>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>
<org.thoughtcrime.securesms.database.IdentityDatabase$VerifiedStatus: int toInt()>
<android.icu.text.DecimalFormatSymbols: char getZeroDigit()>
<android.icu.text.DecimalFormatSymbols: char[] getDigits()>
<android.icu.text.DecimalFormatSymbols: java.lang.String[] getDigitStrings()>
<android.icu.text.DecimalFormatSymbols: java.lang.String[] getDigitStringsLocal()>
<android.content.res.Configuration: void setToDefaults()>
<android.icu.text.DecimalFormatSymbols: char getSignificantDigit()>
<android.icu.text.DecimalFormatSymbols: char getGroupingSeparator()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getGroupingSeparatorString()>
<android.icu.text.DecimalFormatSymbols: char getDecimalSeparator()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getDecimalSeparatorString()>
<android.icu.text.DecimalFormatSymbols: char getPerMill()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPerMillString()>
<android.media.Tokenizer: void reset()>
<android.icu.text.DecimalFormatSymbols: char getPercent()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPercentString()>
<android.icu.text.DecimalFormatSymbols: char getDigit()>
<android.icu.text.DecimalFormatSymbols: char getPatternSeparator()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getNaN()>
<android.icu.text.DecimalFormatSymbols: char getMinusSign()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMinusSignString()>
<android.icu.text.DecimalFormatSymbols: char getPlusSign()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getPlusSignString()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<android.icu.text.DecimalFormatSymbols: android.icu.util.Currency getCurrency()>
<android.icu.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMonetaryDecimalSeparatorString()>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter$ViewHolder: org.thoughtcrime.securesms.contacts.ContactSelectionListItem getView()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getMonetaryGroupingSeparatorString()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getCurrencyPattern()>
<android.icu.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>
<android.icu.text.DecimalFormatSymbols: char getPadEscape()>
<android.icu.text.DecimalFormatSymbols: java.util.Locale getLocale()>
<android.icu.text.DecimalFormatSymbols: android.icu.util.ULocale getULocale()>
<android.icu.text.DecimalFormatSymbols: java.lang.Object clone()>
<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicy()>
<android.support.v7.view.ViewPropertyAnimatorCompatSet$1: void onEnd()>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.support.design.widget.ShadowDrawableWrapper: float getShadowSize()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: boolean getAlwaysAsId()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getGeneratorType()>
<android.content.res.Configuration: android.os.LocaleList getLocales()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: com.fasterxml.jackson.databind.PropertyName getPropertyName()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getResolverType()>
<org.thoughtcrime.securesms.preferences.widgets.RingtonePreferenceDialogFragmentCompat$NewRingtoneScanner: void close()>
<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getScope()>
<android.content.res.Configuration: int getLayoutDirection()>
<android.content.res.Configuration: boolean isScreenRound()>
<com.google.android.flexbox.FlexboxLayoutManager: int findFirstVisibleItemPosition()>
<com.google.android.flexbox.FlexboxLayoutManager: int findLastVisibleItemPosition()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<com.google.android.flexbox.FlexboxLayoutManager: int getAlignItems()>
<com.google.android.flexbox.FlexboxLayoutManager: int getFlexDirection()>
<com.google.android.flexbox.FlexboxLayoutManager: int getFlexItemCount()>
<com.google.android.flexbox.FlexboxLayoutManager: java.util.List getFlexLinesInternal()>
<com.google.android.flexbox.FlexboxLayoutManager: int getFlexWrap()>
<com.google.android.flexbox.FlexboxLayoutManager: int getLargestMainSize()>
<com.google.android.flexbox.FlexboxLayoutManager: boolean isMainAxisDirectionHorizontal()>
<android.icu.impl.ReplaceableUCharacterIterator: int getLength()>
<android.icu.impl.ReplaceableUCharacterIterator: int getIndex()>
<android.icu.impl.ReplaceableUCharacterIterator: int next()>
<android.icu.impl.ReplaceableUCharacterIterator: int previous()>
<android.os.IMessenger$Stub: android.os.IBinder asBinder()>
<java.util.ArrayList: java.lang.Object clone()>
<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner()>
<sun.security.x509.Extension: boolean isCritical()>
<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>
<java.nio.DirectByteBuffer: long address()>
<sun.security.x509.Extension: byte[] getExtensionValue()>
<com.google.android.exoplayer2.ExoPlayerImpl: long getBufferedPosition()>
<com.google.android.exoplayer2.ExoPlayerImpl: long getCurrentPosition()>
<com.google.android.exoplayer2.ExoPlayerImpl: com.google.android.exoplayer2.Timeline getCurrentTimeline()>
<com.google.android.exoplayer2.ExoPlayerImpl: com.google.android.exoplayer2.trackselection.TrackSelectionArray getCurrentTrackSelections()>
<com.google.android.exoplayer2.ExoPlayerImpl: int getCurrentWindowIndex()>
<com.google.android.exoplayer2.ExoPlayerImpl: long getDuration()>
<com.google.android.exoplayer2.ExoPlayerImpl: boolean getPlayWhenReady()>
<com.google.android.exoplayer2.ExoPlayerImpl: int getPlaybackState()>
<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>
<org.thoughtcrime.securesms.scribbles.viewmodel.TextLayer: org.thoughtcrime.securesms.scribbles.viewmodel.Font getFont()>
<org.thoughtcrime.securesms.scribbles.viewmodel.TextLayer: java.lang.String getText()>
<java.util.LinkedHashMap: void clear()>
<java.util.LinkedHashMap: java.util.Map$Entry eldest()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: int getTargetSlideOffset()>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: boolean isShowing()>
<org.thoughtcrime.securesms.components.camera.QuickAttachmentDrawer: void onConfigurationChanged()>
<java.nio.DirectByteBuffer: long getLong()>
<com.pnikosis.materialishprogress.ProgressWheel: boolean isSpinning()>
<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>
<android.view.ViewOverlay: boolean isEmpty()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonStreamContext getParsingContext()>
<java.nio.DirectByteBuffer: java.nio.FloatBuffer asFloatBuffer()>
<org.webrtc.VideoTrack: void dispose()>
<java.nio.DirectByteBuffer: boolean isAccessible()>
<com.pnikosis.materialishprogress.ProgressWheel: void spin()>
<com.pnikosis.materialishprogress.ProgressWheel: void stopSpinning()>
<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>
<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getResolvedType()>
<org.thoughtcrime.securesms.webrtc.PeerConnectionWrapper: void dispose()>
<com.android.mms.service_alt.MmsConfigXmlProcessor: void process()>
<android.util.Log$ImmediateLogWriter: int getWritten()>
<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>
<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>
<android.support.v7.preference.PreferenceDialogFragmentCompat: android.support.v7.preference.DialogPreference getPreference()>
<android.support.v7.preference.PreferenceDialogFragmentCompat: boolean needInputMethod()>
<com.fasterxml.jackson.databind.JavaType: boolean isEnumType()>
<com.fasterxml.jackson.databind.JavaType: boolean isFinal()>
<com.fasterxml.jackson.databind.JavaType: boolean isInterface()>
<com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>
<com.fasterxml.jackson.databind.JavaType: boolean isThrowable()>
<android.media.PlaybackParams: float getSpeed()>
<com.fasterxml.jackson.databind.JavaType: boolean useStaticType()>
<android.icu.text.NFRule: char getDecimalPoint()>
<android.icu.text.NFRule: long getBaseValue()>
<android.icu.text.NFRule: long getDivisor()>
<android.media.Cea708CCWidget$CCHandler: void reset()>
<java.io.ExpiringCache: void clear()>
<android.support.v4.app.NotificationCompat$Action$Builder: android.support.v4.app.NotificationCompat$Action build()>
<java.util.concurrent.FutureTask: boolean isDone()>
<org.whispersystems.libsignal.fingerprint.FingerprintVersionMismatchException: int getOurVersion()>
<org.whispersystems.libsignal.fingerprint.FingerprintVersionMismatchException: int getTheirVersion()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>
<org.thoughtcrime.securesms.util.DynamicLanguage: java.util.Locale getCurrentLocale()>
<android.support.v7.view.SupportMenuInflater$MenuState: void addItem()>
<android.support.v7.view.SupportMenuInflater$MenuState: android.view.SubMenu addSubMenuItem()>
<android.support.v7.view.SupportMenuInflater$MenuState: boolean hasAddedItem()>
<android.icu.impl.DateNumberFormat: char[] getDigits()>
<libcore.net.NetworkSecurityPolicy$DefaultNetworkSecurityPolicy: boolean isCleartextTrafficPermitted()>
<android.support.v7.view.menu.MenuPopup: android.graphics.Rect getEpicenterBounds()>
<android.support.v7.view.SupportMenuInflater$MenuState: void resetGroup()>
<android.graphics.drawable.AnimatedStateListDrawable$FrameInterpolator: int getTotalDuration()>
<android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()>
<android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()>
<android.support.v7.app.AppCompatActivity: android.content.Intent getSupportParentActivityIntent()>
<android.support.v7.app.AppCompatActivity: void invalidateOptionsMenu()>
<android.support.v7.app.AppCompatActivity: void openOptionsMenu()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: int getIndex()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: com.fasterxml.jackson.databind.introspect.AnnotatedWithParams getOwner()>
<com.fasterxml.jackson.databind.introspect.AnnotatedParameter: java.lang.reflect.Type getParameterType()>
<android.support.v4.util.SparseArrayCompat: void clear()>
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<java.text.DecimalFormat: java.lang.String getPositivePrefix()>
<java.text.DecimalFormat: java.lang.String getNegativePrefix()>
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()>
<android.icu.text.NFSubstitution: java.lang.String toString()>
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()>
<java.text.DecimalFormat: int getGroupingSize()>
<java.text.DecimalFormat: boolean isGroupingUsed()>
<java.text.DecimalFormat: boolean isParseBigDecimal()>
<java.text.DecimalFormat: boolean isParseIntegerOnly()>
<java.text.DecimalFormat: java.lang.Object clone()>
<java.text.DecimalFormat: java.lang.String toPattern()>
<android.icu.text.NFSubstitution: int getPos()>
<android.support.v4.util.SparseArrayCompat: int size()>
<java.text.DecimalFormat: int getMaximumIntegerDigits()>
<java.text.DecimalFormat: int getMinimumIntegerDigits()>
<java.text.DecimalFormat: int getMaximumFractionDigits()>
<java.text.DecimalFormat: int getMinimumFractionDigits()>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void reset()>
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean isPeriodic()>
<java.text.DecimalFormat: void adjustForCurrencyDefaultFractionDigits()>
<android.icu.text.TransliteratorRegistry$Spec: boolean hasFallback()>
<android.icu.text.TransliteratorRegistry$Spec: void reset()>
<android.icu.text.TransliteratorRegistry$Spec: java.lang.String next()>
<android.icu.text.TransliteratorRegistry$Spec: java.lang.String get()>
<android.icu.text.TransliteratorRegistry$Spec: boolean isLocale()>
<android.icu.text.TransliteratorRegistry$Spec: java.util.ResourceBundle getBundle()>
<android.icu.text.TransliteratorRegistry$Spec: java.lang.String getTop()>
<android.widget.Spinner$DropdownPopup: void computeContentWidth()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getAlignSelf()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: float getFlexBasisPercent()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: float getFlexGrow()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: float getFlexShrink()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getHeight()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMarginBottom()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMarginLeft()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMarginRight()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMarginTop()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMaxHeight()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMaxWidth()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMinHeight()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getMinWidth()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: int getWidth()>
<com.google.android.flexbox.FlexboxLayoutManager$LayoutParams: boolean isWrapBefore()>
<org.thoughtcrime.securesms.scribbles.widget.entity.MotionEntity: android.graphics.PointF absoluteCenter()>
<com.nineoldandroids.animation.Keyframe$FloatKeyframe: float getFloatValue()>
<com.google.android.gms.maps.MapView$zzb: void onExitAmbient()>
<com.google.android.gms.maps.MapView$zzb: void zzbru()>
<java.util.logging.Logger$LoggerBundle: boolean isSystemBundle()>
<com.google.android.mms.pdu_alt.PduComposer$PositionMarker: int getLength()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: boolean getEnabled()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: long getId()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: boolean hasEnabled()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: boolean hasId()>
<javax.crypto.KeyGenerator: void disableFailover()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: boolean isInitialized()>
<com.google.android.gms.common.GooglePlayServicesRepairableException: int getConnectionStatusCode()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder toBuilder()>
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>
<android.support.v7.widget.AppCompatSeekBarHelper: void drawableStateChanged()>
<org.thoughtcrime.securesms.crypto.MasterSecret: javax.crypto.spec.SecretKeySpec getEncryptionKey()>
<org.thoughtcrime.securesms.crypto.MasterSecret: javax.crypto.spec.SecretKeySpec getMacKey()>
<org.thoughtcrime.securesms.crypto.MasterSecret: org.thoughtcrime.securesms.crypto.MasterSecret parcelClone()>
<com.google.android.mms.pdu_alt.DeliveryInd: byte[] getMessageId()>
<com.google.protobuf.CodedOutputStream: void checkNoSpaceLeft()>
<com.google.protobuf.CodedOutputStream: int spaceLeft()>
<android.app.Fragment: boolean isInBackStack()>
<com.soundcloud.android.crop.ImageViewTouchBase$1: void run()>
<android.app.Fragment: android.content.Context getContext()>
<android.app.Fragment: android.app.Activity getActivity()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>
<android.app.Fragment: android.app.Fragment getParentFragment()>
<android.app.Fragment: boolean isAdded()>
<android.support.v7.widget.AppCompatCompoundButtonHelper: void applyButtonTint()>
<android.app.Fragment: boolean isHidden()>
<android.support.v7.widget.AppCompatCompoundButtonHelper: android.content.res.ColorStateList getSupportButtonTintList()>
<android.support.v7.widget.AppCompatCompoundButtonHelper: android.graphics.PorterDuff$Mode getSupportButtonTintMode()>
<android.support.v7.widget.AppCompatCompoundButtonHelper: void onSetButtonDrawable()>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.media.Cea608CCParser$CCMemory: void erase()>
<android.media.Cea608CCParser$CCMemory: void der()>
<android.view.View: int getVerticalScrollbarPosition()>
<android.media.Cea608CCParser$CCMemory: void bs()>
<android.media.Cea608CCParser$CCMemory: void cr()>
<android.view.View: boolean isDraggingScrollBar()>
<android.app.Fragment: android.view.View getView()>
<android.view.View: android.view.View$ListenerInfo getListenerInfo()>
<android.view.View: boolean hasOnClickListeners()>
<android.app.Fragment: void initState()>
<android.view.View: boolean performLongClick()>
<android.view.View: boolean performContextClick()>
<android.icu.impl.JavaTimeZone: android.icu.util.TimeZone freeze()>
<android.view.View: boolean getRevealOnFocusHint()>
<android.view.View: boolean rootViewRequestFocus()>
<android.app.Fragment: void instantiateChildFragmentManager()>
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()>
<android.app.Fragment: void performStart()>
<android.app.Fragment: void performResume()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<com.fasterxml.jackson.core.util.DefaultIndenter: boolean isInline()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()>
<android.app.Fragment: void performPause()>
<android.app.Fragment: void performStop()>
<android.app.Fragment: void performDestroyView()>
<android.app.Fragment: void performDestroy()>
<android.app.Fragment: void performDetach()>
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isAlphanumeric()>
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()>
<com.android.internal.database.SortCursor: boolean requery()>
<dagger.internal.Binding: boolean isSingleton()>
<sun.security.util.Debug: void println()>
<android.view.View: boolean isVisibleToUser()>
<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.view.View: int getAccessibilityViewId()>
<android.view.View: int getAccessibilityWindowId()>
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<android.view.View: void onFocusLost()>
<android.view.View: int getNextFocusForwardId()>
<android.view.View: boolean isShown()>
<android.icu.impl.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleAttributes()>
<android.icu.impl.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleKeys()>
<android.app.Notification$Builder: java.lang.String loadHeaderAppName()>
<android.view.View: android.view.WindowInsets getRootWindowInsets()>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<android.view.View: boolean getFitsSystemWindows()>
<android.view.View: void requestFitSystemWindows()>
<android.view.View: void requestApplyInsets()>
<android.view.View: int getVisibility()>
<android.view.View: boolean isEnabled()>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.view.View: int getRawLayoutDirection()>
<android.view.View: int getLayoutDirection()>
<android.view.View: boolean isLayoutRtl()>
<android.app.Notification$Builder: android.widget.RemoteViews createContentView()>
<android.view.View: boolean isLaidOut()>
<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()>
<android.view.View: boolean isClickable()>
<android.view.View: boolean isLongClickable()>
<android.view.View: boolean isContextClickable()>
<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()>
<android.view.View: boolean isPressed()>
<org.whispersystems.curve25519.Curve25519KeyPair: byte[] getPrivateKey()>
<org.whispersystems.curve25519.Curve25519KeyPair: byte[] getPublicKey()>
<android.view.View: boolean isFocusable()>
<android.view.View: boolean isFocusableInTouchMode()>
<sun.security.util.DerValue: boolean isContextSpecific()>
<sun.security.util.DerValue: boolean isConstructed()>
<android.view.View: boolean isAccessibilityFocused()>
<android.view.View: boolean requestAccessibilityFocus()>
<android.view.View: void clearAccessibilityFocus()>
<android.media.MediaFormat: java.util.Map getMap()>
<android.view.View: boolean requestFocus()>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: int getImportantForAccessibility()>
<android.view.View: int getAccessibilityLiveRegion()>
<android.view.View: boolean isImportantForAccessibility()>
<android.media.MediaFormat: java.lang.String toString()>
<android.view.View: android.view.ViewParent getParentForAccessibility()>
<android.view.View: boolean includeForAccessibility()>
<android.icu.util.BytesTrie$Result: boolean hasValue()>
<android.view.View: boolean isActionableForAccessibility()>
<android.icu.util.BytesTrie$Result: boolean hasNext()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: boolean isEmpty()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: int length()>
<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: int getLastCC()>
<sun.security.util.DerValue: byte getTag()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: java.lang.StringBuilder getStringBuilder()>
<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>
<android.app.Notification$Builder: int resolveContrastColor()>
<android.app.Notification$Builder: android.app.Notification buildUnstyled()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void flush()>
<android.icu.impl.Normalizer2Impl$ReorderingBuffer: void remove()>
<android.app.Notification$Builder: android.app.Notification getNotification()>
<android.app.Notification$Builder: android.app.Notification build()>
<android.view.View: boolean isTemporarilyDetached()>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: void onFinishTemporaryDetach()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<sun.security.util.DerValue: byte[] getOriginalEncodedForm()>
<android.view.View: boolean isAccessibilityFocusedViewOrHost()>
<sun.security.util.DerValue: int length()>
<android.icu.impl.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>
<android.view.View: int getWindowVisibility()>
<com.fasterxml.jackson.databind.ser.BeanSerializerFactory: java.lang.Iterable customSerializers()>
<android.view.View: android.content.Context getContext()>
<android.support.v4.view.WindowInsetsCompat: android.support.v4.view.WindowInsetsCompat consumeSystemWindowInsets()>
<android.support.v4.view.WindowInsetsCompat: int getSystemWindowInsetBottom()>
<android.support.v4.view.WindowInsetsCompat: int getSystemWindowInsetLeft()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>
<android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>
<android.support.v4.view.WindowInsetsCompat: int getSystemWindowInsetRight()>
<android.support.v4.view.WindowInsetsCompat: int getSystemWindowInsetTop()>
<java.util.LinkedList$ListItr: boolean hasPrevious()>
<android.support.v4.view.WindowInsetsCompat: boolean isConsumed()>
<java.util.LinkedList$ListItr: java.lang.Object previous()>
<java.util.LinkedList$ListItr: int nextIndex()>
<java.util.LinkedList$ListItr: void remove()>
<android.view.View: boolean isHovered()>
<java.util.LinkedList$ListItr: void checkForComodification()>
<android.icu.text.NumberFormat: boolean isParseIntegerOnly()>
<android.icu.text.NumberFormat: boolean isParseStrict()>
<org.whispersystems.curve25519.Curve25519: org.whispersystems.curve25519.Curve25519KeyPair generateKeyPair()>
<android.view.View: boolean isInScrollingContainer()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage: com.google.protobuf.ByteString getNumberBytes()>
<android.app.ExitTransitionCoordinator: void startExit()>
<android.icu.text.NumberFormat: boolean isGroupingUsed()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage: com.google.protobuf.ByteString getProvisioningCodeBytes()>
<android.icu.text.NumberFormat: int getMaximumIntegerDigits()>
<android.icu.text.NumberFormat: int getMinimumIntegerDigits()>
<android.icu.text.NumberFormat: int getMaximumFractionDigits()>
<android.icu.text.NumberFormat: int getMinimumFractionDigits()>
<android.icu.text.NumberFormat: android.icu.util.Currency getCurrency()>
<android.app.ExitTransitionCoordinator: void stop()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage: com.google.protobuf.ByteString getUserAgentBytes()>
<android.view.View: void bringToFront()>
<android.app.ExitTransitionCoordinator: boolean isReadyToNotify()>
<android.app.ExitTransitionCoordinator: void sharedElementTransitionComplete()>
<android.view.View: android.view.ViewParent getParent()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage: boolean isInitialized()>
<android.view.View: int getScrollX()>
<android.view.View: int getScrollY()>
<android.view.View: int getWidth()>
<android.view.View: int getHeight()>
<android.app.ExitTransitionCoordinator: void onTransitionsComplete()>
<android.app.ExitTransitionCoordinator: void notifyComplete()>
<android.view.View: int getMeasuredWidth()>
<com.dd.StrokeGradientDrawable: android.graphics.drawable.GradientDrawable getGradientDrawable()>
<com.dd.StrokeGradientDrawable: int getStrokeColor()>
<android.view.View: int getMeasuredWidthAndState()>
<com.dd.StrokeGradientDrawable: int getStrokeWidth()>
<android.view.View: int getMeasuredHeight()>
<android.view.View: int getMeasuredHeightAndState()>
<android.view.View: int getMeasuredState()>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.view.View: boolean hasIdentityMatrix()>
<android.view.View: void ensureTransformationInfo()>
<android.view.View: android.graphics.Matrix getInverseMatrix()>
<android.app.ExitTransitionCoordinator: void clearState()>
<android.view.View: float getRotation()>
<android.app.ExitTransitionCoordinator: boolean moveSharedElementWithParent()>
<android.app.ExitTransitionCoordinator: android.transition.Transition getViewsTransition()>
<android.view.View: float getRotationY()>
<android.app.ExitTransitionCoordinator: android.transition.Transition getSharedElementTransition()>
<android.view.View: float getRotationX()>
<android.view.View: float getScaleX()>
<android.view.View: float getScaleY()>
<android.view.View: float getPivotX()>
<android.view.View: float getPivotY()>
<android.view.View: float getAlpha()>
<android.view.View: boolean getHasOverlappingRendering()>
<java.util.SubList$1: boolean hasNext()>
<com.android.internal.view.menu.MenuPopupHelper: void show()>
<java.util.SubList$1: java.lang.Object next()>
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuPopup getPopup()>
<com.android.internal.view.menu.MenuPopupHelper: boolean tryShow()>
<java.util.SubList$1: int nextIndex()>
<android.view.View: float getTransitionAlpha()>
<android.view.View: int getTop()>
<android.view.View: int getBottom()>
<android.widget.ListView: int getMaxScrollAmount()>
<com.android.internal.view.menu.MenuPopupHelper: boolean isShowing()>
<android.view.View: int getLeft()>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: void cancel()>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: void onAnimationsEnded()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneNames getTimeZoneNames()>
<android.view.View: int getRight()>
<android.support.v7.view.ViewPropertyAnimatorCompatSet: void start()>
<android.view.View: float getX()>
<android.view.View: float getY()>
<android.view.View: float getZ()>
<android.view.View: float getElevation()>
<android.view.View: float getTranslationX()>
<android.view.View: float getTranslationY()>
<android.icu.text.TimeZoneFormat: java.lang.String getGMTOffsetDigits()>
<android.view.View: float getTranslationZ()>
<android.view.View: boolean getClipToOutline()>
<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>
<android.view.View: void invalidateOutline()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF getCenter()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int getOrientation()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getScale()>
<android.support.v4.util.ArraySet: int size()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean isReady()>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<android.support.v4.app.FragmentActivity: android.support.v4.app.LoaderManager getSupportLoaderManager()>
<android.view.View: void damageInParent()>
<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>
<android.view.View: void computeOpaqueFlags()>
<com.google.protobuf.RepeatedFieldBuilder: java.util.List build()>
<com.google.protobuf.UnknownFieldSet$Field: java.util.List getFixed32List()>
<com.google.protobuf.UnknownFieldSet$Field: java.util.List getFixed64List()>
<com.google.protobuf.UnknownFieldSet$Field: java.util.List getGroupList()>
<com.google.protobuf.UnknownFieldSet$Field: java.util.List getLengthDelimitedList()>
<android.support.v4.app.FragmentActivity: void onReallyStop()>
<android.view.View: boolean hasOpaqueScrollbars()>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: android.view.ViewRootImpl getViewRootImpl()>
<android.view.View: android.view.ThreadedRenderer getHardwareRenderer()>
<android.support.v4.app.FragmentActivity: void onResumeFragments()>
<com.google.protobuf.RepeatedFieldBuilder: void dispose()>
<com.google.protobuf.UnknownFieldSet$Field: java.util.List getVarintList()>
<android.view.View: void postInvalidate()>
<android.view.View: void postInvalidateOnAnimation()>
<com.google.protobuf.RepeatedFieldBuilder: boolean isEmpty()>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<org.thoughtcrime.securesms.contacts.RecipientsEditor$RecipientsEditorTokenizer: java.util.List getNumbers()>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: void recomputePadding()>
<android.widget.ListView: boolean recycleOnMeasure()>
<libcore.reflect.GenericSignatureParser: void parseClassSignature()>
<libcore.reflect.GenericSignatureParser: void parseOptFormalTypeParameters()>
<android.view.View: int getScrollBarStyle()>
<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>
<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseFormalTypeParameter()>
<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>
<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()>
<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parseOptTypeArguments()>
<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeArgument()>
<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseTypeVariableSignature()>
<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: com.google.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>
<libcore.reflect.GenericSignatureParser: void scanSymbol()>
<libcore.reflect.GenericSignatureParser: void scanIdentifier()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: int getNumberOfLeadingZeros()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>
<com.google.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onImageLoaded()>
<android.support.v7.view.menu.CascadingMenuPopup$CascadingMenuInfo: android.widget.ListView getListView()>
<android.view.View: void resetRtlProperties()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onReady()>
<android.view.View: boolean canResolveLayoutDirection()>
<android.icu.text.NFRuleSet: void makeIntoFractionRuleSet()>
<android.view.View: boolean isLayoutDirectionInherited()>
<android.view.View: boolean isLayoutDirectionResolved()>
<android.view.View: boolean isPaddingResolved()>
<android.view.View: void resetResolvedPaddingInternal()>
<com.google.protobuf.LazyField: int getSerializedSize()>
<android.icu.text.NFRuleSet: boolean isFractionSet()>
<android.icu.text.NFRuleSet: java.lang.String getName()>
<android.icu.text.NFRuleSet: boolean isPublic()>
<com.google.protobuf.LazyField: com.google.protobuf.MessageLite getValue()>
<android.view.View: int getWindowAttachCount()>
<com.google.protobuf.LazyField: com.google.protobuf.ByteString toByteString()>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: android.view.WindowId getWindowId()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBase: com.fasterxml.jackson.databind.deser.ValueInstantiator getValueInstantiator()>
<org.whispersystems.signalservice.internal.util.StaticCredentialsProvider: java.lang.String getPassword()>
<org.whispersystems.signalservice.internal.util.StaticCredentialsProvider: java.lang.String getUser()>
<android.view.View: android.view.Display getDisplay()>
<android.view.View: android.view.IWindowSession getWindowSession()>
<android.view.View: void cancelPendingInputEvents()>
<android.app.RemoteInput: java.lang.CharSequence[] getChoices()>
<android.app.RemoteInput: boolean getAllowFreeFormInput()>
<android.view.View: long getDrawingTime()>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: boolean canHaveDisplayList()>
<android.view.View: android.view.RenderNode updateDisplayListIfDirty()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: void destroyDrawingCache()>
<android.support.v7.widget.GridLayout$Axis: android.support.v7.widget.GridLayout$Arc[] getArcs()>
<android.support.v7.widget.GridLayout$Axis: int getCount()>
<android.support.v7.widget.GridLayout$Axis: int[] getDeltas()>
<android.support.v7.widget.GridLayout$Axis: android.support.v7.widget.GridLayout$PackedMap getGroupBounds()>
<android.support.v7.widget.GridLayout$Axis: int[] getLeadingMargins()>
<android.support.v7.widget.GridLayout$Axis: int[] getLocations()>
<com.google.android.mms.pdu_alt.PduParser: com.google.android.mms.pdu_alt.GenericPdu parse()>
<android.support.v7.widget.GridLayout$Axis: int[] getTrailingMargins()>
<android.widget.Editor$InsertionHandleView: void show()>
<com.google.android.exoplayer2.ui.SubtitleView: void setUserDefaultStyle()>
<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>
<com.google.android.exoplayer2.ui.SubtitleView: void setUserDefaultTextSize()>
<android.support.v7.widget.GridLayout$Axis: void invalidateStructure()>
<android.support.v7.widget.GridLayout$Axis: void invalidateValues()>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>
<android.view.View: boolean isInEditMode()>
<android.view.View: boolean isHardwareAccelerated()>
<android.view.View: android.graphics.Rect getClipBounds()>
<org.whispersystems.libsignal.fingerprint.DisplayableFingerprint: java.lang.String getDisplayText()>
<android.widget.RelativeLayout$LayoutParams: int[] getRules()>
<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>
<android.icu.text.MessagePattern$Part$Type: boolean hasNumericValue()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: java.lang.Iterable abstractTypeResolvers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: java.lang.Iterable deserializerModifiers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: java.lang.Iterable deserializers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: boolean hasAbstractTypeResolvers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: boolean hasDeserializerModifiers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: boolean hasKeyDeserializers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: boolean hasValueInstantiators()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: java.lang.Iterable keyDeserializers()>
<com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig: java.lang.Iterable valueInstantiators()>
<android.media.WebVttParser: void eos()>
<android.media.WebVttParser: void yieldCue()>
<android.view.View: void setBackgroundBounds()>
<android.icu.text.MessagePattern$ArgType: boolean hasPluralStyle()>
<android.view.View: boolean isLayoutRequested()>
<android.support.v7.view.menu.MenuDialogHelper: void dismiss()>
<android.view.View: android.content.res.Resources getResources()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo: org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap getPage()>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<sun.net.ProgressMonitor: int getProgressUpdateThreshold()>
<android.widget.ListView: int getDividerHeight()>
<android.graphics.pdf.PdfDocument: void close()>
<android.view.View: boolean areDrawablesResolved()>
<android.view.View: void resetResolvedDrawablesInternal()>
<org.thoughtcrime.securesms.sms.OutgoingTextMessage: long getExpiresIn()>
<org.thoughtcrime.securesms.sms.OutgoingTextMessage: java.lang.String getMessageBody()>
<org.thoughtcrime.securesms.sms.OutgoingTextMessage: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<android.view.View: void refreshDrawableState()>
<org.thoughtcrime.securesms.sms.OutgoingTextMessage: int getSubscriptionId()>
<android.view.View: int[] getDrawableState()>
<org.thoughtcrime.securesms.sms.OutgoingTextMessage: boolean isKeyExchange()>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>
<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>
<android.widget.AbsListView$FlingRunnable: void startSpringback()>
<android.view.View: android.graphics.drawable.Drawable getForeground()>
<android.icu.text.TimeZoneFormat: boolean isFrozen()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat freeze()>
<android.icu.text.TimeZoneFormat: android.icu.text.TimeZoneFormat cloneAsThawed()>
<android.view.View: boolean isForegroundInsidePadding()>
<android.view.View: int getForegroundGravity()>
<android.widget.AbsListView$FlingRunnable: void endFling()>
<android.widget.AbsListView$FlingRunnable: void flywheelTouch()>
<org.thoughtcrime.securesms.MediaPreviewActivity: void bridge$lambda$0$MediaPreviewActivity()>
<android.widget.ListView: void wrapHeaderListAdapterInternal()>
<com.google.protobuf.AbstractMessageLite: byte[] toByteArray()>
<android.support.design.widget.TextInputLayout: java.lang.CharSequence getError()>
<android.view.View: int getPaddingTop()>
<android.view.View: int getPaddingBottom()>
<android.view.View: int getPaddingLeft()>
<android.view.View: int getPaddingStart()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure: int getId()>
<android.view.View: int getPaddingRight()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure: com.google.protobuf.ByteString getPrivateKey()>
<android.view.View: int getPaddingEnd()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure: com.google.protobuf.ByteString getPublicKey()>
<android.view.View: void resetPaddingToInitialValues()>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: void dismiss()>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: void hide()>
<org.whispersystems.libsignal.state.StorageProtos$PreKeyRecordStructure: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup: boolean isShowing()>
<android.view.View: android.graphics.Insets getOpticalInsets()>
<android.view.View: boolean isSelected()>
<android.view.View: boolean isActivated()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: android.view.View getRootView()>
<android.view.View: int[] getLocationOnScreen()>
<java.net.Inet6Address$Inet6AddressHolder: int hashCode()>
<java.net.Inet6Address$Inet6AddressHolder: boolean isAnyLocalAddress()>
<android.view.View: boolean isRootNamespace()>
<android.view.View: int getId()>
<android.view.View: java.lang.Object getTag()>
<android.util.DisplayMetrics: void setToDefaults()>
<org.webrtc.SurfaceViewRenderer: void lambda$updateFrameDimensionsAndReportEvents$0$SurfaceViewRenderer()>
<org.thoughtcrime.securesms.ConversationAdapter$ViewHolder: android.view.View getView()>
<android.view.View: boolean isInLayout()>
<android.icu.impl.StringPrepDataReader: byte[] getUnicodeVersion()>
<android.view.View: void forceLayout()>
<org.webrtc.SurfaceViewRenderer: void release()>
<org.webrtc.VideoFrameDrawer$YuvUploader: int[] getYuvTextures()>
<org.webrtc.VideoFrameDrawer$YuvUploader: void release()>
<android.view.View: int getSuggestedMinimumHeight()>
<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$TreeMapEntry nextEntry()>
<android.view.View: int getSuggestedMinimumWidth()>
<android.view.View: int getMinimumWidth()>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: void clearAnimation()>
<org.thoughtcrime.securesms.ConversationFragment: void onNewIntent()>
<org.thoughtcrime.securesms.notifications.MessageNotifier$DelayedNotification: void cancel()>
<org.thoughtcrime.securesms.ConversationFragment: void reloadList()>
<org.thoughtcrime.securesms.ConversationFragment: void scrollToBottom()>
<android.view.View: int getSystemUiVisibility()>
<android.view.View: int getWindowSystemUiVisibility()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.Class getDeclaringClass()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: java.lang.String getFullName()>
<com.fasterxml.jackson.databind.introspect.AnnotatedField: int getModifiers()>
<android.support.v4.app.FragmentHostCallback: void doLoaderDestroy()>
<android.support.v4.app.FragmentHostCallback: void doLoaderStart()>
<android.view.View: boolean canAcceptDrag()>
<android.support.v7.widget.RecyclerView$ViewHolder: void clearOldPosition()>
<android.support.v7.widget.RecyclerView$ViewHolder: void clearPayload()>
<android.support.v7.widget.RecyclerView$ViewHolder: void clearReturnedFromScrapFlag()>
<android.support.v7.widget.RecyclerView$ViewHolder: void clearTmpDetachFlag()>
<android.support.v7.widget.RecyclerView$ViewHolder: int getAdapterPosition()>
<android.support.v7.widget.RecyclerView$ViewHolder: long getItemId()>
<android.support.v7.widget.RecyclerView$ViewHolder: int getItemViewType()>
<android.support.v7.widget.RecyclerView$ViewHolder: int getLayoutPosition()>
<android.support.v7.widget.RecyclerView$ViewHolder: int getOldPosition()>
<android.support.v4.app.FragmentHostCallback: android.app.Activity getActivity()>
<android.support.v7.widget.RecyclerView$ViewHolder: int getPosition()>
<android.support.v4.app.FragmentHostCallback: android.content.Context getContext()>
<android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()>
<android.support.v7.widget.RecyclerView$ViewHolder: java.util.List getUnmodifiedPayloads()>
<android.widget.TextView$Drawables: boolean hasMetadata()>
<android.support.v4.app.FragmentHostCallback: android.os.Handler getHandler()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isAdapterPositionUnknown()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isBound()>
<android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManagerImpl()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isInvalid()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isRecyclable()>
<android.support.v4.app.FragmentHostCallback: boolean getRetainLoaders()>
<android.icu.text.AnyTransliterator$ScriptRunIterator: boolean next()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isRemoved()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isScrap()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isTmpDetached()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean isUpdated()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean needsUpdate()>
<android.view.View: int getOverScrollMode()>
<android.support.v7.widget.RecyclerView$ViewHolder: void resetInternal()>
<android.support.v7.widget.RecyclerView$ViewHolder: void saveOldPosition()>
<android.view.View: boolean hasNestedScrollingParent()>
<com.google.protobuf.SingleFieldBuilder: com.google.protobuf.GeneratedMessage build()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean shouldIgnore()>
<android.support.v4.app.FragmentHostCallback: void reportLoaderStart()>
<com.google.protobuf.SingleFieldBuilder: com.google.protobuf.GeneratedMessage$Builder getBuilder()>
<com.google.protobuf.SingleFieldBuilder: com.google.protobuf.GeneratedMessage getMessage()>
<com.google.protobuf.SingleFieldBuilder: void markDirty()>
<android.view.View: float getVerticalScrollFactor()>
<android.support.v7.widget.RecyclerView$ViewHolder: void unScrap()>
<android.support.v7.widget.RecyclerView$ViewHolder: boolean wasReturnedFromScrap()>
<android.view.View: int getRawTextDirection()>
<android.view.View: int getTextDirection()>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void addTextSticker()>
<android.view.View: boolean canResolveTextDirection()>
<android.view.View: boolean isTextDirectionInherited()>
<android.view.View: boolean isTextDirectionResolved()>
<android.view.View: int getRawTextAlignment()>
<okhttp3.MediaType: java.nio.charset.Charset charset()>
<android.view.View: int getTextAlignment()>
<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$LinkedHashMapEntry nextNode()>
<android.view.View: boolean canResolveTextAlignment()>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onDeleteSelected()>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onPaintUndo()>
<android.view.View: boolean isTextAlignmentInherited()>
<org.thoughtcrime.securesms.scribbles.ScribbleActivity: void onSave()>
<android.view.View: boolean isTextAlignmentResolved()>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.view.View: java.lang.String getTransitionName()>
<org.thoughtcrime.securesms.audio.AudioCodec: void stop()>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<org.thoughtcrime.securesms.ConversationActivity$13: void onResendMessage()>
<android.graphics.Rect: java.lang.String toShortString()>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: int width()>
<android.graphics.Rect: int height()>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: void setEmpty()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap: org.thoughtcrime.securesms.util.ListenableFutureTask get()>
<android.icu.text.StringPrep$Values: void reset()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseCache()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean hasTranslucentRoot()>
<android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCacheStates()>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: boolean extensionsAreInitialized()>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: int extensionsSerializedSize()>
<com.google.android.exoplayer2.decoder.DecoderCounters: void ensureUpdated()>
<com.google.zxing.common.BitArray: int getSize()>
<com.google.zxing.common.BitArray: int getSizeInBytes()>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: java.util.Map getExtensionFields()>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: void makeExtensionsImmutable()>
<com.google.protobuf.GeneratedMessage$ExtendableMessage: com.google.protobuf.GeneratedMessage$ExtendableMessage$ExtensionWriter newExtensionWriter()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: byte[] getAvatar()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: long getAvatarId()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: java.lang.String getEncodedId()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: byte[] getId()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: java.util.List getMembers()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: java.lang.String getTitle()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: boolean isActive()>
<org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord: boolean isMms()>
<okhttp3.Request$Builder: okhttp3.Request build()>
<com.google.zxing.common.reedsolomon.GenericGF: int getGeneratorBase()>
<com.google.zxing.common.reedsolomon.GenericGF: com.google.zxing.common.reedsolomon.GenericGFPoly getZero()>
<sun.security.x509.RDN: java.lang.String toString()>
<android.app.FragmentHostCallback: android.app.FragmentManagerImpl getFragmentManagerImpl()>
<org.thoughtcrime.securesms.giph.util.RecyclerViewPositionHelper: int findFirstVisibleItemPosition()>
<android.app.FragmentHostCallback: void doLoaderStart()>
<org.thoughtcrime.securesms.giph.util.RecyclerViewPositionHelper: int getItemCount()>
<org.thoughtcrime.securesms.attachments.DatabaseAttachment: org.thoughtcrime.securesms.attachments.AttachmentId getAttachmentId()>
<android.support.v7.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>
<org.thoughtcrime.securesms.attachments.DatabaseAttachment: long getMmsId()>
<android.support.v7.view.menu.ListMenuPresenter$MenuAdapter: int getCount()>
<org.thoughtcrime.securesms.attachments.DatabaseAttachment: boolean hasData()>
<org.thoughtcrime.securesms.attachments.DatabaseAttachment: boolean hasThumbnail()>
<android.support.v7.view.menu.ListMenuPresenter$MenuAdapter: void notifyDataSetChanged()>
<android.icu.text.AnyTransliterator: android.icu.text.Transliterator safeClone()>
<android.icu.impl.UResource$Value: java.lang.String toString()>
<android.view.View$SendViewStateChangedAccessibilityEvent: void run()>
<java.security.Signature$Delegate: void chooseFirstProvider()>
<java.lang.UNIXProcess: java.io.InputStream getInputStream()>
<org.whispersystems.libsignal.state.SessionRecord: void archiveCurrentState()>
<org.whispersystems.libsignal.state.SessionRecord: org.whispersystems.libsignal.state.SessionState getSessionState()>
<android.text.HtmlToSpannedConverter: android.text.Spanned convert()>
<org.whispersystems.libsignal.state.SessionRecord: byte[] serialize()>
<com.doomonafireball.betterpickers.hmspicker.HmsPickerBuilder: void show()>
<com.google.android.gms.maps.MapView$zza: void onDestroy()>
<com.google.android.gms.maps.MapView$zza: void onExitAmbient()>
<com.google.android.gms.maps.MapView$zza: void onLowMemory()>
<com.google.android.gms.maps.MapView$zza: void onPause()>
<com.google.android.gms.maps.MapView$zza: void onResume()>
<com.google.android.gms.maps.MapView$zza: void onStart()>
<com.google.android.gms.maps.MapView$zza: void onStop()>
<android.media.SubtitleController: android.media.SubtitleTrack getDefaultTrack()>
<com.google.protobuf.WireFormat$FieldType: com.google.protobuf.WireFormat$JavaType getJavaType()>
<com.google.protobuf.WireFormat$FieldType: int getWireType()>
<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatSpecifier getFormatSpecifier()>
<java.util.Formatter$FormatSpecifierParser: int getEndIdx()>
<com.tomergoldst.tooltips.ToolTip$Builder: com.tomergoldst.tooltips.ToolTip build()>
<android.media.SubtitleController: void selectDefaultTrack()>
<android.media.SubtitleController: void reset()>
<android.media.AudioFormat$Builder: android.media.AudioFormat build()>
<android.media.SubtitleController: void show()>
<android.media.SubtitleController: void hide()>
<com.soundcloud.android.crop.RotateBitmap: android.graphics.Bitmap getBitmap()>
<com.soundcloud.android.crop.RotateBitmap: int getHeight()>
<com.soundcloud.android.crop.RotateBitmap: android.graphics.Matrix getRotateMatrix()>
<com.soundcloud.android.crop.RotateBitmap: int getRotation()>
<com.soundcloud.android.crop.RotateBitmap: int getWidth()>
<com.soundcloud.android.crop.RotateBitmap: boolean isOrientationChanged()>
<com.soundcloud.android.crop.RotateBitmap: void recycle()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: java.util.List getAttachments()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: java.lang.String getBody()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: int getDistributionType()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: long getExpiresIn()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: long getSentTimeMillis()>
<org.thoughtcrime.securesms.mms.OutgoingMediaMessage: int getSubscriptionId()>
<java.lang.Boolean: boolean booleanValue()>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.widget.RecyclerView getListView()>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.preference.PreferenceScreen getPreferenceScreen()>
<android.support.v7.preference.PreferenceFragmentCompat: void onBindPreferences()>
<org.thoughtcrime.securesms.database.RecipientDatabase: java.util.Set getAllRecipients()>
<android.support.v7.preference.PreferenceFragmentCompat: android.support.v7.widget.RecyclerView$LayoutManager onCreateLayoutManager()>
<org.thoughtcrime.securesms.database.RecipientDatabase: android.database.Cursor getBlocked()>
<org.webrtc.SurfaceViewRenderer$1: void run()>
<org.whispersystems.jobqueue.persistence.PersistentStorage: java.util.List getAllUnencrypted()>
<com.fasterxml.jackson.core.JsonGenerator: void _throwInternal()>
<android.support.v7.preference.PreferenceFragmentCompat: void onUnbindPreferences()>
<org.thoughtcrime.securesms.database.RecipientDatabase: org.thoughtcrime.securesms.database.RecipientDatabase$BulkOperationsHandle resetAllDisplayNames()>
<com.fasterxml.jackson.core.JsonGenerator: boolean canOmitFields()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: boolean cancel()>
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper: void disable()>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper: void enable()>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper: void onSynced()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void finishRetain()>
<org.thoughtcrime.securesms.scribbles.viewmodel.Layer: float getX()>
<org.thoughtcrime.securesms.scribbles.viewmodel.Layer: float getY()>
<java.io.ObjectInputStream$HandleTable: void clear()>
<java.io.ObjectInputStream$HandleTable: int size()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void retain()>
<android.graphics.drawable.shapes.RectShape: android.graphics.RectF rect()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()>
<android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()>
<android.support.v13.view.inputmethod.InputContentInfoCompat: android.net.Uri getContentUri()>
<android.support.v13.view.inputmethod.InputContentInfoCompat: android.content.ClipDescription getDescription()>
<org.thoughtcrime.securesms.ConfirmIdentityDialog: void show()>
<android.support.v13.view.inputmethod.InputContentInfoCompat: void requestPermission()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Connected getConnected()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup getHangup()>
<com.dd.CircularProgressDrawable: int getSize()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus getVideoStreamingStatus()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: boolean hasConnected()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: boolean hasHangup()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data: boolean hasVideoStreamingStatus()>
<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>
<com.fasterxml.jackson.core.io.IOContext: char[] allocConcatBuffer()>
<com.fasterxml.jackson.core.io.IOContext: char[] allocTokenBuffer()>
<com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()>
<com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>
<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>
<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor: java.lang.String getName()>
<com.bumptech.glide.RequestManager: void pauseRequests()>
<com.bumptech.glide.RequestManager: void resumeRequests()>
<okhttp3.Headers$Builder: okhttp3.Headers build()>
<com.android.internal.view.menu.MenuPopupHelper$1: void onDismiss()>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: int getFlags()>
<android.content.Intent: java.lang.Object clone()>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.KeyEvent: char getNumber()>
<android.support.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>
<android.widget.AbsListView$3: void run()>
<org.webrtc.AndroidVideoTrackSourceObserver: void onCapturerStopped()>
<com.google.android.exoplayer2.BaseRenderer: void disable()>
<com.google.android.exoplayer2.BaseRenderer: com.google.android.exoplayer2.RendererCapabilities getCapabilities()>
<com.google.android.exoplayer2.BaseRenderer: com.google.android.exoplayer2.RendererConfiguration getConfiguration()>
<com.google.android.exoplayer2.BaseRenderer: int getIndex()>
<com.google.android.exoplayer2.BaseRenderer: int getState()>
<com.google.android.exoplayer2.BaseRenderer: com.google.android.exoplayer2.source.SampleStream getStream()>
<com.google.android.exoplayer2.BaseRenderer: int getTrackType()>
<com.google.android.exoplayer2.BaseRenderer: boolean hasReadStreamToEnd()>
<com.google.android.exoplayer2.BaseRenderer: boolean isCurrentStreamFinal()>
<com.google.android.exoplayer2.BaseRenderer: boolean isSourceReady()>
<com.google.android.exoplayer2.BaseRenderer: void setCurrentStreamFinal()>
<android.media.MiniThumbFile: void deactivate()>
<com.fasterxml.jackson.core.io.SegmentedStringWriter: void close()>
<com.fasterxml.jackson.core.io.SegmentedStringWriter: void flush()>
<com.fasterxml.jackson.core.io.SegmentedStringWriter: java.lang.String getAndClear()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup: long getId()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup: boolean hasId()>
<android.hardware.Camera: void release()>
<android.hardware.Camera: void unlock()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup: boolean isInitialized()>
<android.hardware.Camera: void startPreview()>
<android.hardware.Camera: void stopPreview()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Hangup$Builder toBuilder()>
<com.google.android.mms.util_alt.PduCache: void purgeAll()>
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>
<java.util.logging.Level: java.lang.String getCachedLocalizedLevelName()>
<java.util.logging.Level: java.lang.String getLocalizedLevelName()>
<android.widget.MediaController: android.view.View makeControllerView()>
<java.util.logging.Level: int intValue()>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: java.lang.String getType()>
<android.widget.MediaController: void show()>
<android.content.Intent: android.content.ClipData getClipData()>
<android.widget.MediaController: boolean isShowing()>
<android.widget.MediaController: void hide()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.database.Address getAddress()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.color.MaterialColor getColor()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.contacts.avatars.ContactPhoto getContactPhoto()>
<org.thoughtcrime.securesms.recipients.Recipient: android.net.Uri getContactUri()>
<org.thoughtcrime.securesms.recipients.Recipient: java.lang.String getCustomLabel()>
<org.thoughtcrime.securesms.recipients.Recipient: org.whispersystems.libsignal.util.guava.Optional getDefaultSubscriptionId()>
<org.thoughtcrime.securesms.recipients.Recipient: int getExpireMessages()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.contacts.avatars.FallbackContactPhoto getFallbackContactPhoto()>
<org.thoughtcrime.securesms.recipients.Recipient: java.lang.String getName()>
<com.google.zxing.common.CharacterSetECI: int getValue()>
<org.thoughtcrime.securesms.recipients.Recipient: java.util.List getParticipants()>
<org.thoughtcrime.securesms.recipients.Recipient: java.lang.String getProfileName()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.database.RecipientDatabase$RegisteredState getRegistered()>
<org.thoughtcrime.securesms.recipients.Recipient: android.net.Uri getRingtone()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState getVibrate()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean hasSeenInviteReminder()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isBlocked()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isGroupRecipient()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isMmsGroupRecipient()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isMuted()>
<com.google.protobuf.AbstractMessage: com.google.protobuf.UninitializedMessageException newUninitializedMessageException()>
<android.content.Intent: android.os.Bundle getExtras()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isProfileSharing()>
<android.content.Intent: int getFlags()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isPushGroupRecipient()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isResolving()>
<android.content.Intent: android.content.ComponentName getComponent()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isStale()>
<org.thoughtcrime.securesms.recipients.Recipient: boolean isSystemContact()>
<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap instance()>
<org.thoughtcrime.securesms.recipients.Recipient: org.thoughtcrime.securesms.recipients.Recipient resolve()>
<android.content.UndoOwner: java.lang.Object getData()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$Matches: boolean exactMatch()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree$Matches: boolean impossibleMatch()>
<com.android.internal.telephony.cdma.SmsMessage: void parseSms()>
<org.thoughtcrime.securesms.recipients.Recipient: void setStale()>
<org.thoughtcrime.securesms.recipients.Recipient: java.lang.String toShortString()>
<com.google.protobuf.LiteralByteString: int getOffsetIntoBytes()>
<com.google.protobuf.LiteralByteString: boolean isValidUtf8()>
<com.google.protobuf.LiteralByteString: com.google.protobuf.CodedInputStream newCodedInput()>
<com.google.protobuf.LiteralByteString: java.io.InputStream newInput()>
<com.google.protobuf.LiteralByteString: int size()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<libcore.io.Posix: int getpid()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: int getNumber()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: com.google.protobuf.DescriptorProtos$EnumValueOptions getOptions()>
<libcore.io.Posix: int gettid()>
<libcore.io.Posix: int getuid()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: boolean hasName()>
<android.support.v7.app.AppCompatDelegateImplV9$PanelFeatureState: boolean hasPanelItems()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: boolean hasNumber()>
<com.google.protobuf.DescriptorProtos$EnumValueDescriptorProto: boolean hasOptions()>
<android.icu.util.GregorianCalendar: boolean inDaylightTime()>
<org.webrtc.MediaStreamTrack: void dispose()>
<android.accounts.IAccountAuthenticator$Stub: android.os.IBinder asBinder()>
<android.content.Intent: int filterHashCode()>
<libcore.io.Posix: android.system.StructUtsname uname()>
<android.view.Window: android.content.Context getContext()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: android.view.Window getContainer()>
<android.view.Window: boolean isDestroyed()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: java.lang.String getInputType()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: com.google.protobuf.ByteString getInputTypeBytes()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: com.google.protobuf.DescriptorProtos$MethodOptions getOptions()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: java.lang.String getOutputType()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: com.google.protobuf.ByteString getOutputTypeBytes()>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.view.Window: android.view.Window$Callback getCallback()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: boolean hasInputType()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: boolean hasName()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: boolean hasOptions()>
<com.google.protobuf.DescriptorProtos$MethodDescriptorProto: boolean hasOutputType()>
<android.view.Window: android.view.Window$WindowControllerCallback getWindowControllerCallback()>
<sun.net.ProgressSource: boolean connected()>
<sun.net.ProgressSource: void close()>
<sun.net.ProgressSource: java.net.URL getURL()>
<sun.net.ProgressSource: java.lang.String getMethod()>
<sun.net.ProgressSource: java.lang.String getContentType()>
<sun.net.ProgressSource: long getProgress()>
<sun.net.ProgressSource: long getExpected()>
<sun.net.ProgressSource: sun.net.ProgressSource$State getState()>
<sun.net.ProgressSource: void beginTracking()>
<sun.net.ProgressSource: void finishTracking()>
<android.support.v7.widget.AppCompatSpinner$DropdownPopup: void computeContentWidth()>
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>
<android.view.Window: int getForcedWindowFlags()>
<android.view.Window: boolean hasSoftInputMode()>
<android.support.v4.widget.CircularProgressDrawable$Ring: int getAlpha()>
<android.support.v7.widget.AppCompatSpinner$DropdownPopup: java.lang.CharSequence getHintText()>
<android.support.v4.widget.CircularProgressDrawable$Ring: float getEndTrim()>
<android.support.v4.widget.CircularProgressDrawable$Ring: int getNextColor()>
<android.support.v4.widget.CircularProgressDrawable$Ring: int getNextColorIndex()>
<com.dd.MorphingAnimation: void start()>
<android.support.v4.widget.CircularProgressDrawable$Ring: float getStartTrim()>
<android.support.v4.widget.CircularProgressDrawable$Ring: int getStartingColor()>
<android.support.v4.widget.CircularProgressDrawable$Ring: float getStartingEndTrim()>
<android.support.v4.widget.CircularProgressDrawable$Ring: float getStartingRotation()>
<android.support.v4.widget.CircularProgressDrawable$Ring: float getStartingStartTrim()>
<android.support.v4.widget.CircularProgressDrawable$Ring: void goToNextColor()>
<android.support.v4.widget.CircularProgressDrawable$Ring: void resetOriginals()>
<org.thoughtcrime.securesms.ShareListItem: int getDistributionType()>
<org.thoughtcrime.securesms.ShareListItem: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.ShareListItem: long getThreadId()>
<android.view.Window: int getFeatures()>
<org.thoughtcrime.securesms.ShareListItem: void unbind()>
<android.view.Window: int getLocalFeatures()>
<android.view.Window: boolean haveDimAmount()>
<android.support.v4.widget.CircularProgressDrawable$Ring: void storeOriginals()>
<android.content.Intent: boolean migrateExtraStreamToClipData()>
<android.support.v4.util.MapCollections$ArrayIterator: boolean hasNext()>
<android.support.v4.util.MapCollections$ArrayIterator: java.lang.Object next()>
<android.support.v4.util.MapCollections$ArrayIterator: void remove()>
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>
<java.util.jar.Manifest: java.util.Map getEntries()>
<java.security.Provider$Service: java.lang.String getType()>
<java.security.Provider$Service: java.lang.String getAlgorithm()>
<java.security.Provider$Service: java.security.Provider getProvider()>
<java.security.Provider$Service: java.lang.String getClassName()>
<android.support.v7.widget.CardView$1: android.graphics.drawable.Drawable getCardBackground()>
<android.support.v7.widget.CardView$1: android.view.View getCardView()>
<android.support.v7.widget.CardView$1: boolean getPreventCornerOverlap()>
<android.support.v7.widget.CardView$1: boolean getUseCompatPadding()>
<android.support.v7.widget.ActionMenuView: void dismissPopupMenus()>
<android.text.BidiFormatter: boolean getStereoReset()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint getLocalFingerprint()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: org.whispersystems.libsignal.fingerprint.FingerprintProtos$LogicalFingerprint getRemoteFingerprint()>
<android.icu.impl.Trie2Writable: android.icu.impl.Trie2_32 toTrie2_32()>
<android.support.v7.widget.ActionMenuView: android.support.v7.widget.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<android.support.v7.widget.ActionMenuView: android.view.Menu getMenu()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: int getVersion()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: boolean hasLocalFingerprint()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: boolean hasRemoteFingerprint()>
<org.whispersystems.libsignal.fingerprint.FingerprintProtos$CombinedFingerprints: boolean hasVersion()>
<android.support.v7.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()>
<android.support.v7.widget.ActionMenuView: boolean isOverflowMenuShowing()>
<android.support.v4.app.DialogFragment: void dismiss()>
<android.icu.text.DateTimePatternGenerator$VariableField: int getType()>
<android.icu.text.DateTimePatternGenerator$VariableField: boolean isNumeric()>
<android.support.v4.app.DialogFragment: android.app.Dialog getDialog()>
<android.support.v4.app.DialogFragment: int getTheme()>
<java.util.AbstractList$Itr: void checkForComodification()>
<com.android.internal.widget.BackgroundFallback: boolean hasFallback()>
<android.support.v7.widget.ActionMenuView: android.support.v7.view.menu.MenuBuilder peekMenu()>
<android.support.v7.widget.ActionMenuView: boolean showOverflowMenu()>
<com.google.android.mms.pdu_alt.PduBody: int getPartsNum()>
<com.google.android.mms.pdu_alt.PduBody: void removeAll()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.content.BroadcastReceiver: void abortBroadcast()>
<com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView: void updatePadding()>
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
<android.content.BroadcastReceiver: void checkSynchronousHint()>
<com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView: void updatePaddingForBoldDate()>
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuPresenter$Callback getCallback()>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: void clear()>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: java.lang.String toString()>
<android.view.DisplayListCanvas: void recycle()>
<android.view.DisplayListCanvas: long finishRecording()>
<android.icu.text.DateTimePatternGenerator$SkeletonFields: int hashCode()>
<com.android.internal.widget.ToolbarWidgetWrapper: android.content.Context getContext()>
<com.android.internal.app.AlertController: void installContent()>
<android.widget.AbsListView$WindowRunnnable: void rememberWindowAttachCount()>
<android.widget.AbsListView$WindowRunnnable: boolean sameWindow()>
<android.content.res.ResourcesImpl: android.view.DisplayAdjustments getDisplayAdjustments()>
<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>
<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.ResourcesImpl: android.content.res.Configuration getConfiguration()>
<android.content.res.ResourcesImpl: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<java.lang.ProcessBuilder$NullInputStream: int read()>
<com.android.internal.app.AlertController: android.widget.ListView getListView()>
<java.util.TimeZone: java.lang.String getID()>
<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getAnimatorCache()>
<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.util.LongArray: void clear()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.util.LongArray: int size()>
<android.content.res.ResourcesImpl: void flushLayoutCache()>
<android.arch.core.internal.SafeIterableMap$ListIterator: boolean hasNext()>
<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment next()>
<libcore.net.event.NetworkEventDispatcher: void onNetworkConfigurationChanged()>
<com.google.protobuf.Descriptors$EnumDescriptor: java.util.List getValues()>
<org.thoughtcrime.securesms.video.exo.AttachmentDataSource: android.net.Uri getUri()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: double getEnteredNumber()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: int getLayoutId()>
<android.support.v7.app.AlertDialog: android.widget.ListView getListView()>
<java.net.AbstractPlainSocketImpl: java.io.FileDescriptor acquireFD()>
<java.io.ObjectOutputStream$ReplaceTable: void clear()>
<java.net.AbstractPlainSocketImpl: void releaseFD()>
<android.content.res.ResourcesImpl: android.content.res.ResourcesImpl$ThemeImpl newThemeImpl()>
<java.net.AbstractPlainSocketImpl: boolean isConnectionReset()>
<java.net.AbstractPlainSocketImpl: boolean isConnectionResetPending()>
<java.net.AbstractPlainSocketImpl: void setConnectionReset()>
<java.net.AbstractPlainSocketImpl: void setConnectionResetPending()>
<java.net.AbstractPlainSocketImpl: boolean isClosedOrPending()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: void reset()>
<java.net.AbstractPlainSocketImpl: int getTimeout()>
<sun.security.x509.CertificateVersion: java.lang.String toString()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: void setLeftRightEnabled()>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters create()>
<org.whispersystems.jobqueue.JobParameters$Builder: org.whispersystems.jobqueue.JobParameters$Builder withPersistence()>
<android.graphics.SurfaceTexture: void updateTexImage()>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.SurfaceTexture: void release()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: void updateDeleteButton()>
<android.graphics.SurfaceTexture: boolean isSingleBuffered()>
<com.doomonafireball.betterpickers.numberpicker.NumberPicker: void updateNumber()>
<android.support.v7.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()>
<android.widget.RemoteViews$MemoryUsageCounter: void clear()>
<android.widget.RemoteViews$MemoryUsageCounter: int getMemoryUsage()>
<android.view.ScaleGestureDetector: boolean isInProgress()>
<android.view.ScaleGestureDetector: float getFocusX()>
<android.view.ScaleGestureDetector: float getFocusY()>
<android.view.ScaleGestureDetector: float getScaleFactor()>
<android.support.v7.widget.RecyclerView$Recycler: void clear()>
<android.support.v7.widget.RecyclerView$Recycler: void clearOldPositions()>
<java.io.StringWriter: java.lang.String toString()>
<android.support.v7.widget.RecyclerView$Recycler: void clearScrap()>
<org.thoughtcrime.securesms.database.SmsDatabase$Reader: void close()>
<org.thoughtcrime.securesms.database.SmsDatabase$Reader: int getCount()>
<org.thoughtcrime.securesms.database.SmsDatabase$Reader: org.thoughtcrime.securesms.database.model.SmsMessageRecord getCurrent()>
<org.thoughtcrime.securesms.database.SmsDatabase$Reader: org.thoughtcrime.securesms.database.model.SmsMessageRecord getNext()>
<android.support.v7.widget.RecyclerView$Recycler: android.support.v7.widget.RecyclerView$RecycledViewPool getRecycledViewPool()>
<android.support.v7.widget.RecyclerView$Recycler: int getScrapCount()>
<android.support.v7.widget.RecyclerView$Recycler: java.util.List getScrapList()>
<com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool: void clearMemory()>
<org.thoughtcrime.securesms.components.AlertView: void setFailed()>
<android.media.Tokenizer$DataTokenizer: android.media.Tokenizer$TokenizerPhase start()>
<org.thoughtcrime.securesms.components.AlertView: void setNone()>
<org.thoughtcrime.securesms.components.AlertView: void setPendingApproval()>
<android.support.v7.widget.RecyclerView$Recycler: void markItemDecorInsetsDirty()>
<android.support.v7.widget.RecyclerView$Recycler: void markKnownViewsInvalid()>
<android.support.v7.widget.RecyclerView$Recycler: void recycleAndClearCachedViews()>
<android.support.v4.app.Fragment: android.support.v4.app.FragmentActivity getActivity()>
<android.support.v4.app.Fragment: android.view.View getAnimatingAway()>
<android.support.v4.app.Fragment: android.animation.Animator getAnimator()>
<android.support.v4.app.Fragment: android.os.Bundle getArguments()>
<android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()>
<android.support.v4.app.Fragment: android.content.Context getContext()>
<android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()>
<android.support.v4.app.Fragment: android.support.v4.app.LoaderManager getLoaderManager()>
<android.support.v4.app.Fragment: int getNextAnim()>
<android.support.v4.app.Fragment: int getNextTransition()>
<android.support.v4.app.Fragment: int getNextTransitionStyle()>
<android.support.v4.app.Fragment: android.support.v4.app.Fragment getParentFragment()>
<android.support.v4.app.Fragment: android.content.res.Resources getResources()>
<android.support.v4.app.Fragment: int getStateAfterAnimating()>
<android.support.v4.app.Fragment: android.support.v4.app.Fragment getTargetFragment()>
<android.support.v4.app.Fragment: android.view.View getView()>
<android.support.v4.app.Fragment: void initState()>
<android.support.v4.app.Fragment: void instantiateChildFragmentManager()>
<android.widget.Editor$InsertionPointCursorController: void hide()>
<android.support.v4.app.Fragment: boolean isAdded()>
<android.support.v4.app.Fragment: boolean isHidden()>
<android.support.v4.app.Fragment: boolean isHideReplaced()>
<android.widget.Editor$InsertionPointCursorController: void onDetached()>
<android.support.v4.app.Fragment: boolean isInBackStack()>
<android.support.v4.app.Fragment: boolean isPostponed()>
<android.support.v4.app.Fragment: boolean isRemoving()>
<android.widget.Editor$InsertionPointCursorController: void invalidateHandle()>
<android.support.v4.app.Fragment: boolean isStateSaved()>
<android.support.v4.app.Fragment: boolean isVisible()>
<android.support.v4.app.Fragment: void noteStateNotSaved()>
<android.support.v7.widget.LinearSmoothScroller: int getHorizontalSnapPreference()>
<android.support.v7.widget.LinearSmoothScroller: int getVerticalSnapPreference()>
<android.support.v7.widget.LinearSmoothScroller: void onStart()>
<android.support.v7.widget.LinearSmoothScroller: void onStop()>
<android.support.v4.app.Fragment: android.support.v4.app.FragmentManager peekChildFragmentManager()>
<android.support.v4.app.Fragment: void performDestroy()>
<android.support.v4.app.Fragment: void performDestroyView()>
<android.support.v4.app.Fragment: void performDetach()>
<android.support.v7.preference.PreferenceManager: android.support.v7.preference.PreferenceScreen getPreferenceScreen()>
<android.support.v4.app.Fragment: void performPause()>
<android.support.v4.app.Fragment: void performReallyStop()>
<android.support.v4.app.Fragment: void performResume()>
<android.support.v7.widget.RecyclerView$Recycler: void updateViewCacheSize()>
<android.support.v4.app.Fragment: void performStart()>
<android.support.v4.app.Fragment: void performStop()>
<android.widget.VideoView: void start()>
<android.widget.VideoView: void pause()>
<android.widget.VideoView: int getDuration()>
<android.widget.VideoView: int getCurrentPosition()>
<android.widget.VideoView: boolean isPlaying()>
<android.widget.VideoView: int getBufferPercentage()>
<android.widget.VideoView: boolean canPause()>
<android.widget.VideoView: boolean canSeekBackward()>
<android.widget.VideoView: boolean canSeekForward()>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: java.lang.String toString()>
<org.thoughtcrime.securesms.ConversationListItem: int getDistributionType()>
<org.thoughtcrime.securesms.ConversationListItem: long getLastSeen()>
<org.thoughtcrime.securesms.ConversationListItem: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.ConversationListItem: long getThreadId()>
<android.support.v4.app.Fragment: void startPostponedEnterTransition()>
<com.android.mms.transaction.Transaction: int getServiceId()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getAlpha()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getPivotX()>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection: com.google.android.exoplayer2.source.TrackGroup getTrackGroup()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getPivotY()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getRotation()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getRotationX()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getRotationY()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getScaleX()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getScaleY()>
<com.nineoldandroids.view.animation.AnimatorProxy: int getScrollX()>
<android.util.ArraySet: int size()>
<com.nineoldandroids.view.animation.AnimatorProxy: int getScrollY()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getTranslationX()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getTranslationY()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getX()>
<com.nineoldandroids.view.animation.AnimatorProxy: float getY()>
<com.google.android.exoplayer2.trackselection.BaseTrackSelection: int length()>
<android.util.ArraySet: int hashCode()>
<android.graphics.drawable.RippleComponent$RenderNodeAnimatorSet: void end()>
<android.graphics.drawable.RippleComponent$RenderNodeAnimatorSet: boolean isRunning()>
<android.icu.text.DateIntervalInfo$PatternInfo: java.lang.String getFirstPart()>
<android.icu.text.DateIntervalInfo$PatternInfo: java.lang.String getSecondPart()>
<android.icu.text.DateIntervalInfo$PatternInfo: boolean firstDateInPtnIsLaterDate()>
<java.io.ObjectInputStream$ValidationList: void clear()>
<android.support.v4.util.LongSparseArray: void clear()>
<android.support.design.widget.TabLayout: int getSelectedTabPosition()>
<android.support.design.widget.TabLayout: int getTabCount()>
<android.support.design.widget.TabLayout: int getTabMaxWidth()>
<android.support.design.widget.TabLayout: android.support.design.widget.TabLayout$Tab newTab()>
<android.support.v4.util.MapCollections: java.util.Set getEntrySet()>
<android.support.design.widget.TabLayout: void populateFromPagerAdapter()>
<android.support.v4.util.MapCollections: java.util.Set getKeySet()>
<android.support.v4.util.MapCollections: java.util.Collection getValues()>
<android.support.design.widget.TabLayout: void removeAllTabs()>
<android.support.v4.util.LongSparseArray: int size()>
<android.widget.Editor$Blink: void cancel()>
<android.widget.Editor$Blink: void uncancel()>
<sun.security.x509.X509CertImpl: sun.security.x509.SerialNumber getSerialNumberObject()>
<com.google.android.gms.common.zzd$zza: int hashCode()>
<com.google.android.gms.common.zzd$zza: com.google.android.gms.dynamic.zzd zzaph()>
<com.google.android.gms.common.zzd$zza: int zzapi()>
<android.bluetooth.BluetoothA2dp: boolean doBind()>
<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$TreeMapEntry nextEntry()>
<android.icu.text.TransliteratorParser: char getDotStandIn()>
<android.widget.ListPopupWindow: boolean isDropDownAlwaysVisible()>
<android.view.FrameInfo: void markInputHandlingStart()>
<android.view.FrameInfo: void markAnimationsStart()>
<android.view.FrameInfo: void markPerformTraversalsStart()>
<android.widget.ListPopupWindow: int getAnimationStyle()>
<android.app.ActivityOptions: int getAnimationType()>
<android.widget.ListPopupWindow: android.view.View getAnchorView()>
<android.widget.ListPopupWindow: int getWidth()>
<android.app.ActivityOptions: int getExitCoordinatorKey()>
<android.widget.ListPopupWindow: int getHeight()>
<android.widget.ListPopupWindow: void show()>
<android.app.ActivityOptions: android.os.Bundle toBundle()>
<android.widget.ListPopupWindow: void clearListSelection()>
<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>
<android.widget.ListPopupWindow: int getSelectedItemPosition()>
<android.widget.ListPopupWindow: long getSelectedItemId()>
<android.widget.ListPopupWindow: android.view.View getSelectedView()>
<android.widget.ListPopupWindow: android.widget.ListView getListView()>
<com.google.protobuf.Descriptors$FileDescriptor: java.util.List getMessageTypes()>
<com.google.protobuf.Descriptors$FileDescriptor: java.lang.String getName()>
<com.google.protobuf.Descriptors$FileDescriptor: java.lang.String getPackage()>
<com.google.protobuf.Descriptors$FileDescriptor: com.google.protobuf.DescriptorProtos$FileDescriptorProto toProto()>
<android.text.Layout: java.lang.CharSequence getText()>
<android.text.Layout: android.text.TextPaint getPaint()>
<android.text.Layout: int getWidth()>
<android.text.Layout: float getSpacingMultiplier()>
<android.text.Layout: float getSpacingAdd()>
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<org.whispersystems.jobqueue.requirements.NetworkRequirement: boolean isPresent()>
<com.fasterxml.jackson.databind.PropertyName: java.lang.String getSimpleName()>
<com.fasterxml.jackson.databind.PropertyName: boolean hasSimpleName()>
<com.fasterxml.jackson.databind.PropertyName: com.fasterxml.jackson.databind.PropertyName internSimpleName()>
<com.fasterxml.jackson.databind.PropertyName: boolean isEmpty()>
<android.support.v7.widget.ListViewCompat: boolean shouldShowSelectorCompat()>
<android.support.v7.widget.ListViewCompat: void updateSelectorStateCompat()>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>
<android.view.MotionEvent: void recycle()>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: int getSource()>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: int getActionMasked()>
<android.view.MotionEvent: int getActionIndex()>
<android.view.MotionEvent: boolean isTouchEvent()>
<android.view.MotionEvent: int getFlags()>
<android.view.MotionEvent: boolean isTainted()>
<android.view.MotionEvent: boolean isTargetAccessibilityFocus()>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: long getEventTimeNano()>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: float getY()>
<org.thoughtcrime.securesms.util.DirectoryHelper$RefreshResult: java.util.List getNewUsers()>
<org.thoughtcrime.securesms.util.DirectoryHelper$RefreshResult: boolean isFresh()>
<android.view.MotionEvent: int getPointerCount()>
<java.nio.ByteBuffer: boolean hasArray()>
<java.nio.ByteBuffer: byte[] array()>
<java.nio.ByteBuffer: int arrayOffset()>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: int getButtonState()>
<android.view.MotionEvent: int getActionButton()>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: int getHistorySize()>
<com.android.internal.view.menu.MenuBuilder: void clearAll()>
<com.android.internal.view.menu.MenuBuilder: void clear()>
<java.nio.ByteBuffer: java.nio.ByteOrder order()>
<org.thoughtcrime.securesms.components.reminder.ReminderView: void hide()>
<android.icu.text.DateFormatSymbols$CalendarDataSink: void visitAllResources()>
<android.view.MotionEvent: int getEdgeFlags()>
<com.android.internal.view.menu.MenuBuilder: int size()>
<com.google.android.mms.pdu_alt.SendConf: byte[] getMessageId()>
<com.google.android.mms.pdu_alt.SendConf: int getResponseStatus()>
<com.google.android.mms.pdu_alt.SendConf: byte[] getTransactionId()>
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<android.content.res.CompatibilityInfo: boolean isScalingRequired()>
<android.content.res.CompatibilityInfo: boolean supportsScreen()>
<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>
<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>
<android.view.MotionEvent: int getPointerIdBits()>
<com.android.internal.view.menu.MenuBuilder: void close()>
<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.android.internal.view.menu.MenuBuilder: void flagActionItems()>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.android.internal.view.menu.MenuBuilder: void clearHeader()>
<com.android.internal.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()>
<com.android.internal.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()>
<com.android.internal.view.menu.MenuBuilder: android.view.View getHeaderView()>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: java.lang.String getDefaultTypeId()>
<com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap$IteratorImpl: boolean hasNext()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: com.fasterxml.jackson.databind.deser.SettableBeanProperty getProperty()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: java.lang.String getTypePropertyName()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty: boolean hasDefaultType()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: com.google.protobuf.ByteString getLeadingCommentsBytes()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: java.util.List getPathList()>
<com.fasterxml.jackson.databind.util.ObjectBuffer: void _reset()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: java.util.List getSpanList()>
<com.fasterxml.jackson.databind.util.ObjectBuffer: int bufferedSize()>
<android.widget.AbsListView$RecycleBin: void markChildrenDirty()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: com.google.protobuf.ByteString getTrailingCommentsBytes()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: boolean hasLeadingComments()>
<com.google.protobuf.DescriptorProtos$SourceCodeInfo$Location: boolean hasTrailingComments()>
<com.github.chrisbanes.photoview.CustomGestureDetector: boolean isDragging()>
<com.github.chrisbanes.photoview.CustomGestureDetector: boolean isScaling()>
<com.fasterxml.jackson.databind.util.ObjectBuffer: int initialCapacity()>
<android.widget.AbsListView$RecycleBin: void clear()>
<com.fasterxml.jackson.databind.util.ObjectBuffer: java.lang.Object[] resetAndStart()>
<android.support.v7.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getWrappedDrawable()>
<android.widget.AbsListView$RecycleBin: void clearTransientStateViews()>
<android.support.v7.widget.TintTypedArray: void recycle()>
<android.widget.AbsListView$RecycleBin: void removeSkippedScrap()>
<android.widget.AbsListView$RecycleBin: void scrapActiveViews()>
<com.fasterxml.jackson.databind.SerializerProvider: java.text.DateFormat _dateFormat()>
<android.widget.AbsListView$RecycleBin: void fullyDetachScrapViews()>
<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Class getActiveView()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.google.android.exoplayer2.audio.AudioTrack: void disableTunneling()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer getDefaultNullValueSerializer()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>
<com.fasterxml.jackson.databind.SerializerProvider: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.SerializerProvider: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.google.android.exoplayer2.audio.AudioTrack: void handleDiscontinuity()>
<com.google.android.exoplayer2.audio.AudioTrack: boolean hasPendingData()>
<com.google.android.exoplayer2.audio.AudioTrack: boolean isEnded()>
<com.google.android.exoplayer2.audio.AudioTrack: void pause()>
<java.text.DateFormat: java.util.TimeZone getTimeZone()>
<com.google.android.exoplayer2.audio.AudioTrack: void play()>
<java.text.DateFormat: boolean isLenient()>
<com.google.android.exoplayer2.audio.AudioTrack: void release()>
<com.google.android.exoplayer2.audio.AudioTrack: void reset()>
<java.util.concurrent.atomic.AtomicLong: long get()>
<android.support.v4.app.RemoteInput: boolean getAllowFreeFormInput()>
<android.support.v4.app.RemoteInput: java.util.Set getAllowedDataTypes()>
<android.support.v4.app.RemoteInput: java.lang.CharSequence[] getChoices()>
<android.support.v4.app.RemoteInput: android.os.Bundle getExtras()>
<android.support.v4.app.RemoteInput: java.lang.CharSequence getLabel()>
<android.support.v4.app.RemoteInput: java.lang.String getResultKey()>
<android.support.v4.app.RemoteInput: boolean isDataOnly()>
<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
<android.media.ExifInterface: byte[] getThumbnail()>
<android.media.SubtitleTrack$CueList$EntryIterator: boolean hasNext()>
<android.media.SubtitleTrack$CueList$EntryIterator: void remove()>
<org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn: java.lang.String getMmsc()>
<org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn: java.lang.String getPassword()>
<org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn: int getPort()>
<org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn: java.lang.String getProxy()>
<org.thoughtcrime.securesms.mms.LegacyMmsConnection$Apn: boolean hasProxy()>
<android.media.RingtoneManager: int inferStreamType()>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.media.RingtoneManager: android.database.Cursor getCursor()>
<android.support.v4.view.NestedScrollingChildHelper: boolean isNestedScrollingEnabled()>
<android.widget.RatingBar: boolean isIndicator()>
<android.widget.RatingBar: int getNumStars()>
<android.widget.RatingBar: float getRating()>
<android.support.v4.view.NestedScrollingChildHelper: void stopNestedScroll()>
<android.widget.RatingBar: boolean canUserSetProgress()>
<org.thoughtcrime.securesms.recipients.RecipientProvider$RecipientCache: void reset()>
<org.thoughtcrime.securesms.components.webrtc.PercentFrameLayout: boolean isHidden()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.JsonDeserializer build()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.deser.AbstractDeserializer buildAbstract()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addCreators()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.deser.SettableAnyProperty getAnySetter()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getBuildMethod()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: java.util.List getInjectables()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader getObjectIdReader()>
<com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder: com.fasterxml.jackson.databind.deser.ValueInstantiator getValueInstantiator()>
<android.icu.util.UResourceBundle: android.icu.util.UResourceBundleIterator getIterator()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addFields()>
<com.bumptech.glide.Glide: void clearMemory()>
<com.bumptech.glide.Glide: com.bumptech.glide.manager.ConnectivityMonitorFactory getConnectivityMonitorFactory()>
<com.bumptech.glide.Glide: com.bumptech.glide.GlideContext getGlideContext()>
<com.bumptech.glide.Glide: com.bumptech.glide.manager.RequestManagerRetriever getRequestManagerRetriever()>
<libcore.reflect.GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()>
<org.thoughtcrime.securesms.contacts.ContactSelectionListAdapter: java.util.Map getSelectedContacts()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addInjectables()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _addMethods()>
<java.net.Parts: java.lang.String getPath()>
<java.net.Parts: java.lang.String getQuery()>
<java.net.Parts: java.lang.String getRef()>
<java.security.KeyPair: java.security.PublicKey getPublic()>
<java.security.KeyPair: java.security.PrivateKey getPrivate()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _removeUnwantedProperties()>
<android.icu.text.PluralRules$RuleList: java.util.Set getKeywords()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameProperties()>
<android.icu.text.PluralRules$RuleList: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _renameWithWrappers()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: void _sortProperties()>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: long getPositionUs()>
<com.google.android.exoplayer2.audio.MediaCodecAudioRenderer: void onAudioTrackPositionDiscontinuity()>
<sun.security.x509.UniqueIdentity: java.lang.String toString()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector collect()>
<com.bumptech.glide.request.transition.DrawableCrossFadeFactory$Builder: com.bumptech.glide.request.transition.DrawableCrossFadeFactory build()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMember getAnyGetter()>
<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void tryCancel()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getAnySetterMethod()>
<android.widget.Scroller: boolean isFinished()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassDef()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>
<android.widget.Scroller: int getStartX()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.util.Set getIgnoredPropertyNames()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.util.Map getInjectables()>
<android.widget.Scroller: int getFinalX()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getJsonValueMethod()>
<android.widget.Scroller: boolean computeScrollOffset()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: java.util.List getProperties()>
<com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector: com.fasterxml.jackson.databind.JavaType getType()>
<java.io.PrintStream: void println()>
<android.media.UnstyledTextExtractor: void onLineEnd()>
<android.media.UnstyledTextExtractor: android.media.TextTrackCueSpan[][] getText()>
<android.widget.Scroller: void abortAnimation()>
<com.doomonafireball.betterpickers.datepicker.DateView: com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView getDate()>
<com.doomonafireball.betterpickers.datepicker.DateView: com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView getMonth()>
<com.doomonafireball.betterpickers.datepicker.DateView: com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView getYear()>
<org.thoughtcrime.securesms.database.MmsDatabase$OutgoingMessageReader: org.thoughtcrime.securesms.database.model.MessageRecord getCurrent()>
<com.google.android.gms.iid.InstanceID: java.security.KeyPair zzbop()>
<com.google.android.gms.iid.InstanceID: void zzboq()>
<com.google.android.gms.iid.InstanceID: boolean zzbot()>
<java.util.concurrent.CountDownLatch: void countDown()>
<android.os.Looper: java.lang.Thread getThread()>
<android.os.Looper: android.os.MessageQueue getQueue()>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler: void addObserver()>
<com.google.android.exoplayer2.video.VideoFrameReleaseTimeHelper$VSyncSampler: void removeObserver()>
<com.dd.StateManager: int getProgress()>
<com.dd.StateManager: boolean isEnabled()>
<java.net.URI: java.lang.String getScheme()>
<java.net.URI: boolean isAbsolute()>
<java.net.URI: boolean isOpaque()>
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.lang.String getAuthority()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: int getType()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: java.lang.String getString()>
<java.net.URI: java.lang.String getUserInfo()>
<java.net.URI: java.lang.String getHost()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: java.lang.String getAliasString()>
<java.net.URI: int getPort()>
<java.net.URI: java.lang.String getPath()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: int getInt()>
<java.net.URI: java.lang.String getQuery()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: int[] getIntVector()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: android.icu.impl.UResource$Array getArray()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: android.icu.impl.UResource$Table getTable()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: java.lang.String[] getStringArray()>
<org.thoughtcrime.securesms.mms.Slide: org.thoughtcrime.securesms.attachments.Attachment asAttachment()>
<android.icu.impl.ICUResourceBundleReader$ReaderValue: java.lang.String[] getStringArrayOrStringAsArray()>
<org.thoughtcrime.securesms.mms.Slide: org.whispersystems.libsignal.util.guava.Optional getBody()>
<org.thoughtcrime.securesms.mms.Slide: java.lang.String getContentType()>
<org.thoughtcrime.securesms.mms.Slide: java.lang.String getFastPreflightId()>
<org.thoughtcrime.securesms.mms.Slide: org.whispersystems.libsignal.util.guava.Optional getFileName()>
<org.thoughtcrime.securesms.mms.Slide: long getFileSize()>
<org.thoughtcrime.securesms.mms.Slide: long getTransferState()>
<org.thoughtcrime.securesms.mms.Slide: android.net.Uri getUri()>
<org.thoughtcrime.securesms.mms.Slide: boolean hasLocation()>
<com.fasterxml.jackson.databind.node.ObjectNode: int size()>
<org.thoughtcrime.securesms.mms.Slide: boolean isInProgress()>
<org.thoughtcrime.securesms.mms.Slide: boolean isPendingDownload()>
<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId getRoid()>
<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: java.lang.Object getUnresolvedId()>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.Object getTypeHandler()>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.Object getValueHandler()>
<com.fasterxml.jackson.databind.type.TypeBase: java.lang.String toCanonical()>
<com.google.android.gms.maps.model.LatLng: int getVersionCode()>
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.provider.Settings$GenerationTracker: boolean isGenerationChanged()>
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()>
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()>
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()>
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()>
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()>
<android.database.sqlite.SQLiteProgram: void onCorruption()>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog create()>
<android.support.v7.app.AlertDialog$Builder: android.content.Context getContext()>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.text.DateFormat getDateFormat()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getTypeResolverBuilder()>
<org.thoughtcrime.securesms.ConversationActivity: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.introspect.VisibilityChecker getVisibilityChecker()>
<org.thoughtcrime.securesms.util.Rfc5724Uri: java.lang.String getPath()>
<org.thoughtcrime.securesms.util.Rfc5724Uri: java.util.Map getQueryParams()>
<android.text.StaticLayout: int getTopPadding()>
<android.text.StaticLayout: int getBottomPadding()>
<org.thoughtcrime.securesms.ConversationActivity: void onAttachmentChanged()>
<org.thoughtcrime.securesms.database.loaders.ConversationLoader: long getLastSeen()>
<org.thoughtcrime.securesms.database.loaders.ConversationLoader: boolean hasLimit()>
<org.thoughtcrime.securesms.database.loaders.ConversationLoader: boolean hasSent()>
<org.thoughtcrime.securesms.ConversationActivity: void onEmojiToggle()>
<android.support.v7.app.AlertDialog$Builder: android.support.v7.app.AlertDialog show()>
<android.support.v4.view.ViewPager: boolean beginFakeDrag()>
<org.thoughtcrime.securesms.ConversationActivity: void onRecorderCanceled()>
<android.text.PackedObjectVector: int size()>
<org.thoughtcrime.securesms.ConversationActivity: void onRecorderFinished()>
<android.support.v4.view.ViewPager: void dataSetChanged()>
<org.thoughtcrime.securesms.ConversationActivity: void onRecorderStarted()>
<org.thoughtcrime.securesms.ConversationActivity: org.thoughtcrime.securesms.util.concurrent.ListenableFuture saveDraft()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable: void cancelLoad()>
<android.support.v4.view.ViewPager: void endFakeDrag()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable: boolean isLoadCanceled()>
<java.util.zip.ZipCoder: boolean isUTF8()>
<android.support.v4.view.ViewPager: android.support.v4.view.PagerAdapter getAdapter()>
<android.support.v4.view.ViewPager: int getCurrentItem()>
<android.support.v4.view.ViewPager: void initViewPager()>
<android.content.res.Resources$ThemeKey: android.content.res.Resources$ThemeKey clone()>
<android.content.res.AssetManager$AssetInputStream: long getNativeAsset()>
<android.support.v4.view.ViewPager: boolean isFakeDragging()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data build()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$Data buildPartial()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()>
<android.support.v7.widget.GridLayout$Axis$1: android.support.v7.widget.GridLayout$Arc[] sort()>
<android.support.v4.view.ViewPropertyAnimatorCompat: void cancel()>
<android.support.v4.view.ViewPropertyAnimatorCompat: long getDuration()>
<org.whispersystems.libsignal.fingerprint.Fingerprint: org.whispersystems.libsignal.fingerprint.DisplayableFingerprint getDisplayableFingerprint()>
<org.whispersystems.libsignal.fingerprint.Fingerprint: org.whispersystems.libsignal.fingerprint.ScannableFingerprint getScannableFingerprint()>
<org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout: int getKeyboardHeight()>
<org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout: boolean isLandscape()>
<org.thoughtcrime.securesms.components.KeyboardAwareLinearLayout: void onKeyboardClose()>
<android.support.v4.view.ViewPropertyAnimatorCompat: void start()>
<com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer: java.util.EnumMap constructMap()>
<android.widget.Toast: void show()>
<java.lang.Character: char charValue()>
<android.graphics.Paint: void reset()>
<com.bumptech.glide.manager.SupportRequestManagerFragment: com.bumptech.glide.manager.ActivityFragmentLifecycle getGlideLifecycle()>
<com.bumptech.glide.manager.SupportRequestManagerFragment: com.bumptech.glide.RequestManager getRequestManager()>
<com.bumptech.glide.manager.SupportRequestManagerFragment: com.bumptech.glide.manager.RequestManagerTreeNode getRequestManagerTreeNode()>
<android.graphics.Paint: long getNativeInstance()>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<android.graphics.Paint: int getFlags()>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: boolean isDither()>
<android.util.SparseBooleanArray: int size()>
<org.thoughtcrime.securesms.groups.GroupManager$GroupActionResult: org.thoughtcrime.securesms.recipients.Recipient getGroupRecipient()>
<org.thoughtcrime.securesms.groups.GroupManager$GroupActionResult: long getThreadId()>
<android.util.SparseBooleanArray: void clear()>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: int getAlpha()>
<android.graphics.Paint: float getStrokeWidth()>
<org.thoughtcrime.securesms.giph.ui.GiphyAdapter$GiphyViewHolder: void setModelReady()>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<java.util.ResourceBundle: java.util.Locale getLocale()>
<android.support.v4.view.ViewPager: void populate()>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<java.util.regex.Matcher: int end()>
<android.graphics.Paint: boolean hasShadowLayer()>
<java.util.regex.Matcher: java.lang.String group()>
<android.graphics.Paint: java.util.Locale getTextLocale()>
<android.graphics.Paint: android.os.LocaleList getTextLocales()>
<java.util.regex.Matcher: int groupCount()>
<java.util.regex.Matcher: boolean matches()>
<java.util.regex.Matcher: boolean find()>
<android.graphics.Paint: boolean isElegantTextHeight()>
<java.util.regex.Matcher: boolean lookingAt()>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Paint: float getTextScaleX()>
<android.graphics.Paint: float getLetterSpacing()>
<android.graphics.Paint: java.lang.String getFontFeatureSettings()>
<android.support.design.widget.CollapsingToolbarLayout: int getScrimVisibleHeightTrigger()>
<android.graphics.Paint: float ascent()>
<android.graphics.Paint: float descent()>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<android.graphics.Paint: float getFontSpacing()>
<java.util.regex.Matcher: boolean hitEnd()>
<java.util.regex.Matcher: boolean requireEnd()>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<java.util.regex.Matcher: int start()>
<org.thoughtcrime.securesms.audio.AudioRecorder: void startRecording()>
<android.hardware.display.IDisplayManagerCallback$Stub: android.os.IBinder asBinder()>
<org.thoughtcrime.securesms.audio.AudioRecorder: org.thoughtcrime.securesms.util.concurrent.ListenableFuture stopRecording()>
<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>
<com.fasterxml.jackson.databind.util.EnumResolver: java.lang.Class getEnumClass()>
<com.fasterxml.jackson.databind.util.EnumResolver: java.util.List getEnums()>
<com.fasterxml.jackson.databind.util.EnumResolver: int lastValidIndex()>
<com.android.mms.transaction.TransactionBundle: java.lang.String getMmscUrl()>
<com.android.mms.transaction.TransactionBundle: java.lang.String getProxyAddress()>
<com.android.mms.transaction.TransactionBundle: int getProxyPort()>
<com.android.mms.transaction.TransactionBundle: byte[] getPushData()>
<com.android.mms.transaction.TransactionBundle: int getTransactionType()>
<com.android.mms.transaction.TransactionBundle: java.lang.String getUri()>
<android.support.design.widget.CollapsingToolbarLayout: void updateScrimVisibility()>
<org.webrtc.CameraVideoCapturer$CameraStatistics: void addFrame()>
<org.webrtc.CameraVideoCapturer$CameraStatistics: void release()>
<android.icu.text.TransliteratorParser$RuleHalf: void removeContext()>
<android.media.SubtitleTrack$CueList$1: java.util.Iterator iterator()>
<com.google.android.gms.dynamic.zza: void onDestroy()>
<com.google.android.gms.dynamic.zza: void onLowMemory()>
<com.google.android.gms.dynamic.zza: void onPause()>
<com.google.android.gms.dynamic.zza: void onResume()>
<com.google.android.gms.dynamic.zza: void onStart()>
<com.google.android.gms.dynamic.zza: void onStop()>
<com.google.android.gms.dynamic.zza: com.google.android.gms.dynamic.LifecycleDelegate zzbdt()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: void fixAccess()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: com.fasterxml.jackson.databind.introspect.AnnotationMap getAllAnnotations()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMember: com.fasterxml.jackson.databind.introspect.AnnotatedClass getContextClass()>
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>
<com.annimon.stream.Stream: java.util.List toList()>
<android.animation.ObjectAnimator: java.lang.Object getTarget()>
<com.soundcloud.android.crop.ImageViewTouchBase: float calculateMaxZoom()>
<android.animation.ObjectAnimator: void setupStartValues()>
<android.animation.ObjectAnimator: void setupEndValues()>
<android.support.v4.app.LoaderManagerImpl: void doDestroy()>
<com.soundcloud.android.crop.ImageViewTouchBase: android.graphics.Matrix getImageViewMatrix()>
<com.soundcloud.android.crop.ImageViewTouchBase: float getScale()>
<android.support.v4.app.LoaderManagerImpl: void doReportNextStart()>
<android.support.v4.app.LoaderManagerImpl: void doReportStart()>
<android.support.v4.util.SimpleArrayMap: void clear()>
<android.support.v4.app.LoaderManagerImpl: void doRetain()>
<android.support.v4.app.LoaderManagerImpl: void doStart()>
<android.support.v4.app.LoaderManagerImpl: void doStop()>
<org.thoughtcrime.securesms.recipients.RecipientProvider: void clearCache()>
<android.support.v4.view.PagerAdapter: android.os.Parcelable saveState()>
<android.support.v4.app.LoaderManagerImpl: void finishRetain()>
<android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>
<com.google.i18n.phonenumbers.Phonemetadata$NumberFormat: int leadingDigitsPatternSize()>
<android.support.v4.util.SimpleArrayMap: int indexOfNull()>
<android.support.v4.util.SimpleArrayMap: boolean isEmpty()>
<sun.util.locale.LocaleSyntaxException: int getErrorIndex()>
<android.widget.SpellChecker: void closeSession()>
<android.app.Service: void stopSelf()>
<android.widget.SpellChecker: void onSelectionChanged()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure build()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure$Builder: org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure buildPartial()>
<android.support.v4.util.SimpleArrayMap: int size()>
<android.support.v4.util.Pools$SimplePool: java.lang.Object acquire()>
<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader: com.fasterxml.jackson.databind.JsonDeserializer getDeserializer()>
<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader: com.fasterxml.jackson.databind.JavaType getIdType()>
<com.fasterxml.jackson.databind.deser.impl.ObjectIdReader: boolean maySerializeAsObject()>
<com.google.android.gms.iid.zzd: boolean isEmpty()>
<android.icu.impl.UCharacterProperty$IntProperty: int getSource()>
<com.google.android.gms.iid.zzd: void zzbow()>
<com.google.zxing.qrcode.decoder.Mode: int getBits()>
<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>
<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>
<android.view.inputmethod.InputContentInfo: void requestPermission()>
<android.icu.text.PluralRules$FixedDecimalSamples: java.lang.String toString()>
<android.view.ViewGroup$ViewLocationHolder: void recycle()>
<java.util.HashSet: void clear()>
<java.util.HashSet: java.lang.Object clone()>
<libcore.reflect.ListOfVariables: java.lang.reflect.TypeVariable[] getArray()>
<java.security.Timestamp: java.util.Date getTimestamp()>
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>
<java.nio.StringCharBuffer: char get()>
<com.google.android.mms.pdu_alt.SendReq: byte[] getTransactionId()>
<android.os.LocaleList: boolean isEmpty()>
<android.os.LocaleList: int size()>
<android.os.LocaleList: int hashCode()>
<android.os.LocaleList: java.lang.String toLanguageTags()>
<android.support.v7.app.AppCompatDelegateImplV14: boolean isHandleNativeActionModesEnabled()>
<com.google.android.mms.pdu_alt.RetrieveConf: byte[] getContentType()>
<com.google.i18n.phonenumbers.NumberParseException: com.google.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>
<com.google.android.mms.pdu_alt.RetrieveConf: byte[] getMessageId()>
<com.google.android.mms.pdu_alt.RetrieveConf: int getRetrieveStatus()>
<com.google.android.mms.pdu_alt.RetrieveConf: byte[] getTransactionId()>
<android.transition.Scene: android.view.ViewGroup getSceneRoot()>
<android.transition.Scene: void enter()>
<android.icu.text.TimeZoneFormat$GMTOffsetField: char getType()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialTextsView: com.nineoldandroids.animation.ObjectAnimator getDisappearAnimator()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialTextsView: com.nineoldandroids.animation.ObjectAnimator getReappearAnimator()>
<android.view.accessibility.AccessibilityManager: boolean isEnabled()>
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>
<com.fasterxml.jackson.databind.deser.std.MapDeserializer: java.lang.Class getMapClass()>
<org.thoughtcrime.securesms.ConversationActivity$26$1: void onComplete()>
<android.util.PathParser$PathData: long getNativePtr()>
<org.thoughtcrime.securesms.DeviceAddFragment: android.widget.ImageView getDevicesImage()>
<org.whispersystems.libsignal.util.Pair: java.lang.Object first()>
<org.whispersystems.libsignal.util.Pair: java.lang.Object second()>
<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>
<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>
<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>
<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>
<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>
<com.google.android.gms.iid.zzc: void zzbou()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasBackgroundColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasForegroundColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasEdgeType()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasEdgeColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasWindowColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: android.graphics.Typeface getTypeface()>
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()>
<android.widget.ActionMenuPresenter: boolean showOverflowMenu()>
<android.widget.ActionMenuPresenter: boolean hideOverflowMenu()>
<android.app.SearchManager: void stopSearch()>
<android.widget.ActionMenuPresenter: boolean dismissPopupMenus()>
<android.widget.ActionMenuPresenter: boolean hideSubMenus()>
<android.widget.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<org.thoughtcrime.securesms.attachments.AttachmentId: long getRowId()>
<org.thoughtcrime.securesms.attachments.AttachmentId: long getUniqueId()>
<org.thoughtcrime.securesms.attachments.AttachmentId: int hashCode()>
<java.io.ObjectStreamClass$FieldReflector: java.io.ObjectStreamField[] getFields()>
<org.thoughtcrime.securesms.attachments.AttachmentId: java.lang.String[] toStrings()>
<android.icu.impl.locale.BaseLocale: java.lang.String getLanguage()>
<android.icu.impl.locale.BaseLocale: java.lang.String getScript()>
<android.icu.impl.locale.BaseLocale: java.lang.String getRegion()>
<android.icu.impl.locale.BaseLocale: java.lang.String getVariant()>
<java.net.Inet6AddressImpl: void clearAddressCache()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: com.fasterxml.jackson.databind.BeanProperty getProperty()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.databind.deser.SettableAnyProperty: boolean hasValueDeserializer()>
<java.net.Inet6AddressImpl: java.net.InetAddress anyLocalAddress()>
<java.net.Inet6AddressImpl: java.net.InetAddress[] loopbackAddresses()>
<com.fasterxml.jackson.databind.util.LRUMap: void clear()>
<org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState: int getId()>
<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>
<java.util.concurrent.ThreadPoolExecutor: void onShutdown()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void notify()>
<java.lang.Object: void notifyAll()>
<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>
<java.util.concurrent.ThreadPoolExecutor: void shutdown()>
<com.google.android.gms.maps.model.CameraPosition: int getVersionCode()>
<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>
<java.util.concurrent.ThreadPoolExecutor: void ensurePrestart()>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: java.lang.String getOpPackageName()>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
<android.support.design.widget.AppBarLayout: int getTopInset()>
<android.support.design.widget.AppBarLayout: int getTotalScrollRange()>
<java.util.concurrent.ThreadPoolExecutor: void terminated()>
<org.thoughtcrime.securesms.crypto.MasterSecretUnion: org.whispersystems.libsignal.util.guava.Optional getAsymmetricMasterSecret()>
<org.thoughtcrime.securesms.crypto.MasterSecretUnion: org.whispersystems.libsignal.util.guava.Optional getMasterSecret()>
<android.media.MediaPlayer$TimeProvider: void close()>
<android.media.MediaPlayer$TimeProvider: void onStopped()>
<com.android.internal.policy.DecorView: void startChanging()>
<com.android.internal.policy.DecorView: void finishChanging()>
<android.content.ContextWrapper: int getUserId()>
<java.util.WeakHashMap: void clear()>
<android.content.ContextWrapper: boolean isRestricted()>
<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>
<sun.util.calendar.CalendarDate: int getYear()>
<sun.util.calendar.CalendarDate: boolean isLeapYear()>
<sun.util.calendar.CalendarDate: int getMonth()>
<sun.util.calendar.CalendarDate: int getDayOfMonth()>
<sun.util.calendar.CalendarDate: int getDayOfWeek()>
<sun.util.calendar.CalendarDate: int getHours()>
<sun.util.calendar.CalendarDate: int getMinutes()>
<sun.util.calendar.CalendarDate: int getSeconds()>
<sun.util.calendar.CalendarDate: int getMillis()>
<sun.util.calendar.CalendarDate: long getTimeOfDay()>
<com.android.mms.service_alt.MmsNetworkManager: java.lang.String getApnName()>
<sun.util.calendar.CalendarDate: boolean isNormalized()>
<sun.util.calendar.CalendarDate: boolean isStandardTime()>
<sun.util.calendar.CalendarDate: boolean isDaylightTime()>
<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>
<com.android.mms.service_alt.MmsNetworkManager: com.android.mms.service_alt.MmsHttpClient getOrCreateHttpClient()>
<com.android.mms.service_alt.MmsNetworkManager: void releaseNetwork()>
<android.os.IRemoteCallback$Stub$Proxy: android.os.IBinder asBinder()>
<sun.util.calendar.CalendarDate: java.lang.Object clone()>
<sun.util.calendar.CalendarDate: int getZoneOffset()>
<android.text.InputFilter$LengthFilter: int getMax()>
<android.bluetooth.IBluetoothProfileServiceConnection$Stub: android.os.IBinder asBinder()>
<android.app.Notification$Action$Builder: android.app.Notification$Action build()>
<java.math.BigInteger: java.math.BigInt getBigInt()>
<java.util.IdentityHashMap: void clear()>
<java.math.BigInteger: void prepareJavaRepresentation()>
<java.math.BigInteger: byte[] toByteArray()>
<java.math.BigInteger: java.math.BigInteger abs()>
<java.util.IdentityHashMap: java.util.Collection values()>
<java.math.BigInteger: java.math.BigInteger negate()>
<sun.util.locale.BaseLocale: java.lang.String getLanguage()>
<sun.util.locale.BaseLocale: java.lang.String getScript()>
<sun.util.locale.BaseLocale: java.lang.String getRegion()>
<sun.util.locale.BaseLocale: java.lang.String getVariant()>
<java.math.BigInteger: int signum()>
<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()>
<com.android.internal.policy.DecorView: boolean shouldAnimatePrimaryActionModeView()>
<java.math.BigInteger: int bitLength()>
<java.math.BigInteger: int getLowestSetBit()>
<org.thoughtcrime.securesms.TransportOptions: java.util.List getEnabledTransports()>
<org.thoughtcrime.securesms.TransportOptions: org.thoughtcrime.securesms.TransportOption getSelectedTransport()>
<android.icu.text.DateIntervalInfo: java.lang.String getFallbackIntervalPattern()>
<android.icu.text.DateIntervalInfo: boolean getDefaultOrder()>
<android.icu.text.DateIntervalInfo: java.lang.Object clone()>
<android.icu.text.DateIntervalInfo: android.icu.text.DateIntervalInfo freeze()>
<java.math.BigInteger: int getFirstNonzeroDigit()>
<com.soundcloud.android.crop.CropUtil$BackgroundJob$1: void run()>
<com.android.internal.policy.DecorView: boolean isShowingCaption()>
<com.android.internal.view.ActionBarPolicy: int getMaxActionButtons()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getArrayPoolSizeInBytes()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getBitmapPoolSize()>
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getMemoryCacheSize()>
<com.android.internal.view.ActionBarPolicy: boolean showsOverflowMenuButton()>
<com.android.internal.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()>
<com.android.internal.view.ActionBarPolicy: boolean hasEmbeddedTabs()>
<com.android.internal.view.ActionBarPolicy: boolean enableHomeButtonByDefault()>
<android.support.v7.widget.helper.ItemTouchHelper: boolean hasRunningRecoverAnim()>
<android.support.v7.widget.helper.ItemTouchHelper: void obtainVelocityTracker()>
<com.fasterxml.jackson.core.JsonProcessingException: com.fasterxml.jackson.core.JsonLocation getLocation()>
<android.support.v7.widget.helper.ItemTouchHelper: boolean scrollIfNecessary()>
<java.util.HashMap: java.util.HashMap$Node[] resize()>
<java.util.HashMap: void clear()>
<android.icu.util.UResourceBundleIterator: boolean hasNext()>
<com.google.protobuf.Descriptors$FieldDescriptor$Type: com.google.protobuf.Descriptors$FieldDescriptor$JavaType getJavaType()>
<android.icu.util.RuleBasedTimeZone: boolean isFrozen()>
<android.icu.util.RuleBasedTimeZone: android.icu.util.TimeZone freeze()>
<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>
<android.support.v7.app.TwilightManager: boolean isNight()>
<org.thoughtcrime.securesms.DeviceListItem: long getDeviceId()>
<org.thoughtcrime.securesms.DeviceListItem: java.lang.String getDeviceName()>
<java.util.HashMap: java.lang.Object clone()>
<android.telephony.TelephonyManager: int getCurrentPhoneType()>
<org.thoughtcrime.securesms.database.MmsSmsDatabase$Reader: void close()>
<org.thoughtcrime.securesms.database.MmsSmsDatabase$Reader: org.thoughtcrime.securesms.database.model.MessageRecord getCurrent()>
<org.thoughtcrime.securesms.database.MmsSmsDatabase$Reader: org.thoughtcrime.securesms.database.model.MessageRecord getNext()>
<java.util.Date: int getYear()>
<java.util.Date: int getMonth()>
<java.util.Date: int getDate()>
<java.util.Date: int getHours()>
<java.util.Date: int getMinutes()>
<java.util.Date: int getSeconds()>
<android.support.v7.widget.ChildHelper: int getChildCount()>
<android.support.v7.widget.ChildHelper: int getUnfilteredChildCount()>
<android.support.v7.widget.ChildHelper: void removeAllViewsUnfiltered()>
<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledByDefault()>
<com.fasterxml.jackson.core.JsonFactory$Feature: int getMask()>
<android.support.v7.widget.TintInfo: void clear()>
<org.thoughtcrime.securesms.scribbles.multitouch.MoveGestureDetector: android.graphics.PointF getFocusDelta()>
<android.media.Cea608CCParser$StyleCode: boolean isItalics()>
<android.media.Cea608CCParser$StyleCode: boolean isUnderline()>
<android.media.Cea608CCParser$StyleCode: java.lang.String toString()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.widget.AdapterView: int getSelectedItemPosition()>
<android.widget.AdapterView: long getSelectedItemId()>
<android.widget.AdapterView: java.lang.Object getSelectedItem()>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.app.LoadedApk: java.lang.String getPackageName()>
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.widget.AdapterView: void checkFocus()>
<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<org.whispersystems.libsignal.fingerprint.ScannableFingerprint: byte[] getSerialized()>
<android.widget.AdapterView: void selectionChanged()>
<java.io.ObjectStreamClass$ExceptionInfo: java.io.InvalidClassException newInvalidClassException()>
<android.widget.AdapterView: void handleDataChanged()>
<android.widget.AdapterView: void checkSelectionChanged()>
<android.widget.AdapterView: int findSyncPosition()>
<org.thoughtcrime.securesms.database.SmsDatabase$OutgoingMessageReader: org.thoughtcrime.securesms.database.model.MessageRecord getCurrent()>
<android.widget.AdapterView: void rememberSyncState()>
<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>
<android.app.LoadedApk: java.lang.String getResDir()>
<android.app.LoadedApk: java.lang.String[] getSplitResDirs()>
<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>
<android.app.LoadedApk: java.io.File getDataDirFile()>
<android.app.LoadedApk: java.io.File getDeviceProtectedDataDirFile()>
<android.app.LoadedApk: java.io.File getCredentialProtectedDataDirFile()>
<android.view.DisplayEventReceiver: void scheduleVsync()>
<android.net.Uri: boolean isOpaque()>
<android.net.Uri: java.lang.String toSafeString()>
<com.bumptech.glide.util.LruCache: void clearMemory()>
<com.bumptech.glide.util.LruCache: int getCurrentSize()>
<org.thoughtcrime.securesms.database.MmsSmsDatabase: android.database.Cursor getUnread()>
<android.media.WebVttRenderingWidget$RegionLayout: void prepForPrune()>
<android.media.WebVttRenderingWidget$RegionLayout: boolean prune()>
<android.media.WebVttRenderingWidget$RegionLayout: android.media.TextTrackRegion getRegion()>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: int getNotificationBigText()>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: int getNotificationText()>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: int getNotificationTitle()>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: java.util.List getPages()>
<org.thoughtcrime.securesms.ExperienceUpgradeActivity$ExperienceUpgrade: int getVersion()>
<android.net.Uri: android.net.Uri getCanonicalUri()>
<org.whispersystems.libsignal.state.SignedPreKeyRecord: int getId()>
<org.whispersystems.libsignal.state.SignedPreKeyRecord: org.whispersystems.libsignal.ecc.ECKeyPair getKeyPair()>
<org.whispersystems.libsignal.state.SignedPreKeyRecord: byte[] getSignature()>
<org.whispersystems.libsignal.state.SignedPreKeyRecord: byte[] serialize()>
<android.support.design.widget.CheckableImageButton: boolean isChecked()>
<android.os.ParcelableParcel: android.os.Parcel getParcel()>
<android.os.ParcelableParcel: java.lang.ClassLoader getClassLoader()>
<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirs()>
<java.util.Vector$1: boolean hasMoreElements()>
<java.util.Vector$1: java.lang.Object nextElement()>
<org.greenrobot.eventbus.EventBus: java.util.concurrent.ExecutorService getExecutorService()>
<java.lang.StackTraceElement: java.lang.String getClassName()>
<java.lang.StackTraceElement: boolean isNativeMethod()>
<android.animation.StateListAnimator: android.view.View getTarget()>
<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>
<android.support.v4.widget.NestedScrollView: int getMaxScrollAmount()>
<android.support.v4.widget.NestedScrollView: int getNestedScrollAxes()>
<android.support.v4.widget.NestedScrollView: int getScrollRange()>
<sun.util.locale.ParseStatus: void reset()>
<sun.util.locale.ParseStatus: boolean isError()>
<android.animation.StateListAnimator: void jumpToCurrentState()>
<android.animation.StateListAnimator: int getChangingConfigurations()>
<android.animation.StateListAnimator: android.content.res.ConstantState createConstantState()>
<android.icu.util.TimeArrayTimeZoneRule: boolean isTransitionRule()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext: java.util.List getMembersList()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext: java.lang.String getName()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext: com.google.protobuf.ByteString getNameBytes()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext: org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext$Type getType()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$GroupContext: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<android.animation.Keyframe: boolean hasValue()>
<android.animation.Keyframe: boolean valueWasSetOnStart()>
<android.animation.Keyframe: float getFraction()>
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>
<android.animation.Keyframe: java.lang.Class getType()>
<android.support.v4.widget.CursorAdapter: void onContentChanged()>
<org.thoughtcrime.securesms.database.GroupDatabase$Reader: void close()>
<org.thoughtcrime.securesms.database.GroupDatabase$Reader: org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord getCurrent()>
<org.thoughtcrime.securesms.database.GroupDatabase$Reader: org.thoughtcrime.securesms.database.GroupDatabase$GroupRecord getNext()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$Descriptor getContainingType()>
<com.google.protobuf.Descriptors$FieldDescriptor: java.lang.Object getDefaultValue()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$EnumDescriptor getEnumType()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$Descriptor getExtensionScope()>
<com.google.protobuf.Descriptors$FieldDescriptor: int getIndex()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$FieldDescriptor$JavaType getJavaType()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.WireFormat$JavaType getLiteJavaType()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.WireFormat$FieldType getLiteType()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$Descriptor getMessageType()>
<com.google.protobuf.Descriptors$FieldDescriptor: int getNumber()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.DescriptorProtos$FieldOptions getOptions()>
<com.google.protobuf.Descriptors$FieldDescriptor: com.google.protobuf.Descriptors$FieldDescriptor$Type getType()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isExtension()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isOptional()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isPackable()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isPacked()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isRepeated()>
<com.google.protobuf.Descriptors$FieldDescriptor: boolean isRequired()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.PropertyName getFullName()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String getManagedReferenceName()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.PropertyMetadata getMetadata()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: java.lang.String getName()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.introspect.ObjectIdInfo getObjectIdInfo()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.JavaType getType()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.JsonDeserializer getValueDeserializer()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.jsontype.TypeDeserializer getValueTypeDeserializer()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: com.fasterxml.jackson.databind.PropertyName getWrapperName()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: boolean hasValueDeserializer()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: boolean hasValueTypeDeserializer()>
<com.fasterxml.jackson.databind.deser.SettableBeanProperty: boolean hasViews()>
<android.app.ITransientNotification$Stub: android.os.IBinder asBinder()>
<android.view.ViewGroup: int getDescendantFocusability()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionInfoCompat: java.lang.CharSequence getDisplayName()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionInfoCompat: int getMcc()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionInfoCompat: int getMnc()>
<org.thoughtcrime.securesms.util.dualsim.SubscriptionInfoCompat: int getSubscriptionId()>
<android.view.ViewGroup: boolean isShowingContextMenuWithCoords()>
<com.nineoldandroids.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<com.nineoldandroids.animation.PropertyValuesHolder: void init()>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _releaseBuffers()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.view.ViewGroup: android.view.View getDeepestFocusedChild()>
<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>
<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>
<org.thoughtcrime.securesms.database.GroupDatabase: byte[] allocateGroupId()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>
<org.thoughtcrime.securesms.database.GroupDatabase: org.thoughtcrime.securesms.database.GroupDatabase$Reader getGroups()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.text.DateFormat getDateFormat()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.util.Locale getLocale()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: java.util.TimeZone getTimeZone()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isAnnotationProcessingEnabled()>
<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean shouldSortPropertiesAlphabetically()>
<org.thoughtcrime.securesms.mms.OutgoingGroupMediaMessage: boolean isGroupQuit()>
<org.thoughtcrime.securesms.mms.OutgoingGroupMediaMessage: boolean isGroupUpdate()>
<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>
<sun.security.x509.AlgorithmId: java.lang.String getName()>
<sun.security.x509.AlgorithmId: java.lang.String paramsToString()>
<sun.security.x509.AlgorithmId: java.lang.String toString()>
<android.view.ViewGroup: java.util.ArrayList buildTouchDispatchChildList()>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions autoClone()>
<org.thoughtcrime.securesms.ConversationItem: void lambda$onModified$0$ConversationItem()>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions clone()>
<android.support.v4.view.AccessibilityDelegateCompat: android.view.View$AccessibilityDelegate getBridge()>
<android.view.ViewGroup: int getNumChildrenForAccessibility()>
<sun.net.ftp.impl.FtpClient: boolean isConnected()>
<android.view.ViewGroup: boolean isLayoutModeOptical()>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.load.Options getOptions()>
<com.bumptech.glide.request.RequestOptions: com.bumptech.glide.request.RequestOptions lock()>
<com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer: com.fasterxml.jackson.databind.deser.impl.PropertyValue buffered()>
<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>
<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>
<android.view.ViewGroup: boolean getClipChildren()>
<com.google.android.exoplayer2.Timeline$Period: long getDurationUs()>
<com.google.android.exoplayer2.Timeline$Period: long getPositionInWindowMs()>
<android.view.ViewGroup: boolean getClipToPadding()>
<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>
<sun.net.ftp.impl.FtpClient: sun.net.ftp.FtpReplyCode getLastReplyCode()>
<sun.net.ftp.impl.FtpClient: java.lang.String getLastResponseString()>
<sun.net.ftp.impl.FtpClient: long getLastTransferSize()>
<android.transition.VisibilityPropagation: java.lang.String[] getPropagationProperties()>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<org.webrtc.EglRenderer: void bridge$lambda$0$EglRenderer()>
<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String getName()>
<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.Class getType()>
<com.fasterxml.jackson.databind.jsontype.NamedType: boolean hasName()>
<com.google.android.exoplayer2.SimpleExoPlayer: com.google.android.exoplayer2.audio.AudioProcessor[] buildAudioProcessors()>
<org.webrtc.EglRenderer: void release()>
<com.google.protobuf.UninitializedMessageException: com.google.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException()>
<android.support.v4.view.PointerIconCompat: java.lang.Object getPointerIcon()>
<com.fasterxml.jackson.core.JsonStreamContext: int getEntryCount()>
<com.fasterxml.jackson.core.JsonStreamContext: java.lang.String getTypeDesc()>
<com.fasterxml.jackson.core.JsonStreamContext: boolean inArray()>
<com.fasterxml.jackson.core.JsonStreamContext: boolean inObject()>
<com.fasterxml.jackson.core.JsonStreamContext: boolean inRoot()>
<java.io.FileDescriptor: boolean valid()>
<java.io.FileDescriptor: int getInt$()>
<java.io.FileDescriptor: boolean isSocket$()>
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>
<org.thoughtcrime.securesms.util.DirectoryHelper$AccountHolder: android.accounts.Account getAccount()>
<org.thoughtcrime.securesms.util.DirectoryHelper$AccountHolder: boolean isFresh()>
<android.view.inputmethod.InputMethodManager: void clearBindingLocked()>
<android.view.inputmethod.InputMethodManager: void clearConnectionLocked()>
<android.view.inputmethod.InputMethodManager: void finishInputLocked()>
<android.media.Tokenizer$TagTokenizer: android.media.Tokenizer$TokenizerPhase start()>
<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>
<org.webrtc.GlRectDrawer: void release()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.Class getActiveView()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.cfg.ContextAttributes getAttributes()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: java.lang.String getRootName()>
<com.fasterxml.jackson.databind.cfg.MapperConfigBase: com.fasterxml.jackson.databind.jsontype.SubtypeResolver getSubtypeResolver()>
<com.google.android.exoplayer2.SimpleExoPlayer: long getBufferedPosition()>
<com.google.android.exoplayer2.SimpleExoPlayer: long getCurrentPosition()>
<com.google.android.exoplayer2.SimpleExoPlayer: com.google.android.exoplayer2.Timeline getCurrentTimeline()>
<com.google.android.exoplayer2.SimpleExoPlayer: com.google.android.exoplayer2.trackselection.TrackSelectionArray getCurrentTrackSelections()>
<com.google.android.exoplayer2.SimpleExoPlayer: int getCurrentWindowIndex()>
<com.google.android.exoplayer2.SimpleExoPlayer: long getDuration()>
<android.view.ViewGroup: int getChildCount()>
<com.google.android.exoplayer2.SimpleExoPlayer: boolean getPlayWhenReady()>
<android.transition.Transition: java.util.List getTargetIds()>
<android.transition.Transition: java.util.List getTargets()>
<android.transition.Transition: java.util.List getTargetNames()>
<com.google.android.exoplayer2.SimpleExoPlayer: int getPlaybackState()>
<android.transition.Transition: java.util.List getTargetTypes()>
<com.google.protobuf.Descriptors$Descriptor: java.util.List getFields()>
<com.google.protobuf.Descriptors$Descriptor: java.util.List getNestedTypes()>
<com.google.protobuf.Descriptors$Descriptor: com.google.protobuf.DescriptorProtos$MessageOptions getOptions()>
<android.view.ViewGroup: void clearDisappearingChildren()>
<com.google.android.mms.pdu_alt.PduComposer$BufferStack: void copy()>
<com.google.android.mms.pdu_alt.PduComposer$BufferStack: com.google.android.mms.pdu_alt.PduComposer$PositionMarker mark()>
<com.google.android.mms.pdu_alt.PduComposer$BufferStack: void newbuf()>
<com.google.android.mms.pdu_alt.PduComposer$BufferStack: void pop()>
<android.database.DataSetObservable: void notifyChanged()>
<android.util.MapCollections: java.util.Set getEntrySet()>
<android.util.MapCollections: java.util.Set getKeySet()>
<android.database.DataSetObservable: void notifyInvalidated()>
<android.util.MapCollections: java.util.Collection getValues()>
<android.view.inputmethod.InputMethodManager: void checkFocus()>
<android.view.inputmethod.InputMethodManager: void closeCurrentInput()>
<android.widget.CheckedTextView: boolean isChecked()>
<android.database.AbstractCursor: boolean isClosed()>
<android.icu.impl.ICUResourceBundleReader$Container: int getSize()>
<android.database.AbstractCursor: int getPosition()>
<android.database.AbstractCursor: boolean moveToFirst()>
<android.database.AbstractCursor: boolean moveToNext()>
<android.database.AbstractCursor: boolean isAfterLast()>
<android.content.ContentProvider: android.content.Context getContext()>
<android.view.ViewGroup: int getNestedScrollAxes()>
<android.database.sqlite.SQLiteConnection: void close()>
<android.view.Choreographer: long getFrameIntervalNanos()>
<android.view.Choreographer: long getFrameTime()>
<android.view.Choreographer: long getFrameTimeNanos()>
<android.view.Choreographer: void doScheduleVsync()>
<libcore.io.IoTracker: void reset()>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>
<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>
<android.icu.util.ULocale: java.util.Locale toLocale()>
<android.support.v7.app.ToolbarActionBar: android.view.Window$Callback getWrappedWindowCallback()>
<android.view.inputmethod.InputMethodManager: void notifyUserAction()>
<android.support.v7.app.ToolbarActionBar: void populateOptionsMenu()>
<android.icu.util.ULocale: java.lang.Object clone()>
<java.text.DecimalFormatSymbols: char getZeroDigit()>
<java.text.DecimalFormatSymbols: char getGroupingSeparator()>
<java.text.DecimalFormatSymbols: char getDecimalSeparator()>
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>
<java.text.DecimalFormatSymbols: java.lang.String getNaN()>
<java.text.DecimalFormatSymbols: char getMinusSign()>
<android.app.RemoteInput$Builder: android.app.RemoteInput build()>
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<android.icu.util.ULocale: java.lang.String getLanguage()>
<android.icu.util.ULocale: java.lang.String getScript()>
<android.icu.util.ULocale: java.lang.String getCountry()>
<org.thoughtcrime.securesms.notifications.MessageNotifier$CancelableExecutor: void cancel()>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<android.icu.util.ULocale: java.lang.String getVariant()>
<java.text.DecimalFormatSymbols: java.lang.Object clone()>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<android.icu.util.ULocale: java.lang.String getBaseName()>
<dalvik.system.DexPathList$Element: void maybeInit()>
<android.icu.util.ULocale: java.lang.String getName()>
<android.icu.util.ULocale: java.util.Iterator getKeywords()>
<android.widget.Editor$UndoInputFilter: void beginBatchEdit()>
<android.widget.Editor$UndoInputFilter: void endBatchEdit()>
<java.text.DecimalFormatSymbols: android.icu.text.DecimalFormatSymbols getIcuDecimalFormatSymbols()>
<android.icu.util.ULocale: boolean isRightToLeft()>
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.support.v4.util.MapCollections$EntrySet: java.util.Iterator iterator()>
<android.telephony.SmsMessage: int getStatus()>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: int getLayoutId()>
<com.doomonafireball.betterpickers.timepicker.TimePicker: int getLayoutId()>
<android.icu.util.ULocale: java.lang.String getDisplayName()>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: void reset()>
<android.os.AsyncTask: void onCancelled()>
<android.os.AsyncTask: boolean isCancelled()>
<android.support.v4.view.ViewCompat$ViewCompatBaseImpl: long getFrameTime()>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: void updateDeleteButton()>
<com.doomonafireball.betterpickers.hmspicker.HmsPicker: void updateHms()>
<com.doomonafireball.betterpickers.timepicker.TimePicker: void reset()>
<com.doomonafireball.betterpickers.timepicker.TimePicker: void updateDeleteButton()>
<com.doomonafireball.betterpickers.timepicker.TimePicker: void updateTime()>
<android.view.FocusFinder$SequentialFocusComparator: void recycle()>
<android.app.UiModeManager: int getCurrentModeType()>
<android.support.v7.widget.GridLayoutManager$SpanSizeLookup: void invalidateSpanIndexCache()>
<android.icu.impl.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>
<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$TreeMapEntry absLowest()>
<android.transition.TransitionSet: int getTransitionCount()>
<org.thoughtcrime.securesms.components.TransferControlView: void showProgressSpinner()>
<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$TreeMapEntry absHighFence()>
<java.util.TreeMap$NavigableSubMap: java.lang.Object firstKey()>
<android.icu.util.ULocale: java.lang.String toLanguageTag()>
<android.icu.util.IslamicCalendar$CalculationType: java.lang.String bcpType()>
<android.media.MediaPlayer: int getVideoWidth()>
<android.media.MediaPlayer: int getVideoHeight()>
<android.media.MediaPlayer: boolean isPlaying()>
<org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector: float getRotationDegreesDelta()>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.media.MediaPlayer: int getDuration()>
<android.media.MediaPlayer: void release()>
<android.media.MediaPlayer: void reset()>
<org.thoughtcrime.securesms.scribbles.multitouch.RotateGestureDetector: void resetState()>
<android.icu.util.TimeZone: java.lang.String getID()>
<android.media.MediaPlayer: int getAudioSessionId()>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<android.view.ViewGroup$ChildListForAccessibility: void recycle()>
<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>
<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()>
<java.util.Vector: int size()>
<java.util.Vector: boolean isEmpty()>
<java.util.Vector: java.util.Enumeration elements()>
<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()>
<android.graphics.drawable.VectorDrawable$VFullPath: int getStrokeColor()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getStrokeWidth()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getStrokeAlpha()>
<android.graphics.drawable.VectorDrawable$VFullPath: int getFillColor()>
<java.util.Vector: void removeAllElements()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getFillAlpha()>
<java.util.Vector: java.lang.Object[] toArray()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathStart()>
<android.media.ExifInterface$ExifAttribute: int size()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathEnd()>
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathOffset()>
<android.hardware.camera2.utils.TypeReference: java.lang.Class getRawType()>
<java.util.Vector: void clear()>
<android.icu.impl.OlsonTimeZone: int getRawOffset()>
<com.android.mms.service_alt.exception.MmsHttpException: int getStatusCode()>
<android.support.v7.widget.DefaultItemAnimator$2: void run()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod$SampleStreamImpl: boolean isReady()>
<android.hardware.camera2.utils.TypeReference: int hashCode()>
<android.graphics.drawable.VectorDrawable$VPath: java.lang.String getPathName()>
<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathData getPathData()>
<android.view.InputChannel: void dispose()>
<org.thoughtcrime.securesms.util.task.ProgressDialogAsyncTask: android.content.Context getContext()>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: int getSuggestedMinimumHeight()>
<android.icu.impl.OlsonTimeZone: java.lang.String getCanonicalID()>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: int getSuggestedMinimumWidth()>
<android.os.AsyncTask$SerialExecutor: void scheduleNext()>
<com.fasterxml.jackson.core.io.SerializedString: char[] asQuotedChars()>
<com.fasterxml.jackson.core.io.SerializedString: java.lang.String getValue()>
<android.view.InputEventSender: void dispose()>
<android.support.v7.widget.AppCompatProgressBarHelper: android.graphics.Bitmap getSampleTime()>
<org.thoughtcrime.securesms.components.multiwaveview.MultiWaveView: void ping()>
<java.text.StringCharacterIterator: char first()>
<java.text.StringCharacterIterator: char current()>
<java.text.StringCharacterIterator: char next()>
<com.google.android.exoplayer2.upstream.DefaultAllocator: int getTotalBytesAllocated()>
<org.kxml2.io.KXmlParser: java.lang.String getPositionDescription()>
<com.google.android.exoplayer2.upstream.DefaultAllocator: void reset()>
<com.google.android.exoplayer2.upstream.DefaultAllocator: void trim()>
<android.support.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState: void setupAnimatorSet()>
<org.kxml2.io.KXmlParser: int getLineNumber()>
<org.kxml2.io.KXmlParser: int getColumnNumber()>
<org.kxml2.io.KXmlParser: java.lang.String getText()>
<org.kxml2.io.KXmlParser: java.lang.String getNamespace()>
<org.kxml2.io.KXmlParser: java.lang.String getName()>
<android.icu.impl.DayPeriodRules: boolean hasMidnight()>
<android.icu.impl.DayPeriodRules: boolean hasNoon()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean checkAnchorChanged()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean didBlockInteraction()>
<sun.security.x509.CertificateSerialNumber: java.lang.String toString()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: android.support.design.widget.CoordinatorLayout$Behavior getBehavior()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: boolean getChangedAfterNestedScroll()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: android.graphics.Rect getLastChildRect()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void resetChangedAfterNestedScroll()>
<android.support.design.widget.CoordinatorLayout$LayoutParams: void resetTouchBehaviorTracking()>
<android.icu.impl.OlsonTimeZone: boolean isFrozen()>
<android.icu.impl.OlsonTimeZone: android.icu.util.TimeZone freeze()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView getMonth()>
<com.doomonafireball.betterpickers.expirationpicker.ExpirationView: com.doomonafireball.betterpickers.widget.ZeroTopPaddingTextView getYear()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getCapacity()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<android.icu.util.SimpleTimeZone: int getDSTSavings()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void clearMutated()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()>
<android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect getContentRect()>
<java.util.Scanner: void close()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isConstantSize()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void computeConstantSize()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isStateful()>
<android.icu.util.SimpleTimeZone: boolean useDaylightTime()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean canConstantState()>
<java.util.Scanner: java.lang.String next()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean getCcGenericServices()>
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>
<com.google.protobuf.DescriptorProtos$FileOptions: com.google.protobuf.ByteString getGoPackageBytes()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean getJavaGenerateEqualsAndHash()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean getJavaGenericServices()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean getJavaMultipleFiles()>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: java.lang.String getBasePattern()>
<com.google.protobuf.DescriptorProtos$FileOptions: com.google.protobuf.ByteString getJavaOuterClassnameBytes()>
<com.google.protobuf.DescriptorProtos$FileOptions: com.google.protobuf.ByteString getJavaPackageBytes()>
<com.google.protobuf.DescriptorProtos$FileOptions: com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode getOptimizeFor()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean getPyGenericServices()>
<android.media.ExifInterface$Rational: double calculate()>
<android.content.UndoManager$UndoState: int getCommitId()>
<android.icu.text.DateTimePatternGenerator$DateTimeMatcher: int getFieldMask()>
<android.content.UndoManager$UndoState: void makeExecuted()>
<android.content.UndoManager$UndoState: boolean canMerge()>
<com.google.protobuf.DescriptorProtos$FileOptions: int getUninterpretedOptionCount()>
<com.android.internal.view.menu.MenuItemImpl: boolean invoke()>
<android.content.UndoManager$UndoState: boolean hasMultipleOwners()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasCcGenericServices()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasGoPackage()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasJavaGenerateEqualsAndHash()>
<com.android.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasJavaGenericServices()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasJavaMultipleFiles()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasJavaOuterClassname()>
<com.android.internal.view.menu.MenuItemImpl: int getGroupId()>
<android.icu.util.SimpleTimeZone: android.icu.util.TimeZone freeze()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasJavaPackage()>
<com.android.internal.view.menu.MenuItemImpl: int getOrdering()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasOptimizeFor()>
<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledByDefault()>
<com.google.protobuf.DescriptorProtos$FileOptions: boolean hasPyGenericServices()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler build()>
<com.fasterxml.jackson.core.JsonGenerator$Feature: int getMask()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialSelectorView: com.nineoldandroids.animation.ObjectAnimator getDisappearAnimator()>
<android.content.UndoManager$UndoState: boolean hasData()>
<android.content.UndoManager$UndoState: void commit()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus build()>
<android.content.UndoManager$UndoState: void undo()>
<android.content.UndoManager$UndoState: void redo()>
<org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus$Builder: org.thoughtcrime.securesms.webrtc.WebRtcDataProtos$VideoStreamingStatus buildPartial()>
<android.content.UndoManager$UndoState: void destroy()>
<com.doomonafireball.betterpickers.radialtimepicker.RadialSelectorView: com.nineoldandroids.animation.ObjectAnimator getReappearAnimator()>
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()>
<com.fasterxml.jackson.databind.util.LinkedNode: com.fasterxml.jackson.databind.util.LinkedNode next()>
<com.android.internal.view.menu.MenuItemImpl: boolean hasSubMenu()>
<com.fasterxml.jackson.databind.util.LinkedNode: java.lang.Object value()>
<android.app.Notification$Style: void checkBuilder()>
<android.app.Notification$Style: android.widget.RemoteViews makeContentView()>
<android.app.Notification$Style: android.widget.RemoteViews makeHeadsUpContentView()>
<com.google.zxing.qrcode.encoder.ByteMatrix: byte[][] getArray()>
<com.google.zxing.qrcode.encoder.ByteMatrix: int getHeight()>
<com.google.zxing.qrcode.encoder.ByteMatrix: int getWidth()>
<android.app.Notification$Style: boolean displayCustomViewInline()>
<com.android.internal.view.menu.MenuItemImpl: boolean isCheckable()>
<com.android.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<com.android.internal.view.menu.MenuItemImpl: boolean isVisible()>
<android.content.ClipDescription: int getMimeTypeCount()>
<com.android.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<com.android.internal.view.menu.MenuItemImpl: boolean requestsActionButton()>
<com.android.internal.view.menu.MenuItemImpl: boolean requiresActionButton()>
<android.support.v7.widget.RecyclerView: void clearOldPositions()>
<com.android.internal.view.menu.MenuItemImpl: android.view.View getActionView()>
<com.android.internal.view.menu.MenuItemImpl: boolean expandActionView()>
<com.android.internal.view.menu.MenuItemImpl: boolean hasCollapsibleActionView()>
<android.support.v7.widget.RecyclerView: void consumePendingUpdateOperations()>
<com.android.internal.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<com.bumptech.glide.manager.RequestTracker: void clearRequests()>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: void clear()>
<com.bumptech.glide.manager.RequestTracker: void pauseRequests()>
<android.icu.impl.UnicodeSetStringSpan$OffsetList: boolean isEmpty()>
<android.support.v7.widget.RecyclerView: void dispatchLayout()>
<com.bumptech.glide.manager.RequestTracker: void restartRequests()>
<com.bumptech.glide.manager.RequestTracker: void resumeRequests()>
<org.thoughtcrime.securesms.notifications.SingleRecipientNotificationBuilder: android.app.Notification build()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: org.thoughtcrime.securesms.color.MaterialColor getColor()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: org.whispersystems.libsignal.util.guava.Optional getDefaultSubscriptionId()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: int getExpireMessages()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: long getMuteUntil()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: java.lang.String getProfileAvatar()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: byte[] getProfileKey()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: java.lang.String getProfileName()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: org.thoughtcrime.securesms.database.RecipientDatabase$RegisteredState getRegistered()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: android.net.Uri getRingtone()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: java.lang.String getSystemDisplayName()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: org.thoughtcrime.securesms.database.RecipientDatabase$VibrateState getVibrateState()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: boolean hasSeenInviteReminder()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: boolean isBlocked()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RecipientSettings: boolean isProfileSharing()>
<android.text.BidiFormatter$DirectionalityEstimator: int getEntryDir()>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.support.v7.widget.RecyclerView: void dispatchPendingImportantForAccessibilityChanges()>
<android.text.BidiFormatter$DirectionalityEstimator: int getExitDir()>
<android.text.BidiFormatter$DirectionalityEstimator: byte dirTypeForward()>
<com.android.internal.policy.PhoneWindow$1: void run()>
<android.text.BidiFormatter$DirectionalityEstimator: byte dirTypeBackward()>
<android.app.LoaderManagerImpl: void doStart()>
<com.takisoft.colorpicker.ColorPickerDialog$Params$Builder: com.takisoft.colorpicker.ColorPickerDialog$Params build()>
<android.support.v7.widget.RecyclerView: void eatRequestLayout()>
<android.support.v7.widget.RecyclerView: void ensureBottomGlow()>
<android.support.v7.widget.RecyclerView: void ensureLeftGlow()>
<android.support.v7.widget.RecyclerView: void ensureRightGlow()>
<android.support.v7.widget.RecyclerView: void ensureTopGlow()>
<android.support.v7.widget.RecyclerView: java.lang.String exceptionLabel()>
<android.view.DragEvent: int getAction()>
<android.view.DragEvent: float getX()>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.view.DragEvent: com.android.internal.view.IDragAndDropPermissions getDragAndDropPermissions()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.view.DragEvent: void recycle()>
<android.view.DragEvent: java.lang.String toString()>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.media.WebVttRenderingWidget$CueLayout: void prepForPrune()>
<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()>
<android.media.WebVttRenderingWidget$CueLayout: void update()>
<android.widget.ImageView: android.graphics.PorterDuff$Mode getImageTintMode()>
<android.support.v7.widget.DefaultItemAnimator$3: void run()>
<com.google.android.gms.maps.model.LatLngBounds: int getVersionCode()>
<android.media.WebVttRenderingWidget$CueLayout: boolean isActive()>
<android.media.WebVttRenderingWidget$CueLayout: android.media.TextTrackCue getCue()>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$Adapter getAdapter()>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$ItemAnimator getItemAnimator()>
<android.support.v7.widget.RecyclerView: android.support.v7.widget.RecyclerView$LayoutManager getLayoutManager()>
<android.support.v7.widget.RecyclerView: long getNanoTime()>
<android.support.v7.widget.RecyclerView: int getScrollState()>
<android.support.v7.widget.RecyclerView: boolean hasPendingAdapterUpdates()>
<android.support.v7.widget.RecyclerView: void initAdapterManager()>
<android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()>
<android.support.v7.widget.RecyclerView: void invalidateGlows()>
<android.support.v7.widget.AppCompatBackgroundHelper: android.content.res.ColorStateList getSupportBackgroundTintList()>
<android.support.v7.widget.RecyclerView: boolean isAccessibilityEnabled()>
<org.thoughtcrime.securesms.scribbles.ScribbleToolbar: void setNoneSelected()>
<android.support.v7.widget.AppCompatBackgroundHelper: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()>
<android.icu.text.TransliterationRule: int getAnteContextLength()>
<com.fasterxml.jackson.databind.util.TokenBuffer: void _reportUnsupportedOperation()>
<android.support.v7.widget.RecyclerView: boolean isComputingLayout()>
<android.icu.text.TransliterationRule: int getIndexValue()>
<android.support.v7.widget.RecyclerView: void markItemDecorInsetsDirty()>
<android.icu.text.TransliteratorParser$RuleBody: java.lang.String nextLine()>
<android.support.v7.widget.RecyclerView: void markKnownViewsInvalid()>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonParser asParser()>
<android.widget.ImageView: void clearColorFilter()>
<android.widget.RemoteViews: void setNotRoot()>
<android.support.v7.widget.RecyclerView: void onEnterLayoutOrScroll()>
<android.support.v7.widget.RecyclerView: void onExitLayoutOrScroll()>
<com.fasterxml.jackson.databind.util.TokenBuffer: com.fasterxml.jackson.core.JsonToken firstToken()>
<com.fasterxml.jackson.databind.BeanDescription: java.lang.Class getBeanClass()>
<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.JavaType getType()>
<java.io.ObjectStreamClass$EntryFuture: java.lang.Object get()>
<android.widget.RemoteViews: int estimateMemoryUsage()>
<com.android.internal.view.menu.CascadingMenuPopup$CascadingMenuInfo: android.widget.ListView getListView()>
<android.widget.AdapterView$AdapterDataSetObserver: void clearSavedState()>
<android.os.Parcel: void recycle()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: boolean hasFileDescriptors()>
<com.google.android.mms.pdu_alt.PduComposer: byte[] make()>
<android.support.v7.widget.RecyclerView: void postAnimationRunner()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: byte[] getContent()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: byte[] getLegacyMessage()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: java.lang.String getSource()>
<android.support.v7.widget.RecyclerView: void removeAndRecycleViews()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: int getSourceDevice()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: long getTimestamp()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: int getType()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: boolean hasContent()>
<org.whispersystems.signalservice.api.messages.SignalServiceEnvelope: boolean hasLegacyMessage()>
<android.support.v7.widget.RecyclerView: void repositionShadowingViews()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer slice()>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.media.WebVttRenderingWidget$SpanLayout: void update()>
<android.support.v7.widget.RecyclerView: void saveOldPositions()>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: long[] createLongArray()>
<java.nio.HeapCharBuffer: java.nio.CharBuffer compact()>
<android.os.Parcel: double[] createDoubleArray()>
<android.icu.impl.CurrencyData$DefaultInfo: java.util.Map symbolMap()>
<android.icu.impl.CurrencyData$DefaultInfo: java.util.Map nameMap()>
<android.icu.impl.CurrencyData$DefaultInfo: java.util.Map getUnitPatterns()>
<android.icu.impl.CurrencyData$DefaultInfo: android.icu.impl.CurrencyData$CurrencySpacingInfo getSpacingInfo()>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.support.v7.widget.RecyclerView: void setDataSetChangedAfterLayout()>
<org.whispersystems.libsignal.ecc.DjbECPublicKey: byte[] getPublicKey()>
<org.whispersystems.libsignal.ecc.DjbECPublicKey: int getType()>
<org.whispersystems.libsignal.ecc.DjbECPublicKey: int hashCode()>
<org.whispersystems.libsignal.ecc.DjbECPublicKey: byte[] serialize()>
<android.widget.RemoteViews: int getSequenceNumber()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked trimByVisibility()>
<android.support.v7.widget.RecyclerView: void stopScroll()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutIgnored()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutNext()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked: com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked withoutNonVisible()>
<android.os.Parcel: void readException()>
<android.os.Parcel: int readExceptionCode()>
<android.os.Parcel: int readInt()>
<android.os.Parcel: long readLong()>
<libcore.reflect.ListOfTypes: int length()>
<android.os.Parcel: float readFloat()>
<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>
<android.os.Parcel: double readDouble()>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: java.lang.CharSequence readCharSequence()>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>
<android.os.Parcel: android.util.Size readSize()>
<android.os.Parcel: android.util.SizeF readSizeF()>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: java.lang.String[] readStringArray()>
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.support.v7.view.menu.ActionMenuItem: int getItemId()>
<android.icu.text.DateTimePatternGenerator: java.lang.String getDateTimeFormat()>
<android.support.v7.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()>
<android.icu.text.DateTimePatternGenerator: boolean isFrozen()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator freeze()>
<android.icu.text.DateTimePatternGenerator: android.icu.text.DateTimePatternGenerator cloneAsThawed()>
<android.icu.text.DateTimePatternGenerator: java.lang.Object clone()>
<sun.security.pkcs.ContentInfo: sun.security.util.DerValue getContent()>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.os.Handler: android.os.Message obtainMessage()>
<java.net.InetSocketAddress: int getPort()>
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.net.InetSocketAddress: java.lang.String getHostName()>
<java.net.InetSocketAddress: java.lang.String getHostString()>
<java.net.InetSocketAddress: boolean isUnresolved()>
<com.nineoldandroids.animation.AnimatorSet: void end()>
<com.tomergoldst.tooltips.ToolTip: boolean alignedCenter()>
<com.tomergoldst.tooltips.ToolTip: boolean alignedLeft()>
<com.tomergoldst.tooltips.ToolTip: boolean alignedRight()>
<com.tomergoldst.tooltips.ToolTip: int getAlign()>
<com.tomergoldst.tooltips.ToolTip: android.view.View getAnchorView()>
<com.nineoldandroids.animation.AnimatorSet: boolean isRunning()>
<com.tomergoldst.tooltips.ToolTip: int getBackgroundColor()>
<com.tomergoldst.tooltips.ToolTip: android.content.Context getContext()>
<com.tomergoldst.tooltips.ToolTip: float getElevation()>
<com.nineoldandroids.animation.AnimatorSet: boolean isStarted()>
<com.tomergoldst.tooltips.ToolTip: java.lang.String getMessage()>
<com.tomergoldst.tooltips.ToolTip: int getOffsetX()>
<android.os.Handler: android.os.Looper getLooper()>
<com.tomergoldst.tooltips.ToolTip: int getOffsetY()>
<com.tomergoldst.tooltips.ToolTip: int getPosition()>
<com.tomergoldst.tooltips.ToolTip: android.view.ViewGroup getRootView()>
<com.tomergoldst.tooltips.ToolTip: android.text.Spannable getSpannableMessage()>
<com.tomergoldst.tooltips.ToolTip: int getTextColor()>
<com.tomergoldst.tooltips.ToolTip: int getTextGravity()>
<com.tomergoldst.tooltips.ToolTip: int getTextSize()>
<com.tomergoldst.tooltips.ToolTip: boolean hideArrow()>
<com.tomergoldst.tooltips.ToolTip: boolean positionedLeftTo()>
<com.tomergoldst.tooltips.ToolTip: boolean positionedRightTo()>
<android.os.Handler: android.os.IMessenger getIMessenger()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder()>
<com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder()>
<android.widget.GridView: int getNumColumns()>
<com.nineoldandroids.animation.AnimatorSet: void start()>
<sun.security.x509.AVA: sun.security.util.ObjectIdentifier getObjectIdentifier()>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.animation.LayoutTransition: boolean isRunning()>
<android.animation.LayoutTransition: void cancel()>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorClosed()>
<com.google.protobuf.ByteString: byte[] toByteArray()>
<com.google.protobuf.ByteString: java.lang.String toStringUtf8()>
<android.support.v7.widget.RecyclerView$SmoothScroller: int getChildCount()>
<android.support.v7.widget.RecyclerView$SmoothScroller: android.support.v7.widget.RecyclerView$LayoutManager getLayoutManager()>
<android.support.v7.widget.RecyclerView$SmoothScroller: int getTargetPosition()>
<android.view.MotionEvent$PointerCoords: void clear()>
<android.support.v7.widget.RecyclerView$SmoothScroller: boolean isPendingInitialRun()>
<android.support.v7.widget.RecyclerView$SmoothScroller: boolean isRunning()>
<android.support.v7.widget.RecyclerView$SmoothScroller: void stop()>
<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: android.os.IBinder asBinder()>
<sun.security.x509.AVA: boolean hasRFC2253Keyword()>
<java.io.ExpiringCache$Entry: long timestamp()>
<java.io.ExpiringCache$Entry: java.lang.String val()>
<sun.security.pkcs.PKCS9Attribute: java.lang.Object getValue()>
<com.fasterxml.jackson.databind.type.CollectionLikeType: boolean isTrueCollectionType()>
<sun.security.pkcs.PKCS9Attribute: sun.security.util.ObjectIdentifier getOID()>
<sun.security.pkcs.PKCS9Attribute: java.lang.String getName()>
<com.google.android.exoplayer2.Timeline: boolean isEmpty()>
<android.content.res.AssetManager: void close()>
<android.animation.PathKeyframes: android.animation.Keyframes$FloatKeyframes createXFloatKeyframes()>
<android.animation.PathKeyframes: android.animation.Keyframes$FloatKeyframes createYFloatKeyframes()>
<android.animation.PathKeyframes: android.animation.Keyframes$IntKeyframes createXIntKeyframes()>
<android.content.res.AssetManager: android.content.res.StringBlock[] ensureStringBlocks()>
<android.animation.PathKeyframes: android.animation.Keyframes$IntKeyframes createYIntKeyframes()>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.lang.String getScript()>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: sun.util.locale.BaseLocale getBaseLocale()>
<android.graphics.CanvasProperty: long getNativeContainer()>
<java.util.Locale: java.lang.String toLanguageTag()>
<android.content.res.AssetManager: long createTheme()>
<android.bluetooth.BluetoothHeadsetClient: boolean doBind()>
<android.content.res.AssetManager: boolean isUpToDate()>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.content.res.AssetManager: java.lang.String[] getNonSystemLocales()>
<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers()>
<java.util.Locale: java.lang.Object clone()>
<org.thoughtcrime.securesms.database.SmsDatabase: android.database.sqlite.SQLiteDatabase beginTransaction()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: boolean isEmpty()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap: java.util.Iterator iterator()>
<com.bumptech.glide.GlideContext: com.bumptech.glide.request.RequestOptions getDefaultRequestOptions()>
<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: java.lang.Object removeLast()>
<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap$LinkedEntry: int size()>
<org.thoughtcrime.securesms.database.SmsDatabase: android.database.Cursor getExpirationStartedMessages()>
<org.thoughtcrime.securesms.database.SmsDatabase: int getMessageCount()>
<org.webrtc.MediaSource: void dispose()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: void onTreeConstructionFinished()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canReuseCache()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: void updateCacheStates()>
<android.view.Surface: void release()>
<android.view.Surface: boolean isValid()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean isStateful()>
<android.graphics.drawable.VectorDrawable$VectorDrawableState: float getAlpha()>
<android.text.SpanSet: void recycle()>
<android.support.v4.app.TaskStackBuilder: void startActivities()>
<android.view.Surface: void forceScopedDisconnect()>
<org.thoughtcrime.securesms.scribbles.widget.VerticalSlideColorPicker: void resetToDefault()>
<android.view.ViewOverlay$OverlayViewGroup: boolean isEmpty()>
<android.icu.math.BigDecimal: int scale()>
<android.icu.math.BigDecimal: int signum()>
<java.util.jar.Attributes: java.lang.Object clone()>
<android.icu.math.BigDecimal: java.math.BigDecimal toBigDecimal()>
<android.icu.math.BigDecimal: java.math.BigInteger toBigInteger()>
<android.icu.math.BigDecimal: java.math.BigInteger unscaledValue()>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IConfigBuilder beginConfig()>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IShapeBuilder endConfig()>
<com.amulyakhare.textdrawable.TextDrawable$Builder: com.amulyakhare.textdrawable.TextDrawable$IBuilder round()>
<android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder: android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation build()>
<java.lang.UNIXProcess$ProcessPipeInputStream: void processExited()>
<dalvik.system.VMRuntime: java.lang.String[] properties()>
<dalvik.system.VMRuntime: java.lang.String bootClassPath()>
<dalvik.system.VMRuntime: java.lang.String classPath()>
<dalvik.system.VMRuntime: java.lang.String vmVersion()>
<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>
<dalvik.system.VMRuntime: boolean is64Bit()>
<dalvik.system.VMRuntime: int getTargetSdkVersion()>
<org.thoughtcrime.securesms.color.MaterialColor: java.lang.String serialize()>
<org.thoughtcrime.securesms.database.SmsDatabase: java.util.List setAllMessagesRead()>
<java.lang.ThreadGroup: java.lang.String getName()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.lang.ThreadGroup: void checkAccess()>
<java.lang.ThreadGroup: int activeCount()>
<android.app.ApplicationThreadNative: android.os.IBinder asBinder()>
<org.thoughtcrime.securesms.webrtc.locks.ProximityLock: void acquire()>
<org.thoughtcrime.securesms.webrtc.locks.ProximityLock: void release()>
<com.google.android.exoplayer2.video.MediaCodecVideoRenderer: void maybeNotifyRenderedFirstFrame()>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int hashSeed()>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean maybeDirty()>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void release()>
<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int size()>
<java.lang.ThreadGroup: void addUnstarted()>
<android.icu.text.ReplaceableContextIterator: int getCaseMapCPStart()>
<android.icu.text.ReplaceableContextIterator: int nextCaseMapCP()>
<android.icu.text.ReplaceableContextIterator: boolean didReachLimit()>
<org.thoughtcrime.securesms.GroupMembersDialog$GroupMembers: java.lang.String[] getRecipientStrings()>
<android.widget.AutoCompleteTextView: int getThreshold()>
<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode root()>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: void reset()>
<android.widget.AutoCompleteTextView: void doBeforeTextChanged()>
<android.widget.AutoCompleteTextView: void doAfterTextChanged()>
<android.widget.LinearLayout: int getVirtualChildCount()>
<android.widget.AutoCompleteTextView: boolean isPopupShowing()>
<android.widget.AutoCompleteTextView: void clearListSelection()>
<android.widget.AutoCompleteTextView: void performCompletion()>
<com.android.internal.view.IInputContext$Stub: android.os.IBinder asBinder()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.ByteString getContentTypeBytes()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.ByteString getDigest()>
<android.widget.AutoCompleteTextView: void dismissDropDown()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.ByteString getFileNameBytes()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: int getFlags()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: long getId()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.ByteString getKey()>
<android.widget.AutoCompleteTextView: void showDropDown()>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: int getSize()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.ByteString getThumbnail()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasContentType()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasDigest()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasFileName()>
<org.thoughtcrime.securesms.ConversationActivity$27$1: void onComplete()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasFlags()>
<android.graphics.Matrix: long ni()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasId()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasKey()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasSize()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: boolean hasThumbnail()>
<android.widget.BaseAdapter: void notifyDataSetChanged()>
<android.widget.BaseAdapter: void notifyDataSetInvalidated()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer: org.whispersystems.signalservice.internal.push.SignalServiceProtos$AttachmentPointer$Builder toBuilder()>
<org.thoughtcrime.securesms.database.ThreadDatabase$Reader: org.thoughtcrime.securesms.database.model.ThreadRecord getCurrent()>
<org.thoughtcrime.securesms.database.ThreadDatabase$Reader: org.thoughtcrime.securesms.database.model.ThreadRecord getNext()>
<android.media.Cea608CCParser$CCData: int getCtrlCode()>
<android.media.Cea608CCParser$CCData: android.media.Cea608CCParser$StyleCode getMidRow()>
<android.media.Cea608CCParser$CCData: android.media.Cea608CCParser$PAC getPAC()>
<android.media.Ringtone: void play()>
<android.media.Cea608CCParser$CCData: int getTabOffset()>
<android.media.Cea608CCParser$CCData: boolean isDisplayableChar()>
<android.media.Cea608CCParser$CCData: java.lang.String getDisplayText()>
<android.media.Ringtone: void stop()>
<android.media.Ringtone: boolean isPlaying()>
<android.media.Cea608CCParser$CCData: java.lang.String toString()>
<com.android.internal.app.WindowDecorActionBar: void completeDeferredDestroyActionMode()>
<com.fasterxml.jackson.databind.ser.std.MapSerializer: void _ensureOverride()>
<android.widget.SeekBar: void onStartTrackingTouch()>
<android.widget.SeekBar: void onStopTrackingTouch()>
<android.icu.text.TransliteratorIDParser$SingleID: android.icu.text.Transliterator getInstance()>
<com.android.internal.app.WindowDecorActionBar: int getNavigationMode()>
<com.android.internal.app.WindowDecorActionBar: int getDisplayOptions()>
<java.util.logging.LogManager$LoggerWeakRef: void dispose()>
<com.android.internal.app.WindowDecorActionBar: android.content.Context getThemedContext()>
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>
<com.android.internal.app.WindowDecorActionBar: boolean collapseActionView()>
<dalvik.system.DexPathList: java.util.List getDexPaths()>
<android.widget.LinearLayout: int getOrientation()>
<android.support.v7.widget.LinearLayoutManager$LayoutState: void assignPositionFromScrapList()>
<android.media.IMediaHTTPService$Stub: android.os.IBinder asBinder()>
<org.thoughtcrime.securesms.attachments.AttachmentServer: android.net.Uri getUri()>
<com.fasterxml.jackson.annotation.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<org.thoughtcrime.securesms.attachments.AttachmentServer: void start()>
<org.thoughtcrime.securesms.attachments.AttachmentServer: void stop()>
<com.soundcloud.android.crop.Crop: com.soundcloud.android.crop.Crop asSquare()>
<sun.security.pkcs.SignerInfo: sun.security.x509.AlgorithmId getDigestAlgorithmId()>
<sun.security.pkcs.SignerInfo: sun.security.x509.AlgorithmId getDigestEncryptionAlgorithmId()>
<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Parcelable onSaveInstanceState()>
<org.thoughtcrime.securesms.mms.AttachmentManager: org.thoughtcrime.securesms.mms.SlideDeck buildSlideDeck()>
<org.thoughtcrime.securesms.mms.AttachmentManager: void cleanup()>
<org.thoughtcrime.securesms.mms.AttachmentManager: android.net.Uri getCaptureUri()>
<org.thoughtcrime.securesms.mms.AttachmentManager: boolean isAttachmentPresent()>
<java.io.ByteArrayOutputStream: void reset()>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>
<java.io.ByteArrayOutputStream: int size()>
<java.io.ByteArrayOutputStream: java.lang.String toString()>
<android.bluetooth.BluetoothHealth: boolean doBind()>
<android.icu.util.CaseInsensitiveString: java.lang.String getString()>
<org.thoughtcrime.securesms.ConversationAdapter: void clearSelection()>
<android.bluetooth.BluetoothMap: boolean doBind()>
<org.thoughtcrime.securesms.ConversationAdapter: java.util.Set getSelectedItems()>
<android.util.Size: int getWidth()>
<android.util.Size: int getHeight()>
<android.view.Display$Mode: int getModeId()>
<android.view.Display$Mode: float getRefreshRate()>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clear()>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clearExtensions()>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>
<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>
<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.annotation.JsonInclude$Include getSerializationInclusion()>
<android.util.SparseIntArray: android.util.SparseIntArray clone()>
<java.util.zip.ZipFile: java.lang.String getName()>
<android.util.SparseIntArray: int size()>
<java.util.zip.ZipFile: int size()>
<android.util.SparseIntArray: void clear()>
<android.widget.RelativeLayout$DependencyGraph$Node: void release()>
<sun.security.x509.X509CertInfo: java.lang.String toString()>
<android.graphics.drawable.DrawableContainer: int getCurrentIndex()>
<android.support.v7.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()>
<com.google.zxing.qrcode.encoder.QRCode: com.google.zxing.qrcode.encoder.ByteMatrix getMatrix()>
<android.support.v4.widget.AutoScrollHelper: void cancelTargetTouch()>
<android.icu.text.RuleBasedNumberFormat: android.icu.text.NFRuleSet getDefaultRuleSet()>
<android.icu.text.RuleBasedNumberFormat: android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<android.icu.text.RuleBasedNumberFormat: android.icu.text.DecimalFormat getDecimalFormat()>
<android.support.v4.widget.AutoScrollHelper: boolean shouldAnimate()>
<sun.util.logging.PlatformLogger$Level: int intValue()>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.introspect.ClassIntrospector defaultClassIntrospector()>
<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>
<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers()>
<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager getOwner()>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger getRootLogger()>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger getGlobalLogger()>
<java.util.logging.LogManager$LoggerContext: java.util.Enumeration getLoggerNames()>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.DeserializationConfig getDeserializationConfig()>
<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>
<android.database.Observable: void unregisterAll()>
<org.whispersystems.jobqueue.Job: org.whispersystems.jobqueue.EncryptionKeys getEncryptionKeys()>
<org.whispersystems.jobqueue.Job: java.util.List getRequirements()>
<org.whispersystems.jobqueue.Job: long getWakeLockTimeout()>
<org.whispersystems.jobqueue.Job: boolean isPersistent()>
<org.whispersystems.jobqueue.Job: boolean needsWakeLock()>
<android.support.v4.widget.CircularProgressDrawable: int getAlpha()>
<com.android.internal.util.LineBreakBufferedWriter: void flush()>
<com.squareup.okhttp.OkHttpClient: void setFollowRedirects(boolean)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setProtocols(java.util.List)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setProxySelector(java.net.ProxySelector)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setAuthenticator(com.squareup.okhttp.Authenticator)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setConnectionSpecs(java.util.List)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setConnectionPool(com.squareup.okhttp.ConnectionPool)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setSocketFactory(javax.net.SocketFactory)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setProxy(java.net.Proxy)>
<android.support.v4.widget.CircularProgressDrawable: void start()>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)>
<android.support.v4.widget.CircularProgressDrawable: void stop()>
<android.support.v7.widget.ActionBarContextView: void closeMode()>
<android.support.design.widget.TabLayout$SlidingTabStrip: boolean childrenNeedLayout()>
<android.support.design.widget.TabLayout$SlidingTabStrip: float getIndicatorPosition()>
<android.support.v7.widget.ActionBarContextView: void killMode()>
<org.thoughtcrime.securesms.ConversationActivity$12: void onResendMessage()>
<android.widget.TextView$Marquee: void tick()>
<android.widget.TextView$Marquee: void stop()>
<android.support.v7.app.AppCompatDelegateImplBase: android.content.Context getActionBarThemedContext()>
<com.google.protobuf.DescriptorProtos$FieldOptions$CType: int getNumber()>
<android.support.v7.app.AppCompatDelegateImplBase: android.view.MenuInflater getMenuInflater()>
<android.widget.TextView$Marquee: float getGhostOffset()>
<android.widget.TextView$Marquee: float getScroll()>
<android.support.v7.app.AppCompatDelegateImplBase: android.support.v7.app.ActionBar getSupportActionBar()>
<android.widget.TextView$Marquee: float getMaxFadeScroll()>
<android.widget.TextView$Marquee: boolean shouldDrawLeftFade()>
<android.support.v7.app.AppCompatDelegateImplBase: java.lang.CharSequence getTitle()>
<android.widget.TextView$Marquee: boolean shouldDrawGhost()>
<android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback getWindowCallback()>
<android.support.v7.app.AppCompatDelegateImplBase: boolean isDestroyed()>
<android.widget.TextView$Marquee: boolean isRunning()>
<android.widget.TextView$Marquee: boolean isStopped()>
<android.support.v7.app.AppCompatDelegateImplBase: android.support.v7.app.ActionBar peekSupportActionBar()>
<android.widget.AbsSpinner$RecycleBin: void clear()>
<android.icu.impl.Normalizer2Impl: android.icu.impl.Normalizer2Impl ensureCanonIterData()>
<android.content.res.Resources$Theme: android.content.res.Resources getResources()>
<android.content.res.Resources$Theme: android.content.res.Resources$ThemeKey getKey()>
<android.support.v7.widget.ActionBarContextView: boolean showOverflowMenu()>
<sun.security.util.DerInputStream: byte[] toByteArray()>
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()>
<com.google.protobuf.DescriptorProtos$EnumValueOptions: int getUninterpretedOptionCount()>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>
<java.text.AttributedString: int length()>
<sun.security.util.DerInputStream: void reset()>
<com.nineoldandroids.animation.Keyframe: float getFraction()>
<sun.security.util.DerInputStream: int available()>
<com.nineoldandroids.animation.Keyframe: android.view.animation.Interpolator getInterpolator()>
<com.nineoldandroids.animation.Keyframe: java.lang.Class getType()>
<com.nineoldandroids.animation.Keyframe: boolean hasValue()>
<android.icu.util.VersionInfo: int getMajor()>
<android.icu.util.VersionInfo: int getMinor()>
<android.icu.util.VersionInfo: int getMilli()>
<android.icu.util.VersionInfo: int getMicro()>
<android.widget.AbsSpinner: void resetList()>
<android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation: void cancel()>
<android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation: void start()>
<android.support.v7.widget.helper.ItemTouchHelper$RecoverAnimation: void update()>
<org.whispersystems.libsignal.SignalProtocolAddress: int getDeviceId()>
<org.whispersystems.libsignal.SignalProtocolAddress: java.lang.String getName()>
<android.widget.AbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.widget.AbsSpinner: void recycleAllViews()>
<android.support.v4.content.AsyncTaskLoader: void executePendingTask()>
<android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry: java.lang.String getFileName()>
<android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getResourceId()>
<android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getWeight()>
<android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry: boolean isItalic()>
<android.support.v4.content.AsyncTaskLoader: boolean onCancelLoad()>
<android.support.v4.content.AsyncTaskLoader: void onForceLoad()>
<android.support.v4.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()>
<org.thoughtcrime.securesms.database.MessagingDatabase$SyncMessageId: org.thoughtcrime.securesms.database.Address getAddress()>
<org.thoughtcrime.securesms.database.MessagingDatabase$SyncMessageId: long getTimetamp()>
<com.google.android.exoplayer2.ui.SimpleExoPlayerView$ComponentListener: void onRenderedFirstFrame()>
<android.support.v7.widget.AdapterHelper$UpdateOp: java.lang.String cmdToString()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Iterable fields()>
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Class getAnnotated()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.util.Annotations getAnnotations()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.List getConstructors()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: com.fasterxml.jackson.databind.introspect.AnnotatedConstructor getDefaultConstructor()>
<sun.security.timestamp.TimestampToken: java.util.Date getDate()>
<sun.security.timestamp.TimestampToken: sun.security.x509.AlgorithmId getHashAlgorithm()>
<sun.security.timestamp.TimestampToken: byte[] getHashedMessage()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.String getName()>
<sun.security.timestamp.TimestampToken: java.math.BigInteger getSerialNumber()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.util.List getStaticMethods()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: boolean hasAnnotations()>
<android.support.v7.view.menu.BaseMenuPresenter: android.support.v7.view.menu.MenuPresenter$Callback getCallback()>
<com.fasterxml.jackson.databind.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>
<android.support.v7.view.menu.MenuBuilder: void changeMenuMode()>
<android.support.v7.view.menu.MenuBuilder: void clear()>
<android.support.v7.view.menu.MenuBuilder: void close()>
<android.icu.util.Currency: java.lang.String getCurrencyCode()>
<android.media.MediaCodec$BufferMap: void clear()>
<android.icu.util.Currency: int getDefaultFractionDigits()>
<android.support.v7.view.menu.MenuBuilder: void flagActionItems()>
<android.support.v7.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>
<android.support.v7.view.menu.MenuBuilder: android.content.Context getContext()>
<android.support.v7.view.menu.MenuBuilder: android.support.v7.view.menu.MenuItemImpl getExpandedItem()>
<android.support.v7.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()>
<android.support.v7.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()>
<android.support.v7.view.menu.MenuBuilder: android.view.View getHeaderView()>
<android.support.v7.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<android.support.v7.view.menu.MenuBuilder: boolean getOptionalIconsVisible()>
<android.support.v7.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<android.support.v7.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: com.fasterxml.jackson.databind.util.Annotations getClassAnnotations()>
<com.fasterxml.jackson.databind.ser.PropertyBuilder: java.lang.Object getDefaultBean()>
<android.util.SparseArray: android.util.SparseArray clone()>
<dagger.internal.Linker: void linkRequested()>
<android.util.SparseArray: int size()>
<android.bluetooth.BluetoothInputDevice: boolean doBind()>
<android.util.SparseArray: void clear()>
<android.support.v4.app.FragmentActivity$HostCallbacks: android.support.v4.app.FragmentActivity onGetHost()>
<android.support.v4.app.FragmentActivity$HostCallbacks: android.view.LayoutInflater onGetLayoutInflater()>
<android.support.v4.app.FragmentActivity$HostCallbacks: int onGetWindowAnimations()>
<android.support.v4.app.FragmentActivity$HostCallbacks: boolean onHasWindowAnimations()>
<android.support.v7.view.menu.MenuBuilder: int size()>
<android.support.v7.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<android.support.v7.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<android.support.v4.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()>
<android.icu.text.MessagePattern: void clear()>
<android.icu.text.MessagePattern: boolean jdkAposMode()>
<android.icu.text.MessagePattern: int countParts()>
<android.icu.text.MessagePattern: boolean isFrozen()>
<java.util.zip.ZipEntry: java.lang.String getName()>
<java.util.zip.ZipEntry: long getTime()>
<java.util.zip.ZipEntry: long getSize()>
<java.util.zip.ZipEntry: int getMethod()>
<java.util.zip.ZipEntry: boolean isDirectory()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: void autoSizeText()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: int getAutoSizeMaxTextSize()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: int getAutoSizeMinTextSize()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: int getAutoSizeStepGranularity()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: int[] getAutoSizeTextAvailableSizes()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: int getAutoSizeTextType()>
<android.support.v7.widget.AppCompatTextViewAutoSizeHelper: boolean isAutoSizeEnabled()>
<android.content.Intent$FilterComparison: int hashCode()>
<android.icu.impl.CurrencyData$CurrencySpacingInfo: java.lang.String[] getBeforeSymbols()>
<android.icu.impl.CurrencyData$CurrencySpacingInfo: java.lang.String[] getAfterSymbols()>
<android.support.v7.widget.GapWorker$LayoutPrefetchRegistryImpl: void clearPrefetchPositions()>
<android.view.InputEventConsistencyVerifier$KeyState: void recycle()>
<java.security.PrivilegedActionException: java.lang.Exception getException()>
<android.support.v7.widget.LinearLayoutManager$SavedState: void invalidateAnchor()>
<com.google.zxing.common.BitMatrix: int getHeight()>
<com.google.zxing.common.BitMatrix: int getWidth()>
<com.fasterxml.jackson.databind.BeanProperty$Std: com.fasterxml.jackson.databind.PropertyName getWrapperName()>
<org.thoughtcrime.securesms.webrtc.UncaughtExceptionHandlerManager: void unregister()>
<android.hardware.Camera$Parameters: java.lang.String flatten()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>
<android.media.AudioFormat: int getEncoding()>
<android.media.AudioFormat: int getSampleRate()>
<android.media.AudioFormat: int getChannelMask()>
<android.media.AudioFormat: int getChannelIndexMask()>
<android.media.AudioFormat: int getChannelCount()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>
<android.media.AudioFormat: int getPropertySetMask()>
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>
<sun.misc.FormattedFloatingDecimal: int getExponentRounded()>
<sun.misc.FormattedFloatingDecimal: char[] getMantissa()>
<sun.misc.FormattedFloatingDecimal: char[] getExponent()>
<sun.misc.Cleaner: void clean()>
<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>
<org.thoughtcrime.securesms.database.MmsDatabase$Reader: void close()>
<org.thoughtcrime.securesms.database.MmsDatabase$Reader: org.thoughtcrime.securesms.database.model.MessageRecord getCurrent()>
<org.thoughtcrime.securesms.database.MmsDatabase$Reader: org.thoughtcrime.securesms.database.model.MessageRecord getNext()>
<com.fasterxml.jackson.databind.type.TypeBindings: void _resolve()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type: int getNumber()>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings childInstance()>
<android.bluetooth.BluetoothAvrcpController: boolean doBind()>
<com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.JavaType[] typesAsArray()>
<android.support.design.widget.BaseTransientBottomBar$3: void show()>
<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.icu.impl.UnicodeSetStringSpan: boolean needsStringSpanUTF16()>
<android.icu.impl.TextTrieMap$CharIterator: boolean hasNext()>
<android.icu.impl.TextTrieMap$CharIterator: java.lang.Character next()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.icu.impl.TextTrieMap$CharIterator: int processedLength()>
<android.support.design.widget.CoordinatorLayout: void addPreDrawListener()>
<java.util.concurrent.ConcurrentHashMap: void clear()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<android.net.Uri$PathPart: java.lang.String getEncoded()>
<android.widget.ProgressBar: void postInvalidate()>
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()>
<android.support.design.widget.CoordinatorLayout: void ensurePreDrawListener()>
<android.widget.ProgressBar: int getProgress()>
<android.widget.ProgressBar: int getMax()>
<com.fasterxml.jackson.databind.type.MapLikeType: boolean isTrueMapType()>
<android.widget.ProgressBar: void startAnimation()>
<android.widget.ProgressBar: void stopAnimation()>
<android.support.design.widget.CoordinatorLayout: int getSuggestedMinimumHeight()>
<android.support.design.widget.CoordinatorLayout: int getSuggestedMinimumWidth()>
<android.net.NetworkCapabilities: void clearAll()>
<android.graphics.drawable.VectorDrawable: void computeVectorSize()>
<android.media.TtmlTrack: android.media.TtmlCue getNextResult()>
<android.transition.Visibility: int getMode()>
<android.graphics.drawable.VectorDrawable: float getPixelSize()>
<android.net.NetworkCapabilities: void maybeMarkCapabilitiesRestricted()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.JsonSerializer build()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.String getFullName()>
<com.android.internal.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>
<com.android.internal.view.menu.ListMenuPresenter$MenuAdapter: void notifyDataSetChanged()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.BeanSerializer createDummy()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.AnyGetterWriter getAnyGetter()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.BeanDescription getBeanDescription()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: java.lang.Object getFilterId()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter getObjectIdWriter()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: java.util.List getProperties()>
<com.fasterxml.jackson.databind.ser.BeanSerializerBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getTypeId()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class[] getRawParameterTypes()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: java.lang.Class getRawReturnType()>
<java.io.ObjectOutputStream: int getProtocolVersion()>
<com.fasterxml.jackson.databind.introspect.AnnotatedMethod: boolean hasReturnType()>
<java.util.Vector$Itr: void remove()>
<java.util.Vector$Itr: void checkForComodification()>
<android.support.v7.widget.GapWorker$Task: void clear()>
<org.webrtc.EglBase10$1FakeSurfaceHolder: android.view.Surface getSurface()>
<android.graphics.drawable.VectorDrawable: long getNativeTree()>
<java.util.Random: int nextInt()>
<java.util.Random: long nextLong()>
<java.util.Random: boolean nextBoolean()>
<java.util.Random: float nextFloat()>
<java.util.Random: double nextDouble()>
<com.google.android.exoplayer2.ui.PlaybackControlView: int getShowTimeoutMs()>
<com.google.android.exoplayer2.ui.PlaybackControlView: void hide()>
<com.google.android.exoplayer2.ui.PlaybackControlView: boolean isVisible()>
<android.support.design.widget.CoordinatorLayout: void removePreDrawListener()>
<com.google.android.exoplayer2.ui.PlaybackControlView: void show()>
<java.nio.Buffer: int capacity()>
<java.nio.Buffer: int position()>
<java.nio.Buffer: int limit()>
<android.support.v7.widget.DefaultItemAnimator$1: void run()>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: java.nio.Buffer rewind()>
<java.nio.Buffer: int remaining()>
<java.nio.Buffer: boolean hasRemaining()>
<java.nio.Buffer: int nextGetIndex()>
<java.nio.Buffer: int nextPutIndex()>
<android.graphics.PathMeasure: float getLength()>
<android.bluetooth.BluetoothMapClient: boolean doBind()>
<android.graphics.PathMeasure: boolean nextContour()>
<java.nio.Buffer: int markValue()>
<java.nio.Buffer: void discardMark()>
<android.widget.PopupWindow$PopupDecorView: void cancelTransitions()>
<com.soundcloud.android.crop.CropImageActivity$Cropper: void crop()>
<android.icu.text.DecimalFormat$AffixForCurrency: java.lang.String getNegPrefix()>
<android.icu.text.DecimalFormat$AffixForCurrency: java.lang.String getNegSuffix()>
<android.icu.text.DecimalFormat$AffixForCurrency: java.lang.String getPosPrefix()>
<android.icu.text.DecimalFormat$AffixForCurrency: java.lang.String getPosSuffix()>
<android.icu.text.DecimalFormat$AffixForCurrency: int getPatternType()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: com.google.protobuf.ByteString getBaseKey()>
<com.android.internal.view.FloatingActionMode$2: void run()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: int getPreKeyId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: int getSignedPreKeyId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: boolean hasBaseKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: boolean hasPreKeyId()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingPreKey: boolean hasSignedPreKeyId()>
<java.security.AlgorithmParameters: java.lang.String toString()>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<org.whispersystems.jobqueue.JobManager$Builder: org.whispersystems.jobqueue.JobManager build()>
<java.util.Properties: java.util.Enumeration propertyNames()>
<java.text.SimpleDateFormat: java.lang.String toPattern()>
<java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()>
<android.icu.util.Calendar: java.util.Date getTime()>
<java.text.SimpleDateFormat: java.lang.Object clone()>
<android.icu.util.Calendar: long getTimeInMillis()>
<android.database.MergeCursor: java.lang.String[] getColumnNames()>
<android.icu.util.Calendar: int getRelatedYear()>
<android.icu.util.Calendar: void complete()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: java.lang.Class getBeanType()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring: com.fasterxml.jackson.core.JsonLocation getLocation()>
<java.util.HashMap$HashIterator: java.util.HashMap$Node nextNode()>
<org.thoughtcrime.securesms.mms.PartUriParser: org.thoughtcrime.securesms.attachments.AttachmentId getPartId()>
<com.google.protobuf.DescriptorProtos$MessageOptions: boolean getMessageSetWireFormat()>
<com.google.protobuf.DescriptorProtos$MessageOptions: boolean getNoStandardDescriptorAccessor()>
<java.util.concurrent.ConcurrentHashMap: long sumCount()>
<com.google.protobuf.DescriptorProtos$MessageOptions: int getUninterpretedOptionCount()>
<com.google.protobuf.DescriptorProtos$MessageOptions: boolean hasMessageSetWireFormat()>
<com.google.protobuf.DescriptorProtos$MessageOptions: boolean hasNoStandardDescriptorAccessor()>
<java.lang.Byte: byte byteValue()>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: java.lang.Object getProvider()>
<java.util.ServiceLoader$1: boolean hasNext()>
<java.util.ServiceLoader$1: java.lang.Object next()>
<android.icu.util.Calendar: android.icu.util.TimeZone getTimeZone()>
<android.icu.util.Calendar: boolean isLenient()>
<android.icu.util.Calendar: int getRepeatedWallTimeOption()>
<org.thoughtcrime.securesms.notifications.NotificationItem: long getId()>
<org.thoughtcrime.securesms.notifications.NotificationItem: org.thoughtcrime.securesms.recipients.Recipient getIndividualRecipient()>
<android.icu.util.Calendar: int getSkippedWallTimeOption()>
<android.icu.util.Calendar: int getFirstDayOfWeek()>
<android.icu.util.Calendar: int getMinimalDaysInFirstWeek()>
<org.thoughtcrime.securesms.notifications.NotificationItem: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.notifications.NotificationItem: org.thoughtcrime.securesms.mms.SlideDeck getSlideDeck()>
<org.thoughtcrime.securesms.notifications.NotificationItem: java.lang.CharSequence getText()>
<org.thoughtcrime.securesms.notifications.NotificationItem: long getThreadId()>
<org.thoughtcrime.securesms.notifications.NotificationItem: long getTimestamp()>
<org.thoughtcrime.securesms.notifications.NotificationItem: boolean isMms()>
<android.icu.util.Calendar: java.lang.Object clone()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: int getMethodCount()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: com.google.protobuf.DescriptorProtos$ServiceOptions getOptions()>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void clear()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getBaseline()>
<android.support.v7.widget.RecyclerView$RecycledViewPool: void detach()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: boolean hasName()>
<com.google.protobuf.DescriptorProtos$ServiceDescriptorProto: boolean hasOptions()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getChildCount()>
<android.support.v7.widget.AppCompatTextHelper: void autoSizeText()>
<android.support.v7.widget.AppCompatTextHelper: int getAutoSizeMaxTextSize()>
<android.support.v7.widget.AppCompatTextHelper: int getAutoSizeMinTextSize()>
<android.support.v7.widget.AppCompatTextHelper: int getAutoSizeStepGranularity()>
<android.support.v7.widget.AppCompatTextHelper: int[] getAutoSizeTextAvailableSizes()>
<android.support.v7.widget.AppCompatTextHelper: int getAutoSizeTextType()>
<android.support.v7.widget.AppCompatTextHelper: boolean isAutoSizeEnabled()>
<android.support.v7.internal.widget.PreferenceImageView: int getMaxHeight()>
<android.support.v7.internal.widget.PreferenceImageView: int getMaxWidth()>
<android.icu.util.Calendar: void computeFields()>
<android.support.v7.widget.RecyclerView$LayoutManager: android.view.View getFocusedChild()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getHeight()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getHeightMode()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getItemCount()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getLayoutDirection()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getMinimumHeight()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getMinimumWidth()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingBottom()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingEnd()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingLeft()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingRight()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingStart()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getPaddingTop()>
<org.thoughtcrime.securesms.ContactSelectionActivity: org.thoughtcrime.securesms.components.ContactFilterToolbar getToolbar()>
<org.thoughtcrime.securesms.ContactSelectionActivity: void onRefresh()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getWidth()>
<android.support.v7.widget.RecyclerView$LayoutManager: int getWidthMode()>
<android.icu.util.Calendar: void validateFields()>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean hasFlexibleChildInBothOrientations()>
<android.icu.impl.ICUResourceBundleReader: int getRootResource()>
<android.icu.impl.ICUResourceBundleReader: boolean getNoFallback()>
<android.icu.util.Calendar: void computeTime()>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean isAttachedToWindow()>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean isItemPrefetchEnabled()>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean isMeasurementCacheEnabled()>
<android.support.design.widget.AppBarLayout$LayoutParams: android.view.animation.Interpolator getScrollInterpolator()>
<android.support.v7.widget.RecyclerView$LayoutManager: boolean isSmoothScrolling()>
<android.support.design.widget.AppBarLayout$LayoutParams: boolean isCollapsible()>
<android.support.v4.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: android.support.v4.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>
<android.icu.util.Calendar: int computeMillisInDay()>
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>
<android.view.inputmethod.InputConnectionWrapper: int getMissingMethodFlags()>
<android.icu.util.Calendar: int computeJulianDay()>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.CameraPosition getCamera()>
<com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.LatLngBounds getLatLngBoundsForCameraTarget()>
<com.google.android.gms.maps.GoogleMapOptions: int getMapType()>
<com.google.android.gms.maps.GoogleMapOptions: java.lang.Float getMaxZoomPreference()>
<android.icu.util.Calendar: int[] handleCreateFields()>
<com.google.android.gms.maps.GoogleMapOptions: java.lang.Float getMinZoomPreference()>
<com.google.android.gms.maps.GoogleMapOptions: int getVersionCode()>
<android.media.Cea608CCParser$CCLineBuilder: int length()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrj()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrk()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrl()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrm()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrn()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbro()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrp()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrq()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrr()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrs()>
<com.google.android.gms.maps.GoogleMapOptions: byte zzbrt()>
<android.icu.util.Calendar: int getGregorianYear()>
<android.icu.util.Calendar: int getGregorianMonth()>
<android.icu.util.Calendar: int getGregorianDayOfYear()>
<android.icu.util.Calendar: int getGregorianDayOfMonth()>
<android.icu.util.Calendar: int getFieldCount()>
<java.util.concurrent.Executors$DelegatedExecutorService: void shutdown()>
<android.support.v4.util.ArrayMap$1: int colGetSize()>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<android.icu.util.Calendar: long internalGetTimeInMillis()>
<android.database.sqlite.SQLiteClosable: void releaseReference()>
<com.google.protobuf.GeneratedMessage$Builder: com.google.protobuf.GeneratedMessage$BuilderParent getParentForChildren()>
<android.database.sqlite.SQLiteClosable: void close()>
<java.text.ParsePosition: int getIndex()>
<com.google.protobuf.GeneratedMessage$Builder: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<java.text.ParsePosition: int getErrorIndex()>
<com.google.protobuf.GeneratedMessage$Builder: boolean isClean()>
<com.google.protobuf.GeneratedMessage$Builder: void markClean()>
<android.support.v7.widget.RecyclerView$LayoutManager: void removeAllViews()>
<com.google.protobuf.GeneratedMessage$Builder: void onBuilt()>
<com.google.protobuf.GeneratedMessage$Builder: void onChanged()>
<android.support.v7.view.menu.MenuItemImpl: void actionFormatChanged()>
<android.support.v7.view.menu.MenuItemImpl: boolean collapseActionView()>
<android.support.v7.view.menu.MenuItemImpl: boolean expandActionView()>
<android.support.v7.view.menu.MenuItemImpl: android.view.View getActionView()>
<android.support.v7.widget.RecyclerView$LayoutManager: void requestLayout()>
<android.support.v7.widget.RecyclerView$LayoutManager: void requestSimpleAnimationsInNextLayout()>
<android.support.v7.view.menu.MenuItemImpl: int getAlphabeticModifiers()>
<android.support.v7.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<android.support.v7.view.menu.MenuItemImpl: java.lang.CharSequence getContentDescription()>
<android.support.v7.view.menu.MenuItemImpl: int getGroupId()>
<android.support.v7.view.menu.MenuItemImpl: android.content.Intent getIntent()>
<android.support.v7.view.menu.MenuItemImpl: int getNumericModifiers()>
<android.support.v7.view.menu.MenuItemImpl: char getNumericShortcut()>
<android.support.v7.view.menu.MenuItemImpl: int getOrdering()>
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()>
<android.support.v7.view.menu.MenuItemImpl: char getShortcut()>
<android.support.v7.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()>
<android.support.v7.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()>
<android.support.v7.view.menu.MenuItemImpl: android.support.v4.view.ActionProvider getSupportActionProvider()>
<android.support.v7.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()>
<android.support.v7.view.menu.MenuItemImpl: java.lang.CharSequence getTooltipText()>
<android.support.v7.view.menu.MenuItemImpl: boolean hasCollapsibleActionView()>
<android.support.v7.view.menu.MenuItemImpl: boolean hasSubMenu()>
<android.support.v7.view.menu.MenuItemImpl: boolean invoke()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: android.graphics.RectF getDisplayRect()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: android.graphics.Matrix getImageMatrix()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: float getMaximumScale()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: float getMediumScale()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: float getMinimumScale()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: float getScale()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: android.widget.ImageView$ScaleType getScaleType()>
<android.support.v7.view.menu.MenuItemImpl: boolean isActionButton()>
<android.support.v7.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<android.support.v7.view.menu.MenuItemImpl: boolean isCheckable()>
<android.support.v7.view.menu.MenuItemImpl: boolean isChecked()>
<android.support.v7.view.menu.MenuItemImpl: boolean isEnabled()>
<android.support.v7.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<android.support.v7.view.menu.MenuItemImpl: boolean isVisible()>
<android.support.v7.view.menu.MenuItemImpl: boolean requestsActionButton()>
<android.support.v7.view.menu.MenuItemImpl: boolean requiresActionButton()>
<android.widget.AbsListView$PerformClick: void run()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$Candidate: org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo getDrawInfo()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$Candidate: int getEndIndex()>
<org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser$Candidate: int getStartIndex()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: com.google.protobuf.ByteString getCipherKey()>
<android.support.v7.widget.RecyclerView$LayoutManager: void stopSmoothScroller()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: int getIndex()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: com.google.protobuf.ByteString getIv()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: com.google.protobuf.ByteString getMacKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: boolean hasCipherKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: boolean hasIndex()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: boolean hasIv()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$Chain$MessageKey: boolean hasMacKey()>
<com.github.chrisbanes.photoview.PhotoViewAttacher: void update()>
<android.support.v7.view.menu.MenuItemImpl: boolean shouldShowIcon()>
<android.support.v7.view.menu.MenuItemImpl: boolean shouldShowShortcut()>
<android.support.v7.view.menu.MenuItemImpl: boolean showsTextAsAction()>
<java.lang.UNIXProcess$ProcessPipeOutputStream: void processExited()>
<com.fasterxml.jackson.databind.node.ArrayNode: int size()>
<android.support.v7.widget.StaggeredGridLayoutManager: boolean checkForGaps()>
<java.lang.Runtime: int availableProcessors()>
<java.lang.Runtime: long freeMemory()>
<java.lang.Runtime: long totalMemory()>
<java.lang.Runtime: long maxMemory()>
<java.lang.Runtime: void gc()>
<java.lang.Runtime: void runFinalization()>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: boolean isConnected()>
<android.support.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()>
<android.util.MapCollections$ArrayIterator: void remove()>
<android.icu.impl.locale.LocaleExtensions: java.util.Set getKeys()>
<android.support.v7.widget.DefaultItemAnimator: void dispatchFinishedWhenDone()>
<android.support.v7.widget.DefaultItemAnimator: void endAnimations()>
<android.support.v7.widget.StaggeredGridLayoutManager: int getFirstChildPosition()>
<android.support.v7.widget.StaggeredGridLayoutManager: int getLastChildPosition()>
<android.support.v7.widget.StaggeredGridLayoutManager: android.view.View hasGapsToFix()>
<android.support.v7.widget.DefaultItemAnimator: boolean isRunning()>
<android.support.v7.widget.StaggeredGridLayoutManager: void invalidateSpanAssignments()>
<android.support.v7.widget.StaggeredGridLayoutManager: boolean isLayoutRTL()>
<android.support.v7.widget.DefaultItemAnimator: void runPendingAnimations()>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: void onMasterSecretCleared()>
<org.thoughtcrime.securesms.PassphraseRequiredActionBarActivity: void onPreCreate()>
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()>
<android.widget.ScrollBarDrawable: boolean isStateful()>
<android.widget.ScrollBarDrawable: android.widget.ScrollBarDrawable mutate()>
<android.graphics.drawable.AnimatedVectorDrawable: void reverse()>
<android.graphics.drawable.AnimatedVectorDrawable: boolean canReverse()>
<android.widget.ScrollBarDrawable: int getAlpha()>
<android.support.v7.widget.ForwardingListener: void onLongPress()>
<android.media.MediaCodec$BufferInfo: android.media.MediaCodec$BufferInfo dup()>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: android.media.MediaCodec getCodec()>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: long getDequeueOutputBufferTimeoutUs()>
<org.thoughtcrime.securesms.database.MessagingDatabase$MarkedMessageInfo: org.thoughtcrime.securesms.database.MessagingDatabase$ExpirationInfo getExpirationInfo()>
<org.thoughtcrime.securesms.database.MessagingDatabase$MarkedMessageInfo: org.thoughtcrime.securesms.database.MessagingDatabase$SyncMessageId getSyncMessageId()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<android.media.Cea608CCWidget: android.view.accessibility.CaptioningManager$CaptionStyle getCaptionStyle()>
<java.lang.Double: boolean isNaN()>
<java.lang.Double: boolean isInfinite()>
<java.lang.Thread: void start()>
<java.lang.Thread: void interrupt()>
<java.lang.Thread: boolean isInterrupted()>
<java.lang.Thread: boolean isAlive()>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Thread: int getPriority()>
<java.lang.Thread: java.lang.String getName()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<android.graphics.Shader: long getNativeInstance()>
<java.lang.Thread: boolean isDaemon()>
<java.lang.Thread: void checkAccess()>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>
<java.lang.Thread: long getId()>
<java.lang.Thread: java.lang.Thread$State getState()>
<com.google.android.exoplayer2.mediacodec.MediaCodecRenderer: void releaseCodec()>
<java.lang.Thread: void unpark$()>
<android.support.v4.content.Loader: void abandon()>
<android.support.v4.content.Loader: boolean cancelLoad()>
<android.widget.ProgressBar$RefreshData: void recycle()>
<android.support.v4.content.Loader: void commitContentChanged()>
<android.support.v4.content.Loader: void deliverCancellation()>
<android.support.v4.content.Loader: void forceLoad()>
<android.support.v4.content.Loader: android.content.Context getContext()>
<android.support.v4.content.Loader: boolean isAbandoned()>
<com.google.android.exoplayer2.ui.SimpleExoPlayerView: void hideController()>
<android.support.v4.content.Loader: boolean isReset()>
<android.support.v4.content.Loader: boolean isStarted()>
<android.support.v4.content.Loader: void onAbandon()>
<android.support.v4.content.Loader: void onContentChanged()>
<com.fasterxml.jackson.databind.type.HierarchicType: java.lang.reflect.ParameterizedType asGeneric()>
<com.fasterxml.jackson.databind.type.HierarchicType: com.fasterxml.jackson.databind.type.HierarchicType deepCloneWithoutSubtype()>
<android.support.v4.content.Loader: void reset()>
<android.support.v4.content.Loader: void rollbackContentChanged()>
<com.fasterxml.jackson.databind.type.HierarchicType: java.lang.Class getRawClass()>
<android.support.v4.content.Loader: void startLoading()>
<com.fasterxml.jackson.databind.type.HierarchicType: com.fasterxml.jackson.databind.type.HierarchicType getSuperType()>
<android.support.v4.content.Loader: void stopLoading()>
<android.support.v4.content.Loader: boolean takeContentChanged()>
<com.fasterxml.jackson.databind.type.HierarchicType: boolean isGeneric()>
<org.webrtc.VideoFrameDrawer: void release()>
<com.google.zxing.qrcode.decoder.Version: int getDimensionForVersion()>
<com.google.zxing.qrcode.decoder.Version: int getTotalCodewords()>
<com.google.zxing.qrcode.decoder.Version: int getVersionNumber()>
<com.google.android.exoplayer2.DefaultLoadControl: com.google.android.exoplayer2.upstream.Allocator getAllocator()>
<com.google.android.exoplayer2.DefaultLoadControl: void onPrepared()>
<com.google.android.exoplayer2.DefaultLoadControl: void onReleased()>
<com.google.android.exoplayer2.DefaultLoadControl: void onStopped()>
<com.bumptech.glide.manager.TargetTracker: void clear()>
<com.bumptech.glide.manager.TargetTracker: java.util.List getAll()>
<com.bumptech.glide.manager.TargetTracker: void onDestroy()>
<com.bumptech.glide.manager.TargetTracker: void onStart()>
<com.bumptech.glide.manager.TargetTracker: void onStop()>
<android.icu.text.TransliteratorParser$RuleArray: java.lang.String handleNextLine()>
<android.icu.text.TransliteratorParser$RuleArray: void reset()>
<org.thoughtcrime.securesms.database.DraftDatabase$Draft: java.lang.String getType()>
<org.thoughtcrime.securesms.database.DraftDatabase$Draft: java.lang.String getValue()>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: boolean hasObservers()>
<android.support.v7.widget.RecyclerView$AdapterDataObservable: void notifyChanged()>
<android.util.Rational: boolean isNaN()>
<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>
<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>
<com.fasterxml.jackson.core.JsonToken: int id()>
<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>
<com.fasterxml.jackson.core.JsonToken: boolean isScalarValue()>
<com.fasterxml.jackson.core.JsonToken: boolean isStructEnd()>
<com.fasterxml.jackson.core.JsonToken: boolean isStructStart()>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.support.v4.provider.FontRequest: java.util.List getCertificates()>
<android.support.v4.provider.FontRequest: int getCertificatesArrayResId()>
<android.support.v4.provider.FontRequest: java.lang.String getIdentifier()>
<android.support.v4.provider.FontRequest: java.lang.String getProviderAuthority()>
<android.support.v4.provider.FontRequest: java.lang.String getProviderPackage()>
<org.whispersystems.signalservice.internal.push.SignalServiceProtos$Envelope$Type: int getNumber()>
<android.support.v4.provider.FontRequest: java.lang.String getQuery()>
<java.io.ObjectInputStream$HandleTable$HandleList: int size()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$SignalContact: java.lang.String getAggregateDisplayName()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$SignalContact: int getDisplayNameSource()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$SignalContact: long getId()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$SignalContact: java.lang.String getRawDisplayName()>
<org.thoughtcrime.securesms.contacts.ContactsDatabase$SignalContact: boolean isVoiceSupported()>
<java.io.UnixFileSystem: char getSeparator()>
<java.io.UnixFileSystem: char getPathSeparator()>
<com.github.chrisbanes.photoview.PhotoViewAttacher$FlingRunnable: void cancelFling()>
<java.io.UnixFileSystem: java.lang.String getDefaultParent()>
<java.nio.file.attribute.FileTime: long toMillis()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: long getBufferedPositionUs()>
<android.icu.impl.Trie2$Trie2Iterator: boolean hasNext()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: long getNextLoadPositionUs()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: com.google.android.exoplayer2.source.TrackGroupArray getTrackGroups()>
<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>
<com.google.android.gms.common.zzd$zzb: byte[] getBytes()>
<com.android.internal.view.menu.MenuAdapter: com.android.internal.view.menu.MenuBuilder getAdapterMenu()>
<android.content.UndoOperation: android.content.UndoOwner getOwner()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: long readDiscontinuity()>
<android.content.UndoOperation: java.lang.Object getOwnerData()>
<sun.security.x509.CertificateValidity: java.lang.String toString()>
<com.android.internal.view.menu.MenuAdapter: void findExpandedIndex()>
<com.google.android.exoplayer2.source.ExtractorMediaPeriod: void release()>
<android.content.UndoOperation: boolean hasData()>
<android.content.UndoOperation: boolean allowMerge()>
<com.android.internal.view.menu.MenuAdapter: void notifyDataSetChanged()>
<android.bluetooth.BluetoothA2dpSink: boolean doBind()>
<android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup: void clear()>
<android.support.v7.widget.RecyclerView$ItemAnimator: void dispatchAnimationsFinished()>
<android.support.v7.widget.RecyclerView$ItemAnimator: long getAddDuration()>
<android.support.v7.widget.RecyclerView$ItemAnimator: long getChangeDuration()>
<android.support.v7.widget.RecyclerView$ItemAnimator: long getMoveDuration()>
<android.support.v7.widget.RecyclerView$ItemAnimator: long getRemoveDuration()>
<android.support.v7.widget.RecyclerView$ItemAnimator: android.support.v7.widget.RecyclerView$ItemAnimator$ItemHolderInfo obtainHolderInfo()>
<com.android.internal.util.VirtualRefBasePtr: long get()>
<com.android.internal.util.VirtualRefBasePtr: void release()>
<android.support.v4.widget.ScrollerCompat: void abortAnimation()>
<android.support.v4.widget.ScrollerCompat: boolean computeScrollOffset()>
<com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter: java.lang.Class getPropertyType()>
<android.support.v4.app.BackStackRecord: int commit()>
<android.support.v4.app.BackStackRecord: int commitAllowingStateLoss()>
<android.support.v4.widget.ScrollerCompat: int getCurrY()>
<org.webrtc.GlTextureFrameBuffer: int getFrameBufferId()>
<android.support.v4.widget.ScrollerCompat: boolean isFinished()>
<org.webrtc.GlTextureFrameBuffer: int getTextureId()>
<org.webrtc.GlTextureFrameBuffer: void release()>
<com.google.protobuf.GeneratedMessage$Builder$BuilderParentImpl: void markDirty()>
<sun.net.ftp.impl.DefaultFtpClientProvider: sun.net.ftp.FtpClient createFtpClient()>
<android.icu.util.TimeZoneRule: java.lang.String getName()>
<android.icu.util.TimeZoneRule: int getRawOffset()>
<android.icu.util.TimeZoneRule: int getDSTSavings()>
<android.bluetooth.BluetoothSap: boolean doBind()>
<com.fasterxml.jackson.databind.node.DecimalNode: double doubleValue()>
<com.fasterxml.jackson.databind.JsonMappingException: java.lang.String _buildMessage()>
<android.os.Message: void recycle()>
<android.os.Message: void recycleUnchecked()>
<android.support.v4.app.BackStackRecord: void executeOps()>
<android.os.Message: void sendToTarget()>
<android.os.Message: boolean isAsynchronous()>
<org.webrtc.PeerConnection: void close()>
<android.os.Message: boolean isInUse()>
<android.os.Message: void markInUse()>
<org.webrtc.PeerConnection: void dispose()>
<com.android.internal.policy.PhoneWindow: boolean isFloating()>
<com.android.internal.policy.PhoneWindow: boolean isTranslucent()>
<com.android.internal.policy.PhoneWindow: boolean isShowingWallpaper()>
<java.net.URISyntaxException: java.lang.String getReason()>
<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater getLayoutInflater()>
<android.support.v4.app.BackStackRecord: java.lang.String getName()>
<com.bumptech.glide.load.model.ModelLoaderRegistry$ModelLoaderCache: void clear()>
<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>
<com.fasterxml.jackson.databind.DatabindContext: boolean canOverrideAccessModifiers()>
<java.net.InetAddress$InetAddressHolder: int getAddress()>
<android.support.v4.app.BackStackRecord: boolean isPostponed()>
<android.support.v4.app.BackStackRecord: void runOnCommitRunnables()>
<com.android.internal.policy.PhoneWindow: void doPendingInvalidatePanelMenu()>
<android.view.RenderNodeAnimator: void start()>
<android.graphics.Typeface: int getStyle()>
<com.android.internal.policy.PhoneWindow: void closeAllPanels()>
<android.view.RenderNodeAnimator: boolean isRunning()>
<android.view.RenderNodeAnimator: long getNativeAnimator()>
<android.app.ActivityTransitionState: void onStop()>
<android.app.ActivityTransitionState: void clear()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: int getEnumTypeCount()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: int getExtensionCount()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: java.util.List getExtensionRangeList()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: int getFieldCount()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: int getNestedTypeCount()>
<android.support.v4.app.ListFragment: android.widget.ListAdapter getListAdapter()>
<android.support.v4.app.ListFragment: android.widget.ListView getListView()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: com.google.protobuf.DescriptorProtos$MessageOptions getOptions()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: boolean hasName()>
<com.google.protobuf.DescriptorProtos$DescriptorProto: boolean hasOptions()>
<android.widget.OverScroller: boolean isFinished()>
<android.widget.OverScroller: int getCurrX()>
<android.widget.OverScroller: int getCurrY()>
<android.widget.OverScroller: float getCurrVelocity()>
<android.widget.OverScroller: int getFinalX()>
<android.widget.OverScroller: int getFinalY()>
<com.android.internal.policy.PhoneWindow: android.view.View getDecorView()>
<android.widget.OverScroller: boolean computeScrollOffset()>
<com.android.internal.policy.PhoneWindow: android.view.View peekDecorView()>
<com.android.internal.policy.PhoneWindow: android.os.Bundle saveHierarchyState()>
<java.util.GregorianCalendar: java.lang.String getCalendarType()>
<android.widget.OverScroller: void abortAnimation()>
<sun.nio.cs.StreamDecoder: boolean implReady()>
<com.google.protobuf.DescriptorProtos$FileOptions$OptimizeMode: int getNumber()>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void onChanged()>
<android.support.v7.widget.RecyclerView$RecyclerViewDataObserver: void triggerUpdateProcessor()>
<android.support.v7.widget.GridLayout$Assoc: android.support.v7.widget.GridLayout$PackedMap pack()>
<java.util.TreeMap: java.util.Comparator comparator()>
<java.util.TreeMap: java.lang.Object firstKey()>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<com.android.internal.policy.PhoneWindow: void alwaysReadCloseOnTouchAttr()>
<android.support.v4.widget.AutoScrollHelper$ScrollAnimationRunnable: void run()>
<com.google.protobuf.CodedInputStream: int getBytesUntilLimit()>
<android.support.design.widget.CollapsingTextHelper: android.content.res.ColorStateList getCollapsedTextColor()>
<android.support.design.widget.CollapsingTextHelper: int getCollapsedTextGravity()>
<android.support.design.widget.CollapsingTextHelper: float getCollapsedTextSize()>
<android.support.design.widget.CollapsingTextHelper: android.graphics.Typeface getCollapsedTypeface()>
<android.widget.Editor$SuggestionsPopupWindow: void setUp()>
<android.support.design.widget.CollapsingTextHelper: int getExpandedTextGravity()>
<android.support.design.widget.CollapsingTextHelper: android.graphics.Typeface getExpandedTypeface()>
<android.support.design.widget.CollapsingTextHelper: float getExpansionFraction()>
<android.support.design.widget.CollapsingTextHelper: java.lang.CharSequence getText()>
<android.support.design.widget.CollapsingTextHelper: boolean isStateful()>
<android.widget.Editor$SuggestionsPopupWindow: void createPopupWindow()>
<android.support.design.widget.CollapsingTextHelper: void onBoundsChanged()>
<android.widget.Editor$SuggestionsPopupWindow: void initContentView()>
<java.util.TreeMap: void clear()>
<java.util.TreeMap: java.lang.Object clone()>
<android.support.design.widget.CollapsingTextHelper: void recalculate()>
<java.util.TreeMap: java.util.Map$Entry pollFirstEntry()>
<android.icu.text.DecimalFormat: android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols()>
<android.widget.Editor$SuggestionsPopupWindow: boolean isShowingUp()>
<android.widget.Editor$SuggestionsPopupWindow: void onParentLostFocus()>
<android.widget.Editor$SuggestionsPopupWindow: void show()>
<android.icu.text.DecimalFormat: java.lang.String getPositivePrefix()>
<android.widget.Editor$SuggestionsPopupWindow: void measureContent()>
<android.icu.text.DecimalFormat: java.lang.String getNegativePrefix()>
<android.app.FragmentManagerImpl: android.app.FragmentTransaction beginTransaction()>
<android.icu.text.DecimalFormat: java.lang.String getPositiveSuffix()>
<android.app.FragmentManagerImpl: boolean executePendingTransactions()>
<android.app.FragmentManagerImpl: boolean popBackStackImmediate()>
<android.icu.text.DecimalFormat: java.lang.String getNegativeSuffix()>
<java.util.GregorianCalendar: java.lang.Object clone()>
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>
<java.util.GregorianCalendar: java.util.TimeZone getTimeZone()>
<android.icu.text.DecimalFormat: java.math.BigDecimal getRoundingIncrement()>
<java.util.GregorianCalendar: boolean isWeekDateSupported()>
<java.util.GregorianCalendar: int getWeekYear()>
<android.widget.Editor$SuggestionsPopupWindow: int getTextOffset()>
<android.icu.text.DecimalFormat: boolean isScientificNotation()>
<android.icu.text.DecimalFormat: int getGroupingSize()>
<java.util.TreeMap: java.util.Iterator keyIterator()>
<java.util.GregorianCalendar: void computeFields()>
<java.util.SubList: int size()>
<android.icu.text.DecimalFormat: boolean isDecimalPatternMatchRequired()>
<android.view.ViewStub: android.view.View inflate()>
<android.icu.text.DecimalFormat: java.lang.Object clone()>
<java.util.TreeMap: java.util.TreeMap$TreeMapEntry getFirstEntry()>
<java.util.SubList: java.util.Iterator iterator()>
<android.widget.Editor$SuggestionsPopupWindow: boolean isShowing()>
<android.widget.Editor$SuggestionsPopupWindow: void hide()>
<android.icu.text.DecimalFormat: java.lang.String toPattern()>
<android.support.v4.content.ModernAsyncTask: boolean isCancelled()>
<android.support.v4.content.ModernAsyncTask: void onPreExecute()>
<org.thoughtcrime.securesms.MessageDetailsActivity$MessageRecipientAsyncTask: android.content.Context getContext()>
<android.support.v7.view.menu.ActionMenuItemView: boolean hasText()>
<java.util.GregorianCalendar: void computeTime()>
<java.util.ServiceLoader: void reload()>
<com.android.internal.policy.PhoneWindow: int getDecorCaptionShade()>
<android.icu.impl.locale.Extension: java.lang.String getValue()>
<android.icu.impl.locale.Extension: java.lang.String getID()>
<java.util.ServiceLoader: java.util.Iterator iterator()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signal()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void signalAll()>
<android.widget.ListView$ArrowScrollFocusResult: int getSelectedPosition()>
<android.widget.ListView$ArrowScrollFocusResult: int getAmountToScroll()>
<android.app.FragmentManagerImpl: void startPendingDeferredFragments()>
<android.icu.text.DigitList: boolean isZero()>
<android.icu.text.DigitList: long getLong()>
<android.icu.text.DigitList: boolean isIntegral()>
<android.icu.text.DigitList: boolean wasRounded()>
<org.thoughtcrime.securesms.components.emoji.EmojiToggle: void setToEmoji()>
<org.thoughtcrime.securesms.components.emoji.EmojiToggle: void setToIme()>
<android.text.MeasuredText: void finish()>
<sun.security.util.SignatureFileVerifier: boolean needSignatureFileBytes()>
<android.app.FragmentManagerImpl: boolean execPendingActions()>
<android.support.v7.widget.OrientationHelper: int getTotalSpaceChange()>
<android.app.FragmentManagerImpl: void doPendingDeferredStart()>
<android.support.v7.widget.OrientationHelper: void onLayoutComplete()>
<android.app.FragmentManagerImpl: void reportBackStackChanged()>
<android.app.FragmentManagerImpl: android.os.Parcelable saveAllState()>
<android.icu.impl.UResource$Key: android.icu.impl.UResource$Key setToEmpty()>
<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>
<android.animation.Animator: java.util.ArrayList getListeners()>
<android.icu.text.DecimalFormat: int getMinimumSignificantDigits()>
<android.icu.text.DecimalFormat: int getMaximumSignificantDigits()>
<android.animation.Animator: void removeAllListeners()>
<android.widget.Editor$EditOperation: void commit()>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void activate()>
<android.widget.Editor$EditOperation: void undo()>
<android.icu.text.DecimalFormat: boolean areSignificantDigitsUsed()>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void deactivate()>
<android.widget.Editor$EditOperation: void redo()>
<android.animation.Animator: android.content.res.ConstantState createConstantState()>
<com.android.internal.view.FloatingActionMode$FloatingToolbarVisibilityHelper: void updateToolbarVisibility()>
<android.icu.text.DecimalFormat: android.icu.util.Currency getEffectiveCurrency()>
<android.icu.text.DecimalFormat: boolean isParseBigDecimal()>
<android.icu.text.DecimalFormat: int getParseMaxDigits()>
<com.fasterxml.jackson.annotation.ObjectIdGenerator: boolean maySerializeAsObject()>
<android.content.res.XmlBlock$Parser: int getDepth()>
<android.content.res.XmlBlock$Parser: java.lang.String getText()>
<android.content.res.XmlBlock$Parser: int getLineNumber()>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace()>
<android.content.res.XmlBlock$Parser: java.lang.String getName()>
<android.app.FragmentManagerImpl: void noteStateNotSaved()>
<android.app.FragmentManagerImpl: void dispatchCreate()>
<android.app.FragmentManagerImpl: void dispatchActivityCreated()>
<com.android.mms.service_alt.MmsConfigManager: com.android.mms.service_alt.MmsConfig getMmsConfig()>
<android.app.FragmentManagerImpl: void dispatchStart()>
<android.app.FragmentManagerImpl: void dispatchResume()>
<android.app.FragmentManagerImpl: void dispatchPause()>
<android.app.FragmentManagerImpl: void dispatchStop()>
<android.app.FragmentManagerImpl: void dispatchDestroyView()>
<android.app.FragmentManagerImpl: void dispatchDestroy()>
<org.thoughtcrime.securesms.ContactSelectionListFragment: java.util.List getSelectedContacts()>
<java.lang.ProcessEnvironment$ExternalData: byte[] getBytes()>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void reset()>
<org.thoughtcrime.securesms.ContactSelectionListFragment: void resetQueryFilter()>
<android.content.res.XmlBlock$Parser: void close()>
<android.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()>
<org.thoughtcrime.securesms.database.RecipientDatabase$RegisteredState: int getId()>
<android.support.v7.widget.GridLayout$Interval: int hashCode()>
<android.support.v7.widget.GridLayout$Interval: int size()>
<android.icu.text.PluralRanges$Matrix: int hashCode()>
<com.fasterxml.jackson.databind.JsonDeserializer: java.lang.Object getEmptyValue()>
<android.icu.text.PluralRanges$Matrix: java.lang.String toString()>
<android.os.ParcelFileDescriptor$Status: java.io.IOException asIOException()>
<android.widget.Editor$SelectionModifierCursorController: void hide()>
<com.google.android.exoplayer2.decoder.DecoderInputBuffer: void clear()>
<com.google.android.exoplayer2.decoder.DecoderInputBuffer: void flip()>
<com.google.android.exoplayer2.decoder.DecoderInputBuffer: boolean isEncrypted()>
<android.widget.Editor$SelectionModifierCursorController: int getMinTouchOffset()>
<android.widget.Editor$SelectionModifierCursorController: int getMaxTouchOffset()>
<android.widget.Editor$SelectionModifierCursorController: void resetTouchOffsets()>
<android.widget.Editor$SelectionModifierCursorController: boolean isSelectionStartDragged()>
<android.widget.Editor$SelectionModifierCursorController: boolean isDragAcceleratorActive()>
<android.widget.Editor$SelectionModifierCursorController: void onDetached()>
<android.widget.Editor$SelectionModifierCursorController: void invalidateHandles()>
<org.webrtc.CameraCapturer$2: void onCameraOpening()>
<android.support.v7.widget.RecyclerView$State: int getItemCount()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: com.fasterxml.jackson.annotation.ObjectIdGenerator$IdKey getKey()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: boolean hasReferringProperties()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.util.Iterator referringProperties()>
<android.support.v7.widget.RecyclerView$State: boolean hasTargetScrollPosition()>
<com.fasterxml.jackson.databind.deser.impl.ReadableObjectId: java.lang.Object resolve()>
<android.support.v7.widget.RecyclerView$State: boolean isPreLayout()>
<android.graphics.drawable.DrawableContainer$BlockInvalidateCallback: android.graphics.drawable.Drawable$Callback unwrap()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getDependencyCount()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getEnumTypeCount()>
<android.support.v7.widget.RecyclerView$State: boolean willRunPredictiveAnimations()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getExtensionCount()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getMessageTypeCount()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: java.lang.String getName()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: com.google.protobuf.DescriptorProtos$FileOptions getOptions()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: java.lang.String getPackage()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getPublicDependencyCount()>
<android.icu.text.DateTimePatternGenerator$DistanceInfo: void clear()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: int getServiceCount()>
<android.os.StrictMode$ViolationInfo: int hashCode()>
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>
<android.database.sqlite.SQLiteDatabase: void onCorruption()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()>
<com.google.protobuf.DescriptorProtos$FileDescriptorProto: boolean hasOptions()>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: java.util.List getUntrustedRecords()>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: java.util.List getUnverifiedRecords()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalBaseKey()>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: boolean isUntrusted()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalBaseKeyPrivate()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalIdentityKey()>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: boolean isUnverified()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalIdentityKeyPrivate()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalRatchetKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: com.google.protobuf.ByteString getLocalRatchetKeyPrivate()>
<org.thoughtcrime.securesms.database.identity.IdentityRecordList: boolean isVerified()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: int getSequence()>
<javax.crypto.Cipher: void updateProviderIfNeeded()>
<java.net.ServerSocket: java.net.InetAddress getInetAddress()>
<java.net.ServerSocket: int getLocalPort()>
<android.database.sqlite.SQLiteDatabase: void reopenReadWrite()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalBaseKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalBaseKeyPrivate()>
<javax.crypto.Cipher: int getBlockSize()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalIdentityKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalIdentityKeyPrivate()>
<java.net.ServerSocket: boolean isBound()>
<javax.crypto.Cipher: byte[] getIV()>
<android.graphics.drawable.Icon: int getType()>
<android.graphics.drawable.Icon: android.graphics.Bitmap getBitmap()>
<java.net.ServerSocket: boolean isClosed()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalRatchetKey()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasLocalRatchetKeyPrivate()>
<android.graphics.drawable.Icon: int getDataLength()>
<org.whispersystems.libsignal.state.StorageProtos$SessionStructure$PendingKeyExchange: boolean hasSequence()>
<android.graphics.drawable.Icon: int getDataOffset()>
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isHeldExclusively()>
<android.graphics.drawable.Icon: byte[] getDataBytes()>
<sun.util.locale.LocaleExtensions: java.util.Set getKeys()>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<java.net.ServerSocket: void setBound()>
<java.net.ServerSocket: void setCreated()>
<android.graphics.drawable.Icon: java.lang.String getResPackage()>
<android.graphics.drawable.Icon: int getResId()>
<android.graphics.drawable.Icon: java.lang.String getUriString()>
<android.support.v4.util.MapCollections$MapIterator: java.lang.Object getKey()>
<sun.util.locale.LocaleExtensions: boolean isEmpty()>
<android.support.v4.util.MapCollections$MapIterator: java.lang.Object getValue()>
<android.support.v4.util.MapCollections$MapIterator: boolean hasNext()>
<sun.util.locale.LocaleExtensions: java.lang.String getID()>
<sun.util.locale.LocaleExtensions: int hashCode()>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.text.StaticLayout$Builder: void finish()>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.support.design.widget.BaseTransientBottomBar: void animateViewIn()>
<com.google.android.gms.common.zzd$zzc: byte[] getBytes()>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.support.design.widget.BaseTransientBottomBar: android.content.Context getContext()>
<android.text.StaticLayout$Builder: android.text.StaticLayout build()>
<android.view.View$CheckForLongPress: void rememberWindowAttachCount()>
<android.support.design.widget.BaseTransientBottomBar: boolean isShownOrQueued()>
<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>
<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.DupDetector getDupDetector()>
<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>
<android.support.design.widget.BaseTransientBottomBar: void onViewShown()>
<android.support.design.widget.BaseTransientBottomBar: boolean shouldAnimate()>
<android.support.design.widget.BaseTransientBottomBar: void show()>
<android.support.design.widget.BaseTransientBottomBar: void showView()>
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<java.util.TreeSet: void clear()>
<java.util.TreeSet: java.util.Comparator comparator()>
<java.util.TreeSet: java.lang.Object first()>
<java.util.TreeSet: java.lang.Object pollFirst()>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: int getHeight()>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: int getWidth()>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: float getX()>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: float getY()>
<org.thoughtcrime.securesms.components.multiwaveview.TargetDrawable: boolean isValid()>
<java.util.jar.JarVerifier: boolean nothingToVerify()>
<java.util.jar.JarVerifier: void doneWithMeta()>
<android.widget.FrameLayout: int getPaddingLeftWithForeground()>
<android.widget.FrameLayout: int getPaddingRightWithForeground()>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<java.security.KeyPairGenerator$Delegate: void disableFailover()>
<java.security.KeyPairGenerator$Delegate: java.security.KeyPair generateKeyPair()>
<org.thoughtcrime.securesms.MessageRecipientListItem: void unbind()>
<android.graphics.Camera: void save()>
<android.graphics.Camera: void restore()>
<android.hardware.input.IInputDevicesChangedListener$Stub: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<org.webrtc.Camera1Session$3$$Lambda$0: void run()>
<android.view.accessibility.AccessibilityRecord: boolean isSealed()>
<android.view.accessibility.AccessibilityRecord: void enforceNotSealed()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: org.thoughtcrime.securesms.database.Address getAddress()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: org.whispersystems.libsignal.IdentityKey getIdentityKey()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: long getTimestamp()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: org.thoughtcrime.securesms.database.IdentityDatabase$VerifiedStatus getVerifiedStatus()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: boolean isApprovedNonBlocking()>
<org.thoughtcrime.securesms.database.IdentityDatabase$IdentityRecord: boolean isFirstUse()>
<android.app.Notification$Action: android.graphics.drawable.Icon getIcon()>
<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()>
<com.astuetz.PagerSlidingTabStrip: void notifyDataSetChanged()>
<dagger.internal.BindingsGroup: java.util.Set entrySet()>
<org.webrtc.MediaStream: void dispose()>
<android.icu.impl.ICUResourceBundleImpl: int getResource()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: org.thoughtcrime.securesms.database.model.DisplayRecord$Body getBody()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: long getDateReceived()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: long getDateSent()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: int getDeliveryReceiptCount()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: int getDeliveryStatus()>
<sun.security.util.ManifestEntryVerifier: java.util.jar.JarEntry getEntry()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: int getReadReceiptCount()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: org.thoughtcrime.securesms.recipients.Recipient getRecipient()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: long getThreadId()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isCallLog()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isEndSession()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isExpirationTimerUpdate()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isFailed()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isGroupAction()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isGroupQuit()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isGroupUpdate()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isIncomingCall()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isJoined()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isKeyExchange()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isMissedCall()>
<org.thoughtcrime.securesms.components.ImageDivet: float getCloseOffset()>
<org.thoughtcrime.securesms.database.model.DisplayRecord: boolean isOutgoingCall()>
<android.icu.text.TimeZoneNames$MatchInfo: java.lang.String tzID()>
<android.icu.text.TimeZoneNames$MatchInfo: java.lang.String mzID()>
<android.icu.text.TimeZoneNames$MatchInfo: android.icu.text.TimeZoneNames$NameType nameType()>
<android.icu.text.TimeZoneNames$MatchInfo: int matchLength()>
<java.util.concurrent.atomic.AtomicInteger: int get()>
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
<org.thoughtcrime.securesms.database.MmsDatabase: java.util.List setAllMessagesRead()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: com.google.protobuf.ByteString getAggregateValueBytes()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: double getDoubleValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: com.google.protobuf.ByteString getIdentifierValueBytes()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: int getNameCount()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: long getNegativeIntValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: long getPositiveIntValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: com.google.protobuf.ByteString getStringValue()>
<android.database.sqlite.SQLiteConnectionPool: void close()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasAggregateValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasDoubleValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasIdentifierValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasNegativeIntValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasPositiveIntValue()>
<com.google.protobuf.DescriptorProtos$UninterpretedOption: boolean hasStringValue()>
<java.text.AttributedString$AttributedStringIterator: char first()>
<java.text.AttributedString$AttributedStringIterator: char current()>
<java.text.AttributedString$AttributedStringIterator: char next()>
<android.support.v7.widget.LinearLayoutManager: android.support.v7.widget.LinearLayoutManager$LayoutState createLayoutState()>
<android.support.v7.widget.LinearLayoutManager: void ensureLayoutState()>
<java.text.AttributedString$AttributedStringIterator: int getBeginIndex()>
<java.text.AttributedString$AttributedStringIterator: int getEndIndex()>
<java.text.AttributedString$AttributedStringIterator: int getIndex()>
<java.text.AttributedString$AttributedStringIterator: int getRunStart()>
<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()>
<java.text.AttributedString$AttributedStringIterator: int getRunLimit()>
<org.thoughtcrime.securesms.database.Address: boolean isEmail()>
<org.thoughtcrime.securesms.database.Address: boolean isGroup()>
<org.thoughtcrime.securesms.database.Address: boolean isMmsGroup()>
<org.thoughtcrime.securesms.database.ThreadDatabase: android.database.Cursor getArchivedConversationList()>
<org.thoughtcrime.securesms.database.Address: boolean isPhone()>
<org.thoughtcrime.securesms.database.ThreadDatabase: int getArchivedConversationListCount()>
<org.thoughtcrime.securesms.database.Address: java.lang.String serialize()>
<org.thoughtcrime.securesms.database.Address: java.lang.String toEmailString()>
<org.thoughtcrime.securesms.database.Address: java.lang.String toGroupString()>
<android.support.v7.widget.LinearLayoutManager: int findFirstCompletelyVisibleItemPosition()>
<org.thoughtcrime.securesms.database.ThreadDatabase: android.database.Cursor getConversationList()>
<org.thoughtcrime.securesms.database.ThreadDatabase: android.database.Cursor getDirectShareList()>
<org.thoughtcrime.securesms.database.Address: java.lang.String toPhoneString()>
<android.support.v7.widget.LinearLayoutManager: int findFirstVisibleItemPosition()>
<java.io.SerialCallbackContext: void setUsed()>
<java.text.AttributedString$AttributedStringIterator: java.util.Map getAttributes()>
<android.support.v7.widget.LinearLayoutManager: int findLastVisibleItemPosition()>
<java.text.AttributedString$AttributedStringIterator: java.util.Set getAllAttributeKeys()>
<android.app.ContextImpl: java.lang.String getPackageName()>
<android.app.ContextImpl: java.lang.String getBasePackageName()>
<android.app.ContextImpl: java.lang.String getOpPackageName()>
<android.support.v7.widget.LinearLayoutManager: boolean getReverseLayout()>
<android.support.v7.widget.LinearLayoutManager: boolean isLayoutRTL()>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange: int getEnd()>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange: int getStart()>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange: boolean hasEnd()>
<com.google.protobuf.DescriptorProtos$DescriptorProto$ExtensionRange: boolean hasStart()>
<android.graphics.drawable.TransitionDrawable: void resetTransition()>
<org.thoughtcrime.securesms.database.ThreadDatabase: java.util.List setAllThreadsRead()>
<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: boolean canConstantState()>
<android.bluetooth.BluetoothInputHost: boolean doBind()>
<android.support.v7.widget.LinearLayoutManager: boolean resolveIsInfinite()>
<java.net.Proxy: java.net.Proxy$Type type()>
<java.net.Proxy: java.net.SocketAddress address()>
<android.icu.impl.Trie2: java.util.Iterator iterator()>
<android.media.AudioTrack: void release()>
<android.media.AudioTrack: int getSampleRate()>
<android.media.AudioTrack: int getState()>
<android.media.AudioTrack: int getPlayState()>
<android.media.AudioTrack: int getPlaybackHeadPosition()>
<android.media.AudioTrack: int getAudioSessionId()>
<android.widget.Editor$PositionListener: int getPositionX()>
<android.widget.Editor$PositionListener: int getPositionY()>
<android.widget.Editor$PositionListener: int getPositionXOnScreen()>
<android.widget.Editor$PositionListener: int getPositionYOnScreen()>
<android.widget.Editor$PositionListener: void onScrollChanged()>
<org.thoughtcrime.securesms.components.MicrophoneRecorderView: void cancelAction()>
<android.app.FragmentController: android.app.FragmentManager getFragmentManager()>
<com.fasterxml.jackson.databind.deser.impl.CreatorCollector: boolean hasDefaultCreator()>
<android.app.FragmentController: android.os.Parcelable saveAllState()>
<android.app.FragmentController: void dispatchCreate()>
<android.app.FragmentController: void doLoaderStart()>
<android.media.PlayerBase: void baseStart()>
<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>
<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isOffList()>
<android.media.PlayerBase: void baseRelease()>
<android.media.PlayerBase: void updateAppOpsPlayAudio_sync()>
<android.media.PlayerBase: boolean isRestricted_sync()>
<android.media.AudioTrack: void native_release()>
<android.support.v7.widget.RecyclerView$LayoutParams: int getViewLayoutPosition()>
<android.support.v7.widget.RecyclerView$LayoutParams: boolean isItemChanged()>
<android.support.v7.widget.RecyclerView$LayoutParams: boolean isItemRemoved()>
<android.support.v7.widget.RecyclerView$LayoutParams: boolean isViewInvalid()>
<sun.security.jca.ProviderConfig: boolean isLoaded()>
<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>
<com.fasterxml.jackson.databind.DeserializationConfig: int getDeserializationFeatures()>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.node.JsonNodeFactory getNodeFactory()>
<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.util.LinkedNode getProblemHandlers()>
<com.fasterxml.jackson.databind.DeserializationConfig: boolean useRootWrapping()>
<org.thoughtcrime.securesms.components.PushRecipientsPanel: java.util.List getRecipients()>
<android.support.v7.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()>
<android.support.v7.widget.LinearLayoutCompat: int getDividerWidth()>
<android.support.v7.widget.LinearLayoutCompat: int getGravity()>
<android.support.v7.widget.LinearLayoutCompat: int getVirtualChildCount()>
<java.security.Permission: java.lang.String getName()>
<sun.security.x509.X509CRLEntryImpl: java.math.BigInteger getSerialNumber()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: java.lang.String getDefaultValue()>
<java.util.concurrent.locks.ReentrantLock: void lock()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.ByteString getDefaultValueBytes()>
<java.util.concurrent.locks.ReentrantLock: void unlock()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: java.lang.String getExtendee()>
<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.ByteString getExtendeeBytes()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Label getLabel()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: java.lang.String getName()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.ByteString getNameBytes()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: int getNumber()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.DescriptorProtos$FieldOptions getOptions()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean getSameMobileAndFixedLinePattern()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.google.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasLeadingDigits()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.DescriptorProtos$FieldDescriptorProto$Type getType()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: java.lang.String getTypeName()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String _findDefaultValue()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: com.google.protobuf.ByteString getTypeNameBytes()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String _findDescription()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasPreferredExtnPrefix()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Integer _findIndex()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasDefaultValue()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.Boolean _findRequired()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasExtendee()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasLabel()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasName()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int intlNumberFormatSize()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasNumber()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasOptions()>
<sun.security.x509.X509CRLEntryImpl: sun.security.x509.CertificateIssuerExtension getCertificateIssuerExtension()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int numberFormatSize()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasType()>
<com.google.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>
<com.google.protobuf.DescriptorProtos$FieldDescriptorProto: boolean hasTypeName()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean anyIgnorals()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean anyVisible()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean couldDeserialize()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean couldSerialize()>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Set findExplicitNames()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.annotation.JsonInclude$Include findInclusion()>
<com.android.mms.service_alt.MmsConfig: int getSubId()>
<org.thoughtcrime.securesms.database.model.ThreadRecord: int getDistributionType()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getAccessor()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedParameter getConstructorParameter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.util.Iterator getConstructorParameters()>
<com.google.android.exoplayer2.decoder.Buffer: boolean isDecodeOnly()>
<com.google.android.exoplayer2.decoder.Buffer: boolean isEndOfStream()>
<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>
<com.google.android.exoplayer2.decoder.Buffer: boolean isKeyFrame()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedField getField()>
<java.util.IdentityHashMap$IdentityHashMapIterator: int nextIndex()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getGetter()>
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.SocketImpl: java.net.Socket getSocket()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: java.lang.String getInternalName()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMutator()>
<org.thoughtcrime.securesms.webrtc.audio.OutgoingRinger: void stop()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMember getPrimaryMember()>
<org.whispersystems.libsignal.kdf.HKDFv3: int getIterationStartOffset()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: com.fasterxml.jackson.databind.introspect.AnnotatedMethod getSetter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasConstructorParameter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasField()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasGetter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean hasSetter()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isExplicitlyIncluded()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isExplicitlyNamed()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: boolean isTypeId()>
<android.icu.impl.CaseMap$StringContextIterator: void moveToLimit()>
<android.icu.impl.CaseMap$StringContextIterator: int nextCaseMapCP()>
<android.icu.impl.CaseMap$StringContextIterator: int getCPStart()>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<android.icu.impl.CaseMap$StringContextIterator: int getCPLimit()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void removeConstructors()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void removeIgnored()>
<android.view.TextureView: android.view.HardwareLayer getHardwareLayer()>
<com.fasterxml.jackson.annotation.JsonFormat$Shape: boolean isNumeric()>
<com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder: void trimByVisibility()>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void show()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: void dismissDialog()>
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: void onBackPressed()>
<android.view.SurfaceView: void handleGetNewSurface()>
<android.app.Dialog: void cancel()>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void recycle()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage build()>
<org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage$Builder: org.whispersystems.signalservice.internal.push.ProvisioningProtos$ProvisionMessage buildPartial()>
<android.os.UserHandle: int getIdentifier()>
<dalvik.system.DexFile: java.lang.String getName()>
<com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler: com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler start()>
<android.support.v7.widget.ChildHelper$Bucket: void reset()>
<org.whispersystems.libsignal.ecc.DjbECPrivateKey: byte[] getPrivateKey()>
<org.whispersystems.libsignal.ecc.DjbECPrivateKey: int getType()>
<org.whispersystems.libsignal.ecc.DjbECPrivateKey: byte[] serialize()>
<org.whispersystems.jobqueue.JobQueue: void onRequirementStatusChanged()>
<java.util.UUID: long getLeastSignificantBits()>
<java.util.UUID: long getMostSignificantBits()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure: int getId()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure: com.google.protobuf.ByteString getPrivateKey()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure: com.google.protobuf.ByteString getPublicKey()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure: com.google.protobuf.ByteString getSignature()>
<org.whispersystems.libsignal.state.StorageProtos$SignedPreKeyRecordStructure: com.google.protobuf.UnknownFieldSet getUnknownFields()>
<com.google.protobuf.FieldSet: com.google.protobuf.FieldSet clone()>
<com.google.protobuf.FieldSet: java.util.Map getAllFields()>
<com.google.protobuf.FieldSet: int getMessageSetSerializedSize()>
<com.google.protobuf.FieldSet: int getSerializedSize()>
<com.google.protobuf.FieldSet: boolean isImmutable()>
<com.google.protobuf.FieldSet: boolean isInitialized()>
<com.google.protobuf.FieldSet: java.util.Iterator iterator()>
<com.google.protobuf.FieldSet: void makeImmutable()>
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()>
